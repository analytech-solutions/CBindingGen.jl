# This file is automatically generated.  Do not edit.
using CBinding: 𝐣𝐥

𝐣𝐥.@cbindings LIBCLANG_PATH begin
	𝐣𝐥.@doc """
	 A generic error code, no further details are available.
	
	## Details
	
	 Errors of this kind can get their own specific error codes in future libclang versions.
	
	## Reference
	
	[CXErrorCode.h:41](./include/clang-c/CXErrorCode.h:41:3)
	""" CXError_Failure
	𝐣𝐥.@doc """
	 Error codes returned by libclang routines.
	
	## Details
	
	 Zero (`CXError_Success)` is the only error code indicating success.  Other error codes, including not yet assigned non-zero values, indicate errors.
	
	## Reference
	
	[CXErrorCode.h:29](./include/clang-c/CXErrorCode.h:29:6)
	""" CXErrorCode
	𝐣𝐥.@doc """
	 No error.
	
	## Reference
	
	[CXErrorCode.h:33](./include/clang-c/CXErrorCode.h:33:3)
	""" CXError_Success
	𝐣𝐥.@doc """
	 libclang crashed while performing the requested operation.
	
	## Reference
	
	[CXErrorCode.h:46](./include/clang-c/CXErrorCode.h:46:3)
	""" CXError_Crashed
	𝐣𝐥.@doc """
	 The function detected that the arguments violate the function contract.
	
	## Reference
	
	[CXErrorCode.h:52](./include/clang-c/CXErrorCode.h:52:3)
	""" CXError_InvalidArguments
	𝐣𝐥.@doc """
	 An AST deserialization error has occurred.
	
	## Reference
	
	[CXErrorCode.h:57](./include/clang-c/CXErrorCode.h:57:3)
	""" CXError_ASTReadError
	export CXErrorCode, CXError_ASTReadError, CXError_Crashed, CXError_Failure, CXError_InvalidArguments, CXError_Success
	𝐣𝐥.@cenum CXErrorCode {
		CXError_Success = 𝐣𝐥.Cuint(0)
		CXError_Failure = 𝐣𝐥.Cuint(1)
		CXError_Crashed = 𝐣𝐥.Cuint(2)
		CXError_InvalidArguments = 𝐣𝐥.Cuint(3)
		CXError_ASTReadError = 𝐣𝐥.Cuint(4)
	}
	
	𝐣𝐥.@doc """
	 A character string.
	
	## Details
	
	 The `CXString` type is used to return strings from the interface when the ownership of that string might differ from one call to the next. Use `clang_getCString()` to retrieve the string data and, once finished with the string data, call `clang_disposeString()` to free the string.
	
	## Reference
	
	[CXString.h:41](./include/clang-c/CXString.h:41:3)
	""" CXString
	export CXString
	𝐣𝐥.@ctypedef CXString 𝐣𝐥.@cstruct {
		data::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cvoid)}
		private_flags::𝐣𝐥.Cuint
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[CXString.h:46](./include/clang-c/CXString.h:46:3)
	""" CXStringSet
	export CXStringSet
	𝐣𝐥.@ctypedef CXStringSet 𝐣𝐥.@cstruct {
		Strings::𝐣𝐥.Ptr{CXString}
		Count::𝐣𝐥.Cuint
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCString(string::CXString)::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}
	```
	
	 Retrieve the character data associated with the given string.
	
	## Reference
	
	[CXString.h:51](./include/clang-c/CXString.h:51:28)
	""" clang_getCString
	export clang_getCString
	𝐣𝐥.@cextern clang_getCString(string::CXString)::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_disposeString(string::CXString)::𝐣𝐥.Cvoid
	```
	
	 Free the given string.
	
	## Reference
	
	[CXString.h:56](./include/clang-c/CXString.h:56:21)
	""" clang_disposeString
	export clang_disposeString
	𝐣𝐥.@cextern clang_disposeString(string::CXString)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_disposeStringSet(set::𝐣𝐥.Ptr{CXStringSet})::𝐣𝐥.Cvoid
	```
	
	 Free the given string set.
	
	## Reference
	
	[CXString.h:61](./include/clang-c/CXString.h:61:21)
	""" clang_disposeStringSet
	export clang_disposeStringSet
	𝐣𝐥.@cextern clang_disposeStringSet(set::𝐣𝐥.Ptr{CXStringSet})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getBuildSessionTimestamp()::𝐣𝐥.Culonglong
	```
	
	 Return the timestamp for use with Clang's `-fbuild-session-timestamp=` option.
	
	## Reference
	
	[BuildSystem.h:34](./include/clang-c/BuildSystem.h:34:35)
	""" clang_getBuildSessionTimestamp
	export clang_getBuildSessionTimestamp
	𝐣𝐥.@cextern clang_getBuildSessionTimestamp()::𝐣𝐥.Culonglong
	
	𝐣𝐥.@doc """
	 Object encapsulating information about overlaying virtual file/directories over the real file system.
	
	## Reference
	
	[BuildSystem.h:40](./include/clang-c/BuildSystem.h:40:42)
	""" CXVirtualFileOverlay
	𝐣𝐥.@doc """
	## Reference
	
	[BuildSystem.h:40](./include/clang-c/BuildSystem.h:40:16)
	""" CXVirtualFileOverlayImpl
	export CXVirtualFileOverlay, CXVirtualFileOverlayImpl
	𝐣𝐥.@ctypedef CXVirtualFileOverlay 𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXVirtualFileOverlayImpl}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_VirtualFileOverlay_create(options::𝐣𝐥.Cuint)::CXVirtualFileOverlay
	```
	
	 Create a `CXVirtualFileOverlay` object. Must be disposed with `clang_VirtualFileOverlay_dispose().`
	
	## Parameters
	
	  * `options`: is reserved, always pass 0.
	
	## Reference
	
	[BuildSystem.h:49](./include/clang-c/BuildSystem.h:49:1)
	""" clang_VirtualFileOverlay_create
	export clang_VirtualFileOverlay_create
	𝐣𝐥.@cextern clang_VirtualFileOverlay_create(options::𝐣𝐥.Cuint)::CXVirtualFileOverlay
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_VirtualFileOverlay_addFileMapping(var\"?1?\"::CXVirtualFileOverlay, virtualPath::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, realPath::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::𝐣𝐥.@cenum CXErrorCode
	```
	
	 Map an absolute virtual file path to an absolute real one. The virtual path must be canonicalized (not contain \".\"/\"..\"). 
	
	## Returns
	
	 0 for success, non-zero to indicate an error.
	
	## Reference
	
	[BuildSystem.h:57](./include/clang-c/BuildSystem.h:57:1)
	""" clang_VirtualFileOverlay_addFileMapping
	export clang_VirtualFileOverlay_addFileMapping
	𝐣𝐥.@cextern clang_VirtualFileOverlay_addFileMapping(var"?1?"::CXVirtualFileOverlay, virtualPath::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, realPath::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::𝐣𝐥.@cenum CXErrorCode
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_VirtualFileOverlay_setCaseSensitivity(var\"?1?\"::CXVirtualFileOverlay, caseSensitive::𝐣𝐥.Cint)::𝐣𝐥.@cenum CXErrorCode
	```
	
	 Set the case sensitivity for the `CXVirtualFileOverlay` object. The `CXVirtualFileOverlay` object is case-sensitive by default, this option can be used to override the default. 
	
	## Returns
	
	 0 for success, non-zero to indicate an error.
	
	## Reference
	
	[BuildSystem.h:68](./include/clang-c/BuildSystem.h:68:1)
	""" clang_VirtualFileOverlay_setCaseSensitivity
	export clang_VirtualFileOverlay_setCaseSensitivity
	𝐣𝐥.@cextern clang_VirtualFileOverlay_setCaseSensitivity(var"?1?"::CXVirtualFileOverlay, caseSensitive::𝐣𝐥.Cint)::𝐣𝐥.@cenum CXErrorCode
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_VirtualFileOverlay_writeToBuffer(var\"?1?\"::CXVirtualFileOverlay, options::𝐣𝐥.Cuint, out_buffer_ptr::𝐣𝐥.Ptr{𝐣𝐥.Ptr{𝐣𝐥.Cchar}}, out_buffer_size::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.@cenum CXErrorCode
	```
	
	 Write out the `CXVirtualFileOverlay` object to a char buffer.
	
	## Parameters
	
	  * `options`: is reserved, always pass 0.
	  * `out_buffer_ptr`: pointer to receive the buffer pointer, which should be disposed using `clang_free().`
	  * `out_buffer_size`: pointer to receive the buffer size.
	
	## Returns
	
	 0 for success, non-zero to indicate an error.
	
	## Reference
	
	[BuildSystem.h:81](./include/clang-c/BuildSystem.h:81:1)
	""" clang_VirtualFileOverlay_writeToBuffer
	export clang_VirtualFileOverlay_writeToBuffer
	𝐣𝐥.@cextern clang_VirtualFileOverlay_writeToBuffer(var"?1?"::CXVirtualFileOverlay, options::𝐣𝐥.Cuint, out_buffer_ptr::𝐣𝐥.Ptr{𝐣𝐥.Ptr{𝐣𝐥.Cchar}}, out_buffer_size::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.@cenum CXErrorCode
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_free(buffer::𝐣𝐥.Ptr{𝐣𝐥.Cvoid})::𝐣𝐥.Cvoid
	```
	
	 free memory allocated by libclang, such as the buffer returned by `CXVirtualFileOverlay()` or `clang_ModuleMapDescriptor_writeToBuffer().`
	
	## Parameters
	
	  * `buffer`: memory pointer to free.
	
	## Reference
	
	[BuildSystem.h:91](./include/clang-c/BuildSystem.h:91:21)
	""" clang_free
	export clang_free
	𝐣𝐥.@cextern clang_free(buffer::𝐣𝐥.Ptr{𝐣𝐥.Cvoid})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_VirtualFileOverlay_dispose(var\"?1?\"::CXVirtualFileOverlay)::𝐣𝐥.Cvoid
	```
	
	 Dispose a `CXVirtualFileOverlay` object.
	
	## Reference
	
	[BuildSystem.h:96](./include/clang-c/BuildSystem.h:96:21)
	""" clang_VirtualFileOverlay_dispose
	export clang_VirtualFileOverlay_dispose
	𝐣𝐥.@cextern clang_VirtualFileOverlay_dispose(var"?1?"::CXVirtualFileOverlay)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	 Object encapsulating information about a module.map file.
	
	## Reference
	
	[BuildSystem.h:101](./include/clang-c/BuildSystem.h:101:43)
	""" CXModuleMapDescriptor
	𝐣𝐥.@doc """
	## Reference
	
	[BuildSystem.h:101](./include/clang-c/BuildSystem.h:101:16)
	""" CXModuleMapDescriptorImpl
	export CXModuleMapDescriptor, CXModuleMapDescriptorImpl
	𝐣𝐥.@ctypedef CXModuleMapDescriptor 𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXModuleMapDescriptorImpl}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_ModuleMapDescriptor_create(options::𝐣𝐥.Cuint)::CXModuleMapDescriptor
	```
	
	 Create a `CXModuleMapDescriptor` object. Must be disposed with `clang_ModuleMapDescriptor_dispose().`
	
	## Parameters
	
	  * `options`: is reserved, always pass 0.
	
	## Reference
	
	[BuildSystem.h:110](./include/clang-c/BuildSystem.h:110:1)
	""" clang_ModuleMapDescriptor_create
	export clang_ModuleMapDescriptor_create
	𝐣𝐥.@cextern clang_ModuleMapDescriptor_create(options::𝐣𝐥.Cuint)::CXModuleMapDescriptor
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_ModuleMapDescriptor_setFrameworkModuleName(var\"?1?\"::CXModuleMapDescriptor, name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::𝐣𝐥.@cenum CXErrorCode
	```
	
	 Sets the framework module name that the module.map describes. 
	
	## Returns
	
	 0 for success, non-zero to indicate an error.
	
	## Reference
	
	[BuildSystem.h:117](./include/clang-c/BuildSystem.h:117:1)
	""" clang_ModuleMapDescriptor_setFrameworkModuleName
	export clang_ModuleMapDescriptor_setFrameworkModuleName
	𝐣𝐥.@cextern clang_ModuleMapDescriptor_setFrameworkModuleName(var"?1?"::CXModuleMapDescriptor, name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::𝐣𝐥.@cenum CXErrorCode
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_ModuleMapDescriptor_setUmbrellaHeader(var\"?1?\"::CXModuleMapDescriptor, name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::𝐣𝐥.@cenum CXErrorCode
	```
	
	 Sets the umbrealla header name that the module.map describes. 
	
	## Returns
	
	 0 for success, non-zero to indicate an error.
	
	## Reference
	
	[BuildSystem.h:125](./include/clang-c/BuildSystem.h:125:1)
	""" clang_ModuleMapDescriptor_setUmbrellaHeader
	export clang_ModuleMapDescriptor_setUmbrellaHeader
	𝐣𝐥.@cextern clang_ModuleMapDescriptor_setUmbrellaHeader(var"?1?"::CXModuleMapDescriptor, name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::𝐣𝐥.@cenum CXErrorCode
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_ModuleMapDescriptor_writeToBuffer(var\"?1?\"::CXModuleMapDescriptor, options::𝐣𝐥.Cuint, out_buffer_ptr::𝐣𝐥.Ptr{𝐣𝐥.Ptr{𝐣𝐥.Cchar}}, out_buffer_size::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.@cenum CXErrorCode
	```
	
	 Write out the `CXModuleMapDescriptor` object to a char buffer.
	
	## Parameters
	
	  * `options`: is reserved, always pass 0.
	  * `out_buffer_ptr`: pointer to receive the buffer pointer, which should be disposed using `clang_free().`
	  * `out_buffer_size`: pointer to receive the buffer size.
	
	## Returns
	
	 0 for success, non-zero to indicate an error.
	
	## Reference
	
	[BuildSystem.h:138](./include/clang-c/BuildSystem.h:138:1)
	""" clang_ModuleMapDescriptor_writeToBuffer
	export clang_ModuleMapDescriptor_writeToBuffer
	𝐣𝐥.@cextern clang_ModuleMapDescriptor_writeToBuffer(var"?1?"::CXModuleMapDescriptor, options::𝐣𝐥.Cuint, out_buffer_ptr::𝐣𝐥.Ptr{𝐣𝐥.Ptr{𝐣𝐥.Cchar}}, out_buffer_size::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.@cenum CXErrorCode
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_ModuleMapDescriptor_dispose(var\"?1?\"::CXModuleMapDescriptor)::𝐣𝐥.Cvoid
	```
	
	 Dispose a `CXModuleMapDescriptor` object.
	
	## Reference
	
	[BuildSystem.h:145](./include/clang-c/BuildSystem.h:145:21)
	""" clang_ModuleMapDescriptor_dispose
	export clang_ModuleMapDescriptor_dispose
	𝐣𝐥.@cextern clang_ModuleMapDescriptor_dispose(var"?1?"::CXModuleMapDescriptor)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	 A compilation database holds all information used to compile files in a project. For each file in the database, it can be queried for the working directory or the command line used for the compiler invocation.
	
	## Details
	
	 Must be freed by `clang_CompilationDatabase_dispose` 
	
	## Reference
	
	[CXCompilationDatabase.h:38](./include/clang-c/CXCompilationDatabase.h:38:16)
	""" CXCompilationDatabase
	export CXCompilationDatabase
	𝐣𝐥.@ctypedef CXCompilationDatabase 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	 Contains the results of a search in the compilation database
	
	## Details
	
	 When searching for the compile command for a file, the compilation db can return several commands, as the file may have been compiled with different options in different places of the project. This choice of compile commands is wrapped in this opaque data structure. It must be freed by `clang_CompileCommands_dispose.` 
	
	## Reference
	
	[CXCompilationDatabase.h:49](./include/clang-c/CXCompilationDatabase.h:49:16)
	""" CXCompileCommands
	export CXCompileCommands
	𝐣𝐥.@ctypedef CXCompileCommands 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	 Represents the command line invocation to compile a specific file.
	
	## Reference
	
	[CXCompilationDatabase.h:54](./include/clang-c/CXCompilationDatabase.h:54:16)
	""" CXCompileCommand
	export CXCompileCommand
	𝐣𝐥.@ctypedef CXCompileCommand 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	 Error codes for Compilation Database
	
	## Reference
	
	[CXCompilationDatabase.h:70](./include/clang-c/CXCompilationDatabase.h:70:3)
	""" CXCompilationDatabase_Error
	𝐣𝐥.@doc """
	## Reference
	
	[CXCompilationDatabase.h:63](./include/clang-c/CXCompilationDatabase.h:63:3)
	""" CXCompilationDatabase_NoError
	𝐣𝐥.@doc """
	## Reference
	
	[CXCompilationDatabase.h:68](./include/clang-c/CXCompilationDatabase.h:68:3)
	""" CXCompilationDatabase_CanNotLoadDatabase
	export CXCompilationDatabase_CanNotLoadDatabase, CXCompilationDatabase_Error, CXCompilationDatabase_NoError
	𝐣𝐥.@ctypedef CXCompilationDatabase_Error 𝐣𝐥.@cenum {
		CXCompilationDatabase_NoError = 𝐣𝐥.Cuint(0)
		CXCompilationDatabase_CanNotLoadDatabase = 𝐣𝐥.Cuint(1)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompilationDatabase_fromDirectory(BuildDir::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, ErrorCode::𝐣𝐥.Ptr{CXCompilationDatabase_Error})::CXCompilationDatabase
	```
	
	 Creates a compilation database from the database found in directory buildDir. For example, CMake can output a compile_commands.json which can be used to build the database.
	
	## Details
	
	 It must be freed by `clang_CompilationDatabase_dispose.` 
	
	## Reference
	
	[CXCompilationDatabase.h:80](./include/clang-c/CXCompilationDatabase.h:80:1)
	""" clang_CompilationDatabase_fromDirectory
	export clang_CompilationDatabase_fromDirectory
	𝐣𝐥.@cextern clang_CompilationDatabase_fromDirectory(BuildDir::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, ErrorCode::𝐣𝐥.Ptr{CXCompilationDatabase_Error})::CXCompilationDatabase
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompilationDatabase_dispose(var\"?1?\"::CXCompilationDatabase)::𝐣𝐥.Cvoid
	```
	
	 Free the given compilation database
	
	## Reference
	
	[CXCompilationDatabase.h:87](./include/clang-c/CXCompilationDatabase.h:87:1)
	""" clang_CompilationDatabase_dispose
	export clang_CompilationDatabase_dispose
	𝐣𝐥.@cextern clang_CompilationDatabase_dispose(var"?1?"::CXCompilationDatabase)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompilationDatabase_getCompileCommands(var\"?1?\"::CXCompilationDatabase, CompleteFileName::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXCompileCommands
	```
	
	 Find the compile commands used for a file. The compile commands must be freed by `clang_CompileCommands_dispose.` 
	
	## Reference
	
	[CXCompilationDatabase.h:94](./include/clang-c/CXCompilationDatabase.h:94:1)
	""" clang_CompilationDatabase_getCompileCommands
	export clang_CompilationDatabase_getCompileCommands
	𝐣𝐥.@cextern clang_CompilationDatabase_getCompileCommands(var"?1?"::CXCompilationDatabase, CompleteFileName::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXCompileCommands
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompilationDatabase_getAllCompileCommands(var\"?1?\"::CXCompilationDatabase)::CXCompileCommands
	```
	
	 Get all the compile commands in the given compilation database.
	
	## Reference
	
	[CXCompilationDatabase.h:101](./include/clang-c/CXCompilationDatabase.h:101:1)
	""" clang_CompilationDatabase_getAllCompileCommands
	export clang_CompilationDatabase_getAllCompileCommands
	𝐣𝐥.@cextern clang_CompilationDatabase_getAllCompileCommands(var"?1?"::CXCompilationDatabase)::CXCompileCommands
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompileCommands_dispose(var\"?1?\"::CXCompileCommands)::𝐣𝐥.Cvoid
	```
	
	 Free the given CompileCommands
	
	## Reference
	
	[CXCompilationDatabase.h:106](./include/clang-c/CXCompilationDatabase.h:106:21)
	""" clang_CompileCommands_dispose
	export clang_CompileCommands_dispose
	𝐣𝐥.@cextern clang_CompileCommands_dispose(var"?1?"::CXCompileCommands)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompileCommands_getSize(var\"?1?\"::CXCompileCommands)::𝐣𝐥.Cuint
	```
	
	 Get the number of CompileCommand we have for a file
	
	## Reference
	
	[CXCompilationDatabase.h:112](./include/clang-c/CXCompilationDatabase.h:112:1)
	""" clang_CompileCommands_getSize
	export clang_CompileCommands_getSize
	𝐣𝐥.@cextern clang_CompileCommands_getSize(var"?1?"::CXCompileCommands)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompileCommands_getCommand(var\"?1?\"::CXCompileCommands, I::𝐣𝐥.Cuint)::CXCompileCommand
	```
	
	 Get the I'th CompileCommand for a file
	
	## Details
	
	 Note : 0 <= i < clang_CompileCommands_getSize(CXCompileCommands)
	
	## Reference
	
	[CXCompilationDatabase.h:120](./include/clang-c/CXCompilationDatabase.h:120:1)
	""" clang_CompileCommands_getCommand
	export clang_CompileCommands_getCommand
	𝐣𝐥.@cextern clang_CompileCommands_getCommand(var"?1?"::CXCompileCommands, I::𝐣𝐥.Cuint)::CXCompileCommand
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompileCommand_getDirectory(var\"?1?\"::CXCompileCommand)::CXString
	```
	
	 Get the working directory where the CompileCommand was executed from
	
	## Reference
	
	[CXCompilationDatabase.h:126](./include/clang-c/CXCompilationDatabase.h:126:1)
	""" clang_CompileCommand_getDirectory
	export clang_CompileCommand_getDirectory
	𝐣𝐥.@cextern clang_CompileCommand_getDirectory(var"?1?"::CXCompileCommand)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompileCommand_getFilename(var\"?1?\"::CXCompileCommand)::CXString
	```
	
	 Get the filename associated with the CompileCommand.
	
	## Reference
	
	[CXCompilationDatabase.h:132](./include/clang-c/CXCompilationDatabase.h:132:1)
	""" clang_CompileCommand_getFilename
	export clang_CompileCommand_getFilename
	𝐣𝐥.@cextern clang_CompileCommand_getFilename(var"?1?"::CXCompileCommand)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompileCommand_getNumArgs(var\"?1?\"::CXCompileCommand)::𝐣𝐥.Cuint
	```
	
	 Get the number of arguments in the compiler invocation.
	
	## Reference
	
	[CXCompilationDatabase.h:139](./include/clang-c/CXCompilationDatabase.h:139:1)
	""" clang_CompileCommand_getNumArgs
	export clang_CompileCommand_getNumArgs
	𝐣𝐥.@cextern clang_CompileCommand_getNumArgs(var"?1?"::CXCompileCommand)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompileCommand_getArg(var\"?1?\"::CXCompileCommand, I::𝐣𝐥.Cuint)::CXString
	```
	
	 Get the I'th argument value in the compiler invocations
	
	## Details
	
	 Invariant :  - argument 0 is the compiler executable
	
	## Reference
	
	[CXCompilationDatabase.h:148](./include/clang-c/CXCompilationDatabase.h:148:1)
	""" clang_CompileCommand_getArg
	export clang_CompileCommand_getArg
	𝐣𝐥.@cextern clang_CompileCommand_getArg(var"?1?"::CXCompileCommand, I::𝐣𝐥.Cuint)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompileCommand_getNumMappedSources(var\"?1?\"::CXCompileCommand)::𝐣𝐥.Cuint
	```
	
	 Get the number of source mappings for the compiler invocation.
	
	## Reference
	
	[CXCompilationDatabase.h:154](./include/clang-c/CXCompilationDatabase.h:154:1)
	""" clang_CompileCommand_getNumMappedSources
	export clang_CompileCommand_getNumMappedSources
	𝐣𝐥.@cextern clang_CompileCommand_getNumMappedSources(var"?1?"::CXCompileCommand)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompileCommand_getMappedSourcePath(var\"?1?\"::CXCompileCommand, I::𝐣𝐥.Cuint)::CXString
	```
	
	 Get the I'th mapped source path for the compiler invocation.
	
	## Reference
	
	[CXCompilationDatabase.h:160](./include/clang-c/CXCompilationDatabase.h:160:1)
	""" clang_CompileCommand_getMappedSourcePath
	export clang_CompileCommand_getMappedSourcePath
	𝐣𝐥.@cextern clang_CompileCommand_getMappedSourcePath(var"?1?"::CXCompileCommand, I::𝐣𝐥.Cuint)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CompileCommand_getMappedSourceContent(var\"?1?\"::CXCompileCommand, I::𝐣𝐥.Cuint)::CXString
	```
	
	 Get the I'th mapped source content for the compiler invocation.
	
	## Reference
	
	[CXCompilationDatabase.h:166](./include/clang-c/CXCompilationDatabase.h:166:1)
	""" clang_CompileCommand_getMappedSourceContent
	export clang_CompileCommand_getMappedSourceContent
	𝐣𝐥.@cextern clang_CompileCommand_getMappedSourceContent(var"?1?"::CXCompileCommand, I::𝐣𝐥.Cuint)::CXString
	
	𝐣𝐥.@doc """
	 An \"index\" that consists of a set of translation units that would typically be linked together into an executable or library.
	
	## Reference
	
	[Index.h:81](./include/clang-c/Index.h:81:15)
	""" CXIndex
	export CXIndex
	𝐣𝐥.@ctypedef CXIndex 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:87](./include/clang-c/Index.h:87:16)
	""" CXTargetInfoImpl
	𝐣𝐥.@doc """
	 An opaque type representing target information for a given translation unit.
	
	## Reference
	
	[Index.h:87](./include/clang-c/Index.h:87:34)
	""" CXTargetInfo
	export CXTargetInfo, CXTargetInfoImpl
	𝐣𝐥.@ctypedef CXTargetInfo 𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXTargetInfoImpl}
	
	𝐣𝐥.@doc """
	 A single translation unit, which resides in an index.
	
	## Reference
	
	[Index.h:92](./include/clang-c/Index.h:92:39)
	""" CXTranslationUnit
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:92](./include/clang-c/Index.h:92:16)
	""" CXTranslationUnitImpl
	export CXTranslationUnit, CXTranslationUnitImpl
	𝐣𝐥.@ctypedef CXTranslationUnit 𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXTranslationUnitImpl}
	
	𝐣𝐥.@doc """
	 Opaque pointer representing client data that will be passed through to various callbacks and visitors.
	
	## Reference
	
	[Index.h:98](./include/clang-c/Index.h:98:15)
	""" CXClientData
	export CXClientData
	𝐣𝐥.@ctypedef CXClientData 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	 Provides the contents of a file that has not yet been saved to disk.
	
	## Details
	
	 Each CXUnsavedFile instance provides the name of a file on the system along with the current contents of that file that have not yet been saved to disk.
	
	## Reference
	
	[Index.h:107](./include/clang-c/Index.h:107:8)
	""" CXUnsavedFile
	export CXUnsavedFile
	𝐣𝐥.@cstruct CXUnsavedFile {
		Filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}
		Contents::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}
		Length::𝐣𝐥.Culong
	}
	
	𝐣𝐥.@doc """
	 The entity is available, but has been deprecated (and its use is not recommended).
	
	## Reference
	
	[Index.h:140](./include/clang-c/Index.h:140:3)
	""" CXAvailability_Deprecated
	𝐣𝐥.@doc """
	 The entity is not available; any use of it will be an error.
	
	## Reference
	
	[Index.h:144](./include/clang-c/Index.h:144:3)
	""" CXAvailability_NotAvailable
	𝐣𝐥.@doc """
	 Describes the availability of a particular entity, which indicates whether the use of this entity will result in a warning or error due to it being deprecated or unavailable.
	
	## Reference
	
	[Index.h:131](./include/clang-c/Index.h:131:6)
	""" CXAvailabilityKind
	𝐣𝐥.@doc """
	 The entity is available, but not accessible; any use of it will be an error.
	
	## Reference
	
	[Index.h:149](./include/clang-c/Index.h:149:3)
	""" CXAvailability_NotAccessible
	𝐣𝐥.@doc """
	 The entity is available.
	
	## Reference
	
	[Index.h:135](./include/clang-c/Index.h:135:3)
	""" CXAvailability_Available
	export CXAvailabilityKind, CXAvailability_Available, CXAvailability_Deprecated, CXAvailability_NotAccessible, CXAvailability_NotAvailable
	𝐣𝐥.@cenum CXAvailabilityKind {
		CXAvailability_Available = 𝐣𝐥.Cuint(0)
		CXAvailability_Deprecated = 𝐣𝐥.Cuint(1)
		CXAvailability_NotAvailable = 𝐣𝐥.Cuint(2)
		CXAvailability_NotAccessible = 𝐣𝐥.Cuint(3)
	}
	
	𝐣𝐥.@doc """
	 Describes a version number of the form major.minor.subminor.
	
	---
	
	 Describes a version number of the form major.minor.subminor.
	
	## References
	
	[Index.h:155](./include/clang-c/Index.h:155:16)
	
	[Index.h:173](./include/clang-c/Index.h:173:3)
	""" CXVersion
	export CXVersion
	𝐣𝐥.@ctypedef CXVersion 𝐣𝐥.@cstruct CXVersion {
		Major::𝐣𝐥.Cint
		Minor::𝐣𝐥.Cint
		Subminor::𝐣𝐥.Cint
	}
	
	𝐣𝐥.@doc """
	 The cursor has exception specification basic noexcept.
	
	## Reference
	
	[Index.h:205](./include/clang-c/Index.h:205:3)
	""" CXCursor_ExceptionSpecificationKind_BasicNoexcept
	𝐣𝐥.@doc """
	 The cursor has exception specification throw(...).
	
	## Reference
	
	[Index.h:200](./include/clang-c/Index.h:200:3)
	""" CXCursor_ExceptionSpecificationKind_MSAny
	𝐣𝐥.@doc """
	 The cursor has exception specification throw(T1, T2)
	
	## Reference
	
	[Index.h:195](./include/clang-c/Index.h:195:3)
	""" CXCursor_ExceptionSpecificationKind_Dynamic
	𝐣𝐥.@doc """
	 The cursor has exception specification throw()
	
	## Reference
	
	[Index.h:190](./include/clang-c/Index.h:190:3)
	""" CXCursor_ExceptionSpecificationKind_DynamicNone
	𝐣𝐥.@doc """
	 The cursor has exception specification computed noexcept.
	
	## Reference
	
	[Index.h:210](./include/clang-c/Index.h:210:3)
	""" CXCursor_ExceptionSpecificationKind_ComputedNoexcept
	𝐣𝐥.@doc """
	 The cursor has no exception specification.
	
	## Reference
	
	[Index.h:185](./include/clang-c/Index.h:185:3)
	""" CXCursor_ExceptionSpecificationKind_None
	𝐣𝐥.@doc """
	 The exception specification has not yet been evaluated.
	
	## Reference
	
	[Index.h:215](./include/clang-c/Index.h:215:3)
	""" CXCursor_ExceptionSpecificationKind_Unevaluated
	𝐣𝐥.@doc """
	 The exception specification has not yet been instantiated.
	
	## Reference
	
	[Index.h:220](./include/clang-c/Index.h:220:3)
	""" CXCursor_ExceptionSpecificationKind_Uninstantiated
	𝐣𝐥.@doc """
	 The exception specification has not been parsed yet.
	
	## Reference
	
	[Index.h:225](./include/clang-c/Index.h:225:3)
	""" CXCursor_ExceptionSpecificationKind_Unparsed
	𝐣𝐥.@doc """
	 Describes the exception specification of a cursor.
	
	## Details
	
	 A negative value indicates that the cursor is not a function declaration.
	
	## Reference
	
	[Index.h:180](./include/clang-c/Index.h:180:6)
	""" CXCursor_ExceptionSpecificationKind
	export CXCursor_ExceptionSpecificationKind, CXCursor_ExceptionSpecificationKind_BasicNoexcept, CXCursor_ExceptionSpecificationKind_ComputedNoexcept, CXCursor_ExceptionSpecificationKind_Dynamic, CXCursor_ExceptionSpecificationKind_DynamicNone, CXCursor_ExceptionSpecificationKind_MSAny, CXCursor_ExceptionSpecificationKind_None, CXCursor_ExceptionSpecificationKind_Unevaluated, CXCursor_ExceptionSpecificationKind_Uninstantiated, CXCursor_ExceptionSpecificationKind_Unparsed
	𝐣𝐥.@cenum CXCursor_ExceptionSpecificationKind {
		CXCursor_ExceptionSpecificationKind_None = 𝐣𝐥.Cuint(0)
		CXCursor_ExceptionSpecificationKind_DynamicNone = 𝐣𝐥.Cuint(1)
		CXCursor_ExceptionSpecificationKind_Dynamic = 𝐣𝐥.Cuint(2)
		CXCursor_ExceptionSpecificationKind_MSAny = 𝐣𝐥.Cuint(3)
		CXCursor_ExceptionSpecificationKind_BasicNoexcept = 𝐣𝐥.Cuint(4)
		CXCursor_ExceptionSpecificationKind_ComputedNoexcept = 𝐣𝐥.Cuint(5)
		CXCursor_ExceptionSpecificationKind_Unevaluated = 𝐣𝐥.Cuint(6)
		CXCursor_ExceptionSpecificationKind_Uninstantiated = 𝐣𝐥.Cuint(7)
		CXCursor_ExceptionSpecificationKind_Unparsed = 𝐣𝐥.Cuint(8)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_createIndex(excludeDeclarationsFromPCH::𝐣𝐥.Cint, displayDiagnostics::𝐣𝐥.Cint)::CXIndex
	```
	
	 Provides a shared context for creating translation units.
	
	## Details
	
	 It provides two options:
	
	 - excludeDeclarationsFromPCH: When non-zero, allows enumeration of \"local\" declarations (when loading any new translation units). A \"local\" declaration is one that belongs in the translation unit itself and not in a precompiled header that was used by the translation unit. If zero, all declarations will be enumerated.
	
	 Here is an example:
	
	```
	   // excludeDeclsFromPCH = 1, displayDiagnostics=1
	   Idx = clang_createIndex(1, 1);
	
	   // IndexTest.pch was produced with the following command:
	   // \"clang -x c IndexTest.h -emit-ast -o IndexTest.pch\"
	   TU = clang_createTranslationUnit(Idx, \"IndexTest.pch\");
	
	   // This will load all the symbols from 'IndexTest.pch'
	   clang_visitChildren(clang_getTranslationUnitCursor(TU),
	                       TranslationUnitVisitor, 0);
	   clang_disposeTranslationUnit(TU);
	
	   // This will load all the symbols from 'IndexTest.c', excluding symbols
	   // from 'IndexTest.pch'.
	   char *args[] = { \"-Xclang\", \"-include-pch=IndexTest.pch\" };
	   TU = clang_createTranslationUnitFromSourceFile(Idx, \"IndexTest.c\", 2, args,
	                                                  0, 0);
	   clang_visitChildren(clang_getTranslationUnitCursor(TU),
	                       TranslationUnitVisitor, 0);
	   clang_disposeTranslationUnit(TU);
	```
	
	 This process of creating the 'pch', loading it separately, and using it (via -include-pch) allows 'excludeDeclsFromPCH' to remove redundant callbacks (which gives the indexer the same performance benefit as the compiler).
	
	## Reference
	
	[Index.h:268](./include/clang-c/Index.h:268:24)
	""" clang_createIndex
	export clang_createIndex
	𝐣𝐥.@cextern clang_createIndex(excludeDeclarationsFromPCH::𝐣𝐥.Cint, displayDiagnostics::𝐣𝐥.Cint)::CXIndex
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_disposeIndex(index::CXIndex)::𝐣𝐥.Cvoid
	```
	
	 Destroy the given index.
	
	## Details
	
	 The index must not be destroyed until all of the translation units created within that index have been destroyed.
	
	## Reference
	
	[Index.h:277](./include/clang-c/Index.h:277:21)
	""" clang_disposeIndex
	export clang_disposeIndex
	𝐣𝐥.@cextern clang_disposeIndex(index::CXIndex)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:311](./include/clang-c/Index.h:311:3)
	""" CXGlobalOptFlags
	𝐣𝐥.@doc """
	 Used to indicate that threads that libclang creates for editing purposes should use background priority.
	
	## Details
	
	 Affects #clang_reparseTranslationUnit, #clang_codeCompleteAt, #clang_annotateTokens
	
	## Reference
	
	[Index.h:301](./include/clang-c/Index.h:301:3)
	""" CXGlobalOpt_ThreadBackgroundPriorityForEditing
	𝐣𝐥.@doc """
	 Used to indicate that threads that libclang creates for indexing purposes should use background priority.
	
	## Details
	
	 Affects #clang_indexSourceFile, #clang_indexTranslationUnit, #clang_parseTranslationUnit, #clang_saveTranslationUnit.
	
	## Reference
	
	[Index.h:292](./include/clang-c/Index.h:292:3)
	""" CXGlobalOpt_ThreadBackgroundPriorityForIndexing
	𝐣𝐥.@doc """
	 Used to indicate that all threads that libclang creates should use background priority.
	
	## Reference
	
	[Index.h:307](./include/clang-c/Index.h:307:3)
	""" CXGlobalOpt_ThreadBackgroundPriorityForAll
	𝐣𝐥.@doc """
	 Used to indicate that no special CXIndex options are needed.
	
	## Reference
	
	[Index.h:283](./include/clang-c/Index.h:283:3)
	""" CXGlobalOpt_None
	export CXGlobalOptFlags, CXGlobalOpt_None, CXGlobalOpt_ThreadBackgroundPriorityForAll, CXGlobalOpt_ThreadBackgroundPriorityForEditing, CXGlobalOpt_ThreadBackgroundPriorityForIndexing
	𝐣𝐥.@ctypedef CXGlobalOptFlags 𝐣𝐥.@cenum {
		CXGlobalOpt_None = 𝐣𝐥.Cuint(0)
		CXGlobalOpt_ThreadBackgroundPriorityForIndexing = 𝐣𝐥.Cuint(1)
		CXGlobalOpt_ThreadBackgroundPriorityForEditing = 𝐣𝐥.Cuint(2)
		CXGlobalOpt_ThreadBackgroundPriorityForAll = 𝐣𝐥.Cuint(3)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXIndex_setGlobalOptions(var\"?1?\"::CXIndex, options::𝐣𝐥.Cuint)::𝐣𝐥.Cvoid
	```
	
	 Sets general options associated with a CXIndex.
	
	## Details
	
	 For example: 
	
	```
	 CXIndex idx = ...;
	 clang_CXIndex_setGlobalOptions(idx,
	     clang_CXIndex_getGlobalOptions(idx) |
	     CXGlobalOpt_ThreadBackgroundPriorityForIndexing);
	```
	
	## Parameters
	
	  * `options`: A bitmask of options, a bitwise OR of CXGlobalOpt_XXX flags.
	
	## Reference
	
	[Index.h:326](./include/clang-c/Index.h:326:21)
	""" clang_CXIndex_setGlobalOptions
	export clang_CXIndex_setGlobalOptions
	𝐣𝐥.@cextern clang_CXIndex_setGlobalOptions(var"?1?"::CXIndex, options::𝐣𝐥.Cuint)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXIndex_getGlobalOptions(var\"?1?\"::CXIndex)::𝐣𝐥.Cuint
	```
	
	 Gets the general options associated with a CXIndex.
	
	## Returns
	
	 A bitmask of options, a bitwise OR of CXGlobalOpt_XXX flags that are associated with the given CXIndex object.
	
	## Reference
	
	[Index.h:334](./include/clang-c/Index.h:334:25)
	""" clang_CXIndex_getGlobalOptions
	export clang_CXIndex_getGlobalOptions
	𝐣𝐥.@cextern clang_CXIndex_getGlobalOptions(var"?1?"::CXIndex)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXIndex_setInvocationEmissionPathOption(var\"?1?\"::CXIndex, Path::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::𝐣𝐥.Cvoid
	```
	
	 Sets the invocation emission path option in a CXIndex.
	
	## Details
	
	 The invocation emission path specifies a path which will contain log files for certain libclang invocations. A null value (default) implies that libclang invocations are not logged..
	
	## Reference
	
	[Index.h:344](./include/clang-c/Index.h:344:1)
	""" clang_CXIndex_setInvocationEmissionPathOption
	export clang_CXIndex_setInvocationEmissionPathOption
	𝐣𝐥.@cextern clang_CXIndex_setInvocationEmissionPathOption(var"?1?"::CXIndex, Path::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	 A particular source file that is part of a translation unit.
	
	## Reference
	
	[Index.h:355](./include/clang-c/Index.h:355:15)
	""" CXFile
	export CXFile
	𝐣𝐥.@ctypedef CXFile 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getFileName(SFile::CXFile)::CXString
	```
	
	 Retrieve the complete file and path name of the given file.
	
	## Reference
	
	[Index.h:360](./include/clang-c/Index.h:360:25)
	""" clang_getFileName
	export clang_getFileName
	𝐣𝐥.@cextern clang_getFileName(SFile::CXFile)::CXString
	
	𝐣𝐥.@doc """
	 Uniquely identifies a CXFile, that refers to the same underlying file, across an indexing session.
	
	## Reference
	
	[Index.h:373](./include/clang-c/Index.h:373:3)
	""" CXFileUniqueID
	export CXFileUniqueID
	𝐣𝐥.@ctypedef CXFileUniqueID 𝐣𝐥.@cstruct {
		data::𝐣𝐥.Culonglong[3]
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getFileUniqueID(file::CXFile, outID::𝐣𝐥.Ptr{CXFileUniqueID})::𝐣𝐥.Cint
	```
	
	 Retrieve the unique ID for the given `file.`
	
	## Parameters
	
	  * `file`: the file to get the ID for.
	  * `outID`: stores the returned CXFileUniqueID.
	
	## Returns
	
	 If there was a failure getting the unique ID, returns non-zero, otherwise returns 0.
	
	## Reference
	
	[Index.h:383](./include/clang-c/Index.h:383:20)
	""" clang_getFileUniqueID
	export clang_getFileUniqueID
	𝐣𝐥.@cextern clang_getFileUniqueID(file::CXFile, outID::𝐣𝐥.Ptr{CXFileUniqueID})::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isFileMultipleIncludeGuarded(tu::CXTranslationUnit, file::CXFile)::𝐣𝐥.Cuint
	```
	
	 Determine whether the given header is guarded against multiple inclusions, either with the conventional #ifndef/#define/#endif macro guards or with #pragma once.
	
	## Reference
	
	[Index.h:391](./include/clang-c/Index.h:391:1)
	""" clang_isFileMultipleIncludeGuarded
	export clang_isFileMultipleIncludeGuarded
	𝐣𝐥.@cextern clang_isFileMultipleIncludeGuarded(tu::CXTranslationUnit, file::CXFile)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getFile(tu::CXTranslationUnit, file_name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXFile
	```
	
	 Retrieve a file handle within the given translation unit.
	
	## Parameters
	
	  * `tu`: the translation unit
	  * `file_name`: the name of the file.
	
	## Returns
	
	 the file handle for the named file in the translation unit `tu,` or a NULL file handle if the file was not a part of this translation unit.
	
	## Reference
	
	[Index.h:403](./include/clang-c/Index.h:403:23)
	""" clang_getFile
	export clang_getFile
	𝐣𝐥.@cextern clang_getFile(tu::CXTranslationUnit, file_name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXFile
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getFileContents(tu::CXTranslationUnit, file::CXFile, size::𝐣𝐥.Ptr{size_t})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}
	```
	
	 Retrieve the buffer associated with the given file.
	
	## Parameters
	
	  * `tu`: the translation unit
	  * `file`: the file for which to retrieve the buffer.
	  * `size`: [out] if non-NULL, will be set to the size of the buffer.
	
	## Returns
	
	 a pointer to the buffer in memory that holds the contents of `file,` or a NULL pointer when the file is not loaded.
	
	## Reference
	
	[Index.h:418](./include/clang-c/Index.h:418:28)
	""" clang_getFileContents
	export clang_getFileContents
	𝐣𝐥.@cextern clang_getFileContents(tu::CXTranslationUnit, file::CXFile, size::𝐣𝐥.Ptr{size_t})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_File_isEqual(file1::CXFile, file2::CXFile)::𝐣𝐥.Cint
	```
	
	 Returns non-zero if the `file1` and `file2` point to the same file, or they are both NULL.
	
	## Reference
	
	[Index.h:425](./include/clang-c/Index.h:425:20)
	""" clang_File_isEqual
	export clang_File_isEqual
	𝐣𝐥.@cextern clang_File_isEqual(file1::CXFile, file2::CXFile)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	 Identifies a specific source location within a translation unit.
	
	## Details
	
	 Use clang_getExpansionLocation() or clang_getSpellingLocation() to map a source location to a particular file, line, and column.
	
	## Reference
	
	[Index.h:454](./include/clang-c/Index.h:454:3)
	""" CXSourceLocation
	export CXSourceLocation
	𝐣𝐥.@ctypedef CXSourceLocation 𝐣𝐥.@cstruct {
		ptr_data::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cvoid)}[2]
		int_data::𝐣𝐥.Cuint
	}
	
	𝐣𝐥.@doc """
	 Identifies a half-open character range in the source code.
	
	## Details
	
	 Use clang_getRangeStart() and clang_getRangeEnd() to retrieve the starting and end locations from a source range, respectively.
	
	## Reference
	
	[Index.h:466](./include/clang-c/Index.h:466:3)
	""" CXSourceRange
	export CXSourceRange
	𝐣𝐥.@ctypedef CXSourceRange 𝐣𝐥.@cstruct {
		ptr_data::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cvoid)}[2]
		begin_int_data::𝐣𝐥.Cuint
		end_int_data::𝐣𝐥.Cuint
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getNullLocation()::CXSourceLocation
	```
	
	 Retrieve a NULL (invalid) source location.
	
	## Reference
	
	[Index.h:471](./include/clang-c/Index.h:471:33)
	""" clang_getNullLocation
	export clang_getNullLocation
	𝐣𝐥.@cextern clang_getNullLocation()::CXSourceLocation
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_equalLocations(loc1::CXSourceLocation, loc2::CXSourceLocation)::𝐣𝐥.Cuint
	```
	
	 Determine whether two source locations, which must refer into the same translation unit, refer to exactly the same point in the source code.
	
	## Returns
	
	 non-zero if the source locations refer to the same location, zero if they refer to different locations.
	
	## Reference
	
	[Index.h:481](./include/clang-c/Index.h:481:25)
	""" clang_equalLocations
	export clang_equalLocations
	𝐣𝐥.@cextern clang_equalLocations(loc1::CXSourceLocation, loc2::CXSourceLocation)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getLocation(tu::CXTranslationUnit, file::CXFile, line::𝐣𝐥.Cuint, column::𝐣𝐥.Cuint)::CXSourceLocation
	```
	
	 Retrieves the source location associated with a given file/line/column in a particular translation unit.
	
	## Reference
	
	[Index.h:488](./include/clang-c/Index.h:488:33)
	""" clang_getLocation
	export clang_getLocation
	𝐣𝐥.@cextern clang_getLocation(tu::CXTranslationUnit, file::CXFile, line::𝐣𝐥.Cuint, column::𝐣𝐥.Cuint)::CXSourceLocation
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getLocationForOffset(tu::CXTranslationUnit, file::CXFile, offset::𝐣𝐥.Cuint)::CXSourceLocation
	```
	
	 Retrieves the source location associated with a given character offset in a particular translation unit.
	
	## Reference
	
	[Index.h:496](./include/clang-c/Index.h:496:33)
	""" clang_getLocationForOffset
	export clang_getLocationForOffset
	𝐣𝐥.@cextern clang_getLocationForOffset(tu::CXTranslationUnit, file::CXFile, offset::𝐣𝐥.Cuint)::CXSourceLocation
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Location_isInSystemHeader(location::CXSourceLocation)::𝐣𝐥.Cint
	```
	
	 Returns non-zero if the given source location is in a system header.
	
	## Reference
	
	[Index.h:503](./include/clang-c/Index.h:503:20)
	""" clang_Location_isInSystemHeader
	export clang_Location_isInSystemHeader
	𝐣𝐥.@cextern clang_Location_isInSystemHeader(location::CXSourceLocation)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Location_isFromMainFile(location::CXSourceLocation)::𝐣𝐥.Cint
	```
	
	 Returns non-zero if the given source location is in the main file of the corresponding translation unit.
	
	## Reference
	
	[Index.h:509](./include/clang-c/Index.h:509:20)
	""" clang_Location_isFromMainFile
	export clang_Location_isFromMainFile
	𝐣𝐥.@cextern clang_Location_isFromMainFile(location::CXSourceLocation)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getNullRange()::CXSourceRange
	```
	
	 Retrieve a NULL (invalid) source range.
	
	## Reference
	
	[Index.h:514](./include/clang-c/Index.h:514:30)
	""" clang_getNullRange
	export clang_getNullRange
	𝐣𝐥.@cextern clang_getNullRange()::CXSourceRange
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getRange(var\"begin\"::CXSourceLocation, var\"end\"::CXSourceLocation)::CXSourceRange
	```
	
	 Retrieve a source range given the beginning and ending source locations.
	
	## Reference
	
	[Index.h:520](./include/clang-c/Index.h:520:30)
	""" clang_getRange
	export clang_getRange
	𝐣𝐥.@cextern clang_getRange(var"begin"::CXSourceLocation, var"end"::CXSourceLocation)::CXSourceRange
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_equalRanges(range1::CXSourceRange, range2::CXSourceRange)::𝐣𝐥.Cuint
	```
	
	 Determine whether two ranges are equivalent.
	
	## Returns
	
	 non-zero if the ranges are the same, zero if they differ.
	
	## Reference
	
	[Index.h:528](./include/clang-c/Index.h:528:25)
	""" clang_equalRanges
	export clang_equalRanges
	𝐣𝐥.@cextern clang_equalRanges(range1::CXSourceRange, range2::CXSourceRange)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Range_isNull(range::CXSourceRange)::𝐣𝐥.Cint
	```
	
	 Returns non-zero if `range` is null.
	
	## Reference
	
	[Index.h:534](./include/clang-c/Index.h:534:20)
	""" clang_Range_isNull
	export clang_Range_isNull
	𝐣𝐥.@cextern clang_Range_isNull(range::CXSourceRange)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getExpansionLocation(location::CXSourceLocation, file::𝐣𝐥.Ptr{CXFile}, line::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, column::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, offset::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	```
	
	 Retrieve the file, line, column, and offset represented by the given source location.
	
	## Details
	
	 If the location refers into a macro expansion, retrieves the location of the macro expansion.
	
	## Parameters
	
	  * `location`: the location within a source file that will be decomposed into its parts.
	  * `file`: [out] if non-NULL, will be set to the file to which the given source location points.
	  * `line`: [out] if non-NULL, will be set to the line to which the given source location points.
	  * `column`: [out] if non-NULL, will be set to the column to which the given source location points.
	  * `offset`: [out] if non-NULL, will be set to the offset into the buffer to which the given source location points.
	
	## Reference
	
	[Index.h:558](./include/clang-c/Index.h:558:21)
	""" clang_getExpansionLocation
	export clang_getExpansionLocation
	𝐣𝐥.@cextern clang_getExpansionLocation(location::CXSourceLocation, file::𝐣𝐥.Ptr{CXFile}, line::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, column::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, offset::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getPresumedLocation(location::CXSourceLocation, filename::𝐣𝐥.Ptr{CXString}, line::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, column::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	```
	
	 Retrieve the file, line and column represented by the given source location, as specified in a # line directive.
	
	## Details
	
	 Example: given the following source code in a file somefile.c
	
	```
	 #123 \"dummy.c\" 1
	
	 static int func(void)
	 {
	     return 0;
	 }
	```
	
	 the location information returned by this function would be
	
	 File: dummy.c Line: 124 Column: 12
	
	 whereas clang_getExpansionLocation would have returned
	
	 File: somefile.c Line: 3 Column: 12
	
	## Parameters
	
	  * `location`: the location within a source file that will be decomposed into its parts.
	  * `filename`: [out] if non-NULL, will be set to the filename of the source location. Note that filenames returned will be for \"virtual\" files, which don't necessarily exist on the machine running clang - e.g. when parsing preprocessed output obtained from a different environment. If a non-NULL value is passed in, remember to dispose of the returned value using `clang_disposeString()` once you've finished with it. For an invalid source location, an empty string is returned.
	  * `line`: [out] if non-NULL, will be set to the line number of the source location. For an invalid source location, zero is returned.
	  * `column`: [out] if non-NULL, will be set to the column number of the source location. For an invalid source location, zero is returned.
	
	## Reference
	
	[Index.h:604](./include/clang-c/Index.h:604:21)
	""" clang_getPresumedLocation
	export clang_getPresumedLocation
	𝐣𝐥.@cextern clang_getPresumedLocation(location::CXSourceLocation, filename::𝐣𝐥.Ptr{CXString}, line::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, column::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getInstantiationLocation(location::CXSourceLocation, file::𝐣𝐥.Ptr{CXFile}, line::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, column::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, offset::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	```
	
	 Legacy API to retrieve the file, line, column, and offset represented by the given source location.
	
	## Details
	
	 This interface has been replaced by the newer interface #clang_getExpansionLocation(). See that interface's documentation for details.
	
	## Reference
	
	[Index.h:617](./include/clang-c/Index.h:617:21)
	""" clang_getInstantiationLocation
	export clang_getInstantiationLocation
	𝐣𝐥.@cextern clang_getInstantiationLocation(location::CXSourceLocation, file::𝐣𝐥.Ptr{CXFile}, line::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, column::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, offset::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getSpellingLocation(location::CXSourceLocation, file::𝐣𝐥.Ptr{CXFile}, line::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, column::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, offset::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	```
	
	 Retrieve the file, line, column, and offset represented by the given source location.
	
	## Details
	
	 If the location refers into a macro instantiation, return where the location was originally spelled in the source file.
	
	## Parameters
	
	  * `location`: the location within a source file that will be decomposed into its parts.
	  * `file`: [out] if non-NULL, will be set to the file to which the given source location points.
	  * `line`: [out] if non-NULL, will be set to the line to which the given source location points.
	  * `column`: [out] if non-NULL, will be set to the column to which the given source location points.
	  * `offset`: [out] if non-NULL, will be set to the offset into the buffer to which the given source location points.
	
	## Reference
	
	[Index.h:645](./include/clang-c/Index.h:645:21)
	""" clang_getSpellingLocation
	export clang_getSpellingLocation
	𝐣𝐥.@cextern clang_getSpellingLocation(location::CXSourceLocation, file::𝐣𝐥.Ptr{CXFile}, line::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, column::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, offset::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getFileLocation(location::CXSourceLocation, file::𝐣𝐥.Ptr{CXFile}, line::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, column::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, offset::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	```
	
	 Retrieve the file, line, column, and offset represented by the given source location.
	
	## Details
	
	 If the location refers into a macro expansion, return where the macro was expanded or where the macro argument was written, if the location points at a macro argument.
	
	## Parameters
	
	  * `location`: the location within a source file that will be decomposed into its parts.
	  * `file`: [out] if non-NULL, will be set to the file to which the given source location points.
	  * `line`: [out] if non-NULL, will be set to the line to which the given source location points.
	  * `column`: [out] if non-NULL, will be set to the column to which the given source location points.
	  * `offset`: [out] if non-NULL, will be set to the offset into the buffer to which the given source location points.
	
	## Reference
	
	[Index.h:674](./include/clang-c/Index.h:674:21)
	""" clang_getFileLocation
	export clang_getFileLocation
	𝐣𝐥.@cextern clang_getFileLocation(location::CXSourceLocation, file::𝐣𝐥.Ptr{CXFile}, line::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, column::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, offset::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getRangeStart(range::CXSourceRange)::CXSourceLocation
	```
	
	 Retrieve a source location representing the first character within a source range.
	
	## Reference
	
	[Index.h:684](./include/clang-c/Index.h:684:33)
	""" clang_getRangeStart
	export clang_getRangeStart
	𝐣𝐥.@cextern clang_getRangeStart(range::CXSourceRange)::CXSourceLocation
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getRangeEnd(range::CXSourceRange)::CXSourceLocation
	```
	
	 Retrieve a source location representing the last character within a source range.
	
	## Reference
	
	[Index.h:690](./include/clang-c/Index.h:690:33)
	""" clang_getRangeEnd
	export clang_getRangeEnd
	𝐣𝐥.@cextern clang_getRangeEnd(range::CXSourceRange)::CXSourceLocation
	
	𝐣𝐥.@doc """
	 Identifies an array of ranges.
	
	## Reference
	
	[Index.h:702](./include/clang-c/Index.h:702:3)
	""" CXSourceRangeList
	export CXSourceRangeList
	𝐣𝐥.@ctypedef CXSourceRangeList 𝐣𝐥.@cstruct {
		count::𝐣𝐥.Cuint
		ranges::𝐣𝐥.Ptr{CXSourceRange}
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getSkippedRanges(tu::CXTranslationUnit, file::CXFile)::𝐣𝐥.Ptr{CXSourceRangeList}
	```
	
	 Retrieve all ranges that were skipped by the preprocessor.
	
	## Details
	
	 The preprocessor will skip lines when they are surrounded by an if/ifdef/ifndef directive whose condition does not evaluate to true.
	
	## Reference
	
	[Index.h:710](./include/clang-c/Index.h:710:35)
	""" clang_getSkippedRanges
	export clang_getSkippedRanges
	𝐣𝐥.@cextern clang_getSkippedRanges(tu::CXTranslationUnit, file::CXFile)::𝐣𝐥.Ptr{CXSourceRangeList}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getAllSkippedRanges(tu::CXTranslationUnit)::𝐣𝐥.Ptr{CXSourceRangeList}
	```
	
	 Retrieve all ranges from all files that were skipped by the preprocessor.
	
	## Details
	
	 The preprocessor will skip lines when they are surrounded by an if/ifdef/ifndef directive whose condition does not evaluate to true.
	
	## Reference
	
	[Index.h:720](./include/clang-c/Index.h:720:35)
	""" clang_getAllSkippedRanges
	export clang_getAllSkippedRanges
	𝐣𝐥.@cextern clang_getAllSkippedRanges(tu::CXTranslationUnit)::𝐣𝐥.Ptr{CXSourceRangeList}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_disposeSourceRangeList(ranges::𝐣𝐥.Ptr{CXSourceRangeList})::𝐣𝐥.Cvoid
	```
	
	 Destroy the given `CXSourceRangeList.` 
	
	## Reference
	
	[Index.h:725](./include/clang-c/Index.h:725:21)
	""" clang_disposeSourceRangeList
	export clang_disposeSourceRangeList
	𝐣𝐥.@cextern clang_disposeSourceRangeList(ranges::𝐣𝐥.Ptr{CXSourceRangeList})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	 Describes the severity of a particular diagnostic.
	
	## Reference
	
	[Index.h:740](./include/clang-c/Index.h:740:6)
	""" CXDiagnosticSeverity
	𝐣𝐥.@doc """
	 This diagnostic is a note that should be attached to the previous (non-note) diagnostic.
	
	## Reference
	
	[Index.h:751](./include/clang-c/Index.h:751:3)
	""" CXDiagnostic_Note
	𝐣𝐥.@doc """
	 This diagnostic indicates that the code is ill-formed.
	
	## Reference
	
	[Index.h:762](./include/clang-c/Index.h:762:3)
	""" CXDiagnostic_Error
	𝐣𝐥.@doc """
	 A diagnostic that has been suppressed, e.g., by a command-line option.
	
	## Reference
	
	[Index.h:745](./include/clang-c/Index.h:745:3)
	""" CXDiagnostic_Ignored
	𝐣𝐥.@doc """
	 This diagnostic indicates suspicious code that may not be wrong.
	
	## Reference
	
	[Index.h:757](./include/clang-c/Index.h:757:3)
	""" CXDiagnostic_Warning
	𝐣𝐥.@doc """
	 This diagnostic indicates that the code is ill-formed such that future parser recovery is unlikely to produce useful results.
	
	## Reference
	
	[Index.h:769](./include/clang-c/Index.h:769:3)
	""" CXDiagnostic_Fatal
	export CXDiagnosticSeverity, CXDiagnostic_Error, CXDiagnostic_Fatal, CXDiagnostic_Ignored, CXDiagnostic_Note, CXDiagnostic_Warning
	𝐣𝐥.@cenum CXDiagnosticSeverity {
		CXDiagnostic_Ignored = 𝐣𝐥.Cuint(0)
		CXDiagnostic_Note = 𝐣𝐥.Cuint(1)
		CXDiagnostic_Warning = 𝐣𝐥.Cuint(2)
		CXDiagnostic_Error = 𝐣𝐥.Cuint(3)
		CXDiagnostic_Fatal = 𝐣𝐥.Cuint(4)
	}
	
	𝐣𝐥.@doc """
	 A single diagnostic, containing the diagnostic's severity, location, text, source ranges, and fix-it hints.
	
	## Reference
	
	[Index.h:776](./include/clang-c/Index.h:776:15)
	""" CXDiagnostic
	export CXDiagnostic
	𝐣𝐥.@ctypedef CXDiagnostic 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	 A group of CXDiagnostics.
	
	## Reference
	
	[Index.h:781](./include/clang-c/Index.h:781:15)
	""" CXDiagnosticSet
	export CXDiagnosticSet
	𝐣𝐥.@ctypedef CXDiagnosticSet 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getNumDiagnosticsInSet(Diags::CXDiagnosticSet)::𝐣𝐥.Cuint
	```
	
	 Determine the number of diagnostics in a CXDiagnosticSet.
	
	## Reference
	
	[Index.h:786](./include/clang-c/Index.h:786:25)
	""" clang_getNumDiagnosticsInSet
	export clang_getNumDiagnosticsInSet
	𝐣𝐥.@cextern clang_getNumDiagnosticsInSet(Diags::CXDiagnosticSet)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnosticInSet(Diags::CXDiagnosticSet, Index::𝐣𝐥.Cuint)::CXDiagnostic
	```
	
	 Retrieve a diagnostic associated with the given CXDiagnosticSet.
	
	## Parameters
	
	  * `Diags`: the CXDiagnosticSet to query.
	  * `Index`: the zero-based diagnostic number to retrieve.
	
	## Returns
	
	 the requested diagnostic. This diagnostic must be freed via a call to `clang_disposeDiagnostic().` 
	
	## Reference
	
	[Index.h:797](./include/clang-c/Index.h:797:29)
	""" clang_getDiagnosticInSet
	export clang_getDiagnosticInSet
	𝐣𝐥.@cextern clang_getDiagnosticInSet(Diags::CXDiagnosticSet, Index::𝐣𝐥.Cuint)::CXDiagnostic
	
	𝐣𝐥.@doc """
	 Indicates that no error occurred.
	
	## Reference
	
	[Index.h:808](./include/clang-c/Index.h:808:3)
	""" CXLoadDiag_None
	𝐣𝐥.@doc """
	 Describes the kind of error that occurred (if any) in a call to `clang_loadDiagnostics.` 
	
	## Reference
	
	[Index.h:804](./include/clang-c/Index.h:804:6)
	""" CXLoadDiag_Error
	𝐣𝐥.@doc """
	 Indicates that the serialized diagnostics file is invalid or corrupt.
	
	## Reference
	
	[Index.h:826](./include/clang-c/Index.h:826:3)
	""" CXLoadDiag_InvalidFile
	𝐣𝐥.@doc """
	 Indicates that an unknown error occurred while attempting to deserialize diagnostics.
	
	## Reference
	
	[Index.h:814](./include/clang-c/Index.h:814:3)
	""" CXLoadDiag_Unknown
	𝐣𝐥.@doc """
	 Indicates that the file containing the serialized diagnostics could not be opened.
	
	## Reference
	
	[Index.h:820](./include/clang-c/Index.h:820:3)
	""" CXLoadDiag_CannotLoad
	export CXLoadDiag_CannotLoad, CXLoadDiag_Error, CXLoadDiag_InvalidFile, CXLoadDiag_None, CXLoadDiag_Unknown
	𝐣𝐥.@cenum CXLoadDiag_Error {
		CXLoadDiag_None = 𝐣𝐥.Cuint(0)
		CXLoadDiag_Unknown = 𝐣𝐥.Cuint(1)
		CXLoadDiag_CannotLoad = 𝐣𝐥.Cuint(2)
		CXLoadDiag_InvalidFile = 𝐣𝐥.Cuint(3)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_loadDiagnostics(file::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, error::𝐣𝐥.Ptr{𝐣𝐥.@cenum CXLoadDiag_Error}, errorString::𝐣𝐥.Ptr{CXString})::CXDiagnosticSet
	```
	
	 Deserialize a set of diagnostics from a Clang diagnostics bitcode file.
	
	## Parameters
	
	  * `file`: The name of the file to deserialize.
	  * `error`: A pointer to a enum value recording if there was a problem        deserializing the diagnostics.
	  * `errorString`: A pointer to a CXString for recording the error string        if the file was not successfully loaded.
	
	## Returns
	
	 A loaded CXDiagnosticSet if successful, and NULL otherwise.  These diagnostics should be released using clang_disposeDiagnosticSet().
	
	## Reference
	
	[Index.h:842](./include/clang-c/Index.h:842:32)
	""" clang_loadDiagnostics
	export clang_loadDiagnostics
	𝐣𝐥.@cextern clang_loadDiagnostics(file::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, error::𝐣𝐥.Ptr{𝐣𝐥.@cenum CXLoadDiag_Error}, errorString::𝐣𝐥.Ptr{CXString})::CXDiagnosticSet
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_disposeDiagnosticSet(Diags::CXDiagnosticSet)::𝐣𝐥.Cvoid
	```
	
	 Release a CXDiagnosticSet and all of its contained diagnostics.
	
	## Reference
	
	[Index.h:849](./include/clang-c/Index.h:849:21)
	""" clang_disposeDiagnosticSet
	export clang_disposeDiagnosticSet
	𝐣𝐥.@cextern clang_disposeDiagnosticSet(Diags::CXDiagnosticSet)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getChildDiagnostics(D::CXDiagnostic)::CXDiagnosticSet
	```
	
	 Retrieve the child diagnostics of a CXDiagnostic. 
	
	## Details
	
	 This CXDiagnosticSet does not need to be released by clang_disposeDiagnosticSet.
	
	## Reference
	
	[Index.h:857](./include/clang-c/Index.h:857:32)
	""" clang_getChildDiagnostics
	export clang_getChildDiagnostics
	𝐣𝐥.@cextern clang_getChildDiagnostics(D::CXDiagnostic)::CXDiagnosticSet
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getNumDiagnostics(Unit::CXTranslationUnit)::𝐣𝐥.Cuint
	```
	
	 Determine the number of diagnostics produced for the given translation unit.
	
	## Reference
	
	[Index.h:863](./include/clang-c/Index.h:863:25)
	""" clang_getNumDiagnostics
	export clang_getNumDiagnostics
	𝐣𝐥.@cextern clang_getNumDiagnostics(Unit::CXTranslationUnit)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnostic(Unit::CXTranslationUnit, Index::𝐣𝐥.Cuint)::CXDiagnostic
	```
	
	 Retrieve a diagnostic associated with the given translation unit.
	
	## Parameters
	
	  * `Unit`: the translation unit to query.
	  * `Index`: the zero-based diagnostic number to retrieve.
	
	## Returns
	
	 the requested diagnostic. This diagnostic must be freed via a call to `clang_disposeDiagnostic().` 
	
	## Reference
	
	[Index.h:874](./include/clang-c/Index.h:874:29)
	""" clang_getDiagnostic
	export clang_getDiagnostic
	𝐣𝐥.@cextern clang_getDiagnostic(Unit::CXTranslationUnit, Index::𝐣𝐥.Cuint)::CXDiagnostic
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnosticSetFromTU(Unit::CXTranslationUnit)::CXDiagnosticSet
	```
	
	 Retrieve the complete set of diagnostics associated with a        translation unit.
	
	## Parameters
	
	  * `Unit`: the translation unit to query.
	
	## Reference
	
	[Index.h:884](./include/clang-c/Index.h:884:3)
	""" clang_getDiagnosticSetFromTU
	export clang_getDiagnosticSetFromTU
	𝐣𝐥.@cextern clang_getDiagnosticSetFromTU(Unit::CXTranslationUnit)::CXDiagnosticSet
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_disposeDiagnostic(Diagnostic::CXDiagnostic)::𝐣𝐥.Cvoid
	```
	
	 Destroy a diagnostic.
	
	## Reference
	
	[Index.h:889](./include/clang-c/Index.h:889:21)
	""" clang_disposeDiagnostic
	export clang_disposeDiagnostic
	𝐣𝐥.@cextern clang_disposeDiagnostic(Diagnostic::CXDiagnostic)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	 Options to control the display of diagnostics.
	
	## Details
	
	 The values in this enum are meant to be combined to customize the behavior of `clang_formatDiagnostic().` 
	
	## Reference
	
	[Index.h:897](./include/clang-c/Index.h:897:6)
	""" CXDiagnosticDisplayOptions
	𝐣𝐥.@doc """
	 Display the source-location information where the diagnostic was located.
	
	## Details
	
	 When set, diagnostics will be prefixed by the file, line, and (optionally) column to which the diagnostic refers. For example,
	
	```
	 test.c:28: warning: extra tokens at end of #endif directive
	```
	
	 This option corresponds to the clang flag `-fshow-source-location.`   
	
	## Reference
	
	[Index.h:911](./include/clang-c/Index.h:911:3)
	""" CXDiagnostic_DisplaySourceLocation
	𝐣𝐥.@doc """
	 If displaying the source-location information of the diagnostic, also include the column number.
	
	## Details
	
	 This option corresponds to the clang flag `-fshow-column.`   
	
	## Reference
	
	[Index.h:919](./include/clang-c/Index.h:919:3)
	""" CXDiagnostic_DisplayColumn
	𝐣𝐥.@doc """
	 Display the option name associated with this diagnostic, if any.
	
	## Details
	
	 The option name displayed (e.g., -Wconversion) will be placed in brackets after the diagnostic text. This option corresponds to the clang flag `-fdiagnostics-show-option.`   
	
	## Reference
	
	[Index.h:938](./include/clang-c/Index.h:938:3)
	""" CXDiagnostic_DisplayOption
	𝐣𝐥.@doc """
	 Display the category number associated with this diagnostic, if any.
	
	## Details
	
	 The category number is displayed within brackets after the diagnostic text. This option corresponds to the clang flag  `-fdiagnostics-show-category=id.`   
	
	## Reference
	
	[Index.h:947](./include/clang-c/Index.h:947:3)
	""" CXDiagnostic_DisplayCategoryId
	𝐣𝐥.@doc """
	 If displaying the source-location information of the diagnostic, also include information about source ranges in a machine-parsable format.
	
	## Details
	
	 This option corresponds to the clang flag `-fdiagnostics-print-source-range-info.`   
	
	## Reference
	
	[Index.h:929](./include/clang-c/Index.h:929:3)
	""" CXDiagnostic_DisplaySourceRanges
	𝐣𝐥.@doc """
	 Display the category name associated with this diagnostic, if any.
	
	## Details
	
	 The category name is displayed within brackets after the diagnostic text. This option corresponds to the clang flag  `-fdiagnostics-show-category=name.`   
	
	## Reference
	
	[Index.h:956](./include/clang-c/Index.h:956:3)
	""" CXDiagnostic_DisplayCategoryName
	export CXDiagnosticDisplayOptions, CXDiagnostic_DisplayCategoryId, CXDiagnostic_DisplayCategoryName, CXDiagnostic_DisplayColumn, CXDiagnostic_DisplayOption, CXDiagnostic_DisplaySourceLocation, CXDiagnostic_DisplaySourceRanges
	𝐣𝐥.@cenum CXDiagnosticDisplayOptions {
		CXDiagnostic_DisplaySourceLocation = 𝐣𝐥.Cuint(1)
		CXDiagnostic_DisplayColumn = 𝐣𝐥.Cuint(2)
		CXDiagnostic_DisplaySourceRanges = 𝐣𝐥.Cuint(4)
		CXDiagnostic_DisplayOption = 𝐣𝐥.Cuint(8)
		CXDiagnostic_DisplayCategoryId = 𝐣𝐥.Cuint(16)
		CXDiagnostic_DisplayCategoryName = 𝐣𝐥.Cuint(32)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_formatDiagnostic(Diagnostic::CXDiagnostic, Options::𝐣𝐥.Cuint)::CXString
	```
	
	 Format the given diagnostic in a manner that is suitable for display.
	
	## Details
	
	 This routine will format the given diagnostic to a string, rendering the diagnostic according to the various options given. The `clang_defaultDiagnosticDisplayOptions()` function returns the set of options that most closely mimics the behavior of the clang compiler.
	
	## Parameters
	
	  * `Diagnostic`: The diagnostic to print.
	  * `Options`: A set of options that control the diagnostic display, created by combining `CXDiagnosticDisplayOptions` values.
	
	## Returns
	
	 A new string containing for formatted diagnostic.
	
	## Reference
	
	[Index.h:974](./include/clang-c/Index.h:974:25)
	""" clang_formatDiagnostic
	export clang_formatDiagnostic
	𝐣𝐥.@cextern clang_formatDiagnostic(Diagnostic::CXDiagnostic, Options::𝐣𝐥.Cuint)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_defaultDiagnosticDisplayOptions()::𝐣𝐥.Cuint
	```
	
	 Retrieve the set of display options most similar to the default behavior of the clang compiler.
	
	## Returns
	
	 A set of display options suitable for use with `clang_formatDiagnostic().` 
	
	## Reference
	
	[Index.h:984](./include/clang-c/Index.h:984:25)
	""" clang_defaultDiagnosticDisplayOptions
	export clang_defaultDiagnosticDisplayOptions
	𝐣𝐥.@cextern clang_defaultDiagnosticDisplayOptions()::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnosticSeverity(var\"?1?\"::CXDiagnostic)::𝐣𝐥.@cenum CXDiagnosticSeverity
	```
	
	 Determine the severity of the given diagnostic.
	
	## Reference
	
	[Index.h:990](./include/clang-c/Index.h:990:1)
	""" clang_getDiagnosticSeverity
	export clang_getDiagnosticSeverity
	𝐣𝐥.@cextern clang_getDiagnosticSeverity(var"?1?"::CXDiagnostic)::𝐣𝐥.@cenum CXDiagnosticSeverity
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnosticLocation(var\"?1?\"::CXDiagnostic)::CXSourceLocation
	```
	
	 Retrieve the source location of the given diagnostic.
	
	## Details
	
	 This location is where Clang would print the caret ('^') when displaying the diagnostic on the command line.
	
	## Reference
	
	[Index.h:998](./include/clang-c/Index.h:998:33)
	""" clang_getDiagnosticLocation
	export clang_getDiagnosticLocation
	𝐣𝐥.@cextern clang_getDiagnosticLocation(var"?1?"::CXDiagnostic)::CXSourceLocation
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnosticSpelling(var\"?1?\"::CXDiagnostic)::CXString
	```
	
	 Retrieve the text of the given diagnostic.
	
	## Reference
	
	[Index.h:1003](./include/clang-c/Index.h:1003:25)
	""" clang_getDiagnosticSpelling
	export clang_getDiagnosticSpelling
	𝐣𝐥.@cextern clang_getDiagnosticSpelling(var"?1?"::CXDiagnostic)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnosticOption(Diag::CXDiagnostic, Disable::𝐣𝐥.Ptr{CXString})::CXString
	```
	
	 Retrieve the name of the command-line option that enabled this diagnostic.
	
	## Parameters
	
	  * `Diag`: The diagnostic to be queried.
	  * `Disable`: If non-NULL, will be set to the option that disables this diagnostic (if any).
	
	## Returns
	
	 A string that contains the command-line option used to enable this warning, such as \"-Wconversion\" or \"-pedantic\". 
	
	## Reference
	
	[Index.h:1017](./include/clang-c/Index.h:1017:25)
	""" clang_getDiagnosticOption
	export clang_getDiagnosticOption
	𝐣𝐥.@cextern clang_getDiagnosticOption(Diag::CXDiagnostic, Disable::𝐣𝐥.Ptr{CXString})::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnosticCategory(var\"?1?\"::CXDiagnostic)::𝐣𝐥.Cuint
	```
	
	 Retrieve the category number for this diagnostic.
	
	## Details
	
	 Diagnostics can be categorized into groups along with other, related diagnostics (e.g., diagnostics under the same warning flag). This routine  retrieves the category number for the given diagnostic.
	
	## Returns
	
	 The number of the category that contains this diagnostic, or zero if this diagnostic is uncategorized.
	
	## Reference
	
	[Index.h:1030](./include/clang-c/Index.h:1030:25)
	""" clang_getDiagnosticCategory
	export clang_getDiagnosticCategory
	𝐣𝐥.@cextern clang_getDiagnosticCategory(var"?1?"::CXDiagnostic)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnosticCategoryName(Category::𝐣𝐥.Cuint)::CXString
	```
	
	 Retrieve the name of a particular diagnostic category.  This  is now deprecated.  Use clang_getDiagnosticCategoryText()  instead.
	
	## Parameters
	
	  * `Category`: A diagnostic category number, as returned by  `clang_getDiagnosticCategory().`
	
	## Returns
	
	 The name of the given diagnostic category.
	
	## Reference
	
	[Index.h:1043](./include/clang-c/Index.h:1043:10)
	""" clang_getDiagnosticCategoryName
	export clang_getDiagnosticCategoryName
	𝐣𝐥.@cextern clang_getDiagnosticCategoryName(Category::𝐣𝐥.Cuint)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnosticCategoryText(var\"?1?\"::CXDiagnostic)::CXString
	```
	
	 Retrieve the diagnostic category text for a given diagnostic.
	
	## Returns
	
	 The text of the given diagnostic category.
	
	## Reference
	
	[Index.h:1050](./include/clang-c/Index.h:1050:25)
	""" clang_getDiagnosticCategoryText
	export clang_getDiagnosticCategoryText
	𝐣𝐥.@cextern clang_getDiagnosticCategoryText(var"?1?"::CXDiagnostic)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnosticNumRanges(var\"?1?\"::CXDiagnostic)::𝐣𝐥.Cuint
	```
	
	 Determine the number of source ranges associated with the given diagnostic.
	
	## Reference
	
	[Index.h:1056](./include/clang-c/Index.h:1056:25)
	""" clang_getDiagnosticNumRanges
	export clang_getDiagnosticNumRanges
	𝐣𝐥.@cextern clang_getDiagnosticNumRanges(var"?1?"::CXDiagnostic)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnosticRange(Diagnostic::CXDiagnostic, Range::𝐣𝐥.Cuint)::CXSourceRange
	```
	
	 Retrieve a source range associated with the diagnostic.
	
	## Details
	
	 A diagnostic's source ranges highlight important elements in the source code. On the command line, Clang displays source ranges by underlining them with '~' characters.
	
	## Parameters
	
	  * `Diagnostic`: the diagnostic whose range is being extracted.
	  * `Range`: the zero-based index specifying which range to
	
	## Returns
	
	 the requested source range.
	
	## Reference
	
	[Index.h:1071](./include/clang-c/Index.h:1071:30)
	""" clang_getDiagnosticRange
	export clang_getDiagnosticRange
	𝐣𝐥.@cextern clang_getDiagnosticRange(Diagnostic::CXDiagnostic, Range::𝐣𝐥.Cuint)::CXSourceRange
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnosticNumFixIts(Diagnostic::CXDiagnostic)::𝐣𝐥.Cuint
	```
	
	 Determine the number of fix-it hints associated with the given diagnostic.
	
	## Reference
	
	[Index.h:1078](./include/clang-c/Index.h:1078:25)
	""" clang_getDiagnosticNumFixIts
	export clang_getDiagnosticNumFixIts
	𝐣𝐥.@cextern clang_getDiagnosticNumFixIts(Diagnostic::CXDiagnostic)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDiagnosticFixIt(Diagnostic::CXDiagnostic, FixIt::𝐣𝐥.Cuint, ReplacementRange::𝐣𝐥.Ptr{CXSourceRange})::CXString
	```
	
	 Retrieve the replacement information for a given fix-it.
	
	## Details
	
	 Fix-its are described in terms of a source range whose contents should be replaced by a string. This approach generalizes over three kinds of operations: removal of source code (the range covers the code to be removed and the replacement string is empty), replacement of source code (the range covers the code to be replaced and the replacement string provides the new code), and insertion (both the start and end of the range point at the insertion location, and the replacement string provides the text to insert).
	
	## Parameters
	
	  * `Diagnostic`: The diagnostic whose fix-its are being queried.
	  * `FixIt`: The zero-based index of the fix-it.
	  * `ReplacementRange`: The source range whose contents will be replaced with the returned replacement string. Note that source ranges are half-open ranges [a, b), so the source code should be replaced from a and up to (but not including) b.
	
	## Returns
	
	 A string containing text that should be replace the source code indicated by the `ReplacementRange.` 
	
	## Reference
	
	[Index.h:1105](./include/clang-c/Index.h:1105:25)
	""" clang_getDiagnosticFixIt
	export clang_getDiagnosticFixIt
	𝐣𝐥.@cextern clang_getDiagnosticFixIt(Diagnostic::CXDiagnostic, FixIt::𝐣𝐥.Cuint, ReplacementRange::𝐣𝐥.Ptr{CXSourceRange})::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTranslationUnitSpelling(CTUnit::CXTranslationUnit)::CXString
	```
	
	 Get the original translation unit source file name.
	
	## Reference
	
	[Index.h:1127](./include/clang-c/Index.h:1127:1)
	""" clang_getTranslationUnitSpelling
	export clang_getTranslationUnitSpelling
	𝐣𝐥.@cextern clang_getTranslationUnitSpelling(CTUnit::CXTranslationUnit)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_createTranslationUnitFromSourceFile(CIdx::CXIndex, source_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, num_clang_command_line_args::𝐣𝐥.Cint, clang_command_line_args::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})}, num_unsaved_files::𝐣𝐥.Cuint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile})::CXTranslationUnit
	```
	
	 Return the CXTranslationUnit for a given source file and the provided command line arguments one would pass to the compiler.
	
	## Details
	
	 Note: The 'source_filename' argument is optional.  If the caller provides a NULL pointer, the name of the source file is expected to reside in the specified command line arguments.
	
	 Note: When encountered in 'clang_command_line_args', the following options are ignored:
	
	   '-c'   '-emit-ast'   '-fsyntax-only'   '-o <output file>'  (both '-o' and '<output file>' are ignored)
	
	## Parameters
	
	  * `CIdx`: The index object with which the translation unit will be associated.
	  * `source_filename`: The name of the source file to load, or NULL if the source file is included in `clang_command_line_args.`
	  * `num_clang_command_line_args`: The number of command-line arguments in `clang_command_line_args.`
	  * `clang_command_line_args`: The command-line arguments that would be passed to the `clang` executable if it were being invoked out-of-process. These command-line options will be parsed and will affect how the translation unit is parsed. Note that the following options are ignored: '-c', '-emit-ast', '-fsyntax-only' (which is the default), and '-o <output file>'.
	  * `num_unsaved_files`: the number of unsaved file entries in `unsaved_files.`
	  * `unsaved_files`: the files that have not yet been saved to disk but may be required for code completion, including the contents of those files.  The contents and name of these files (as specified by CXUnsavedFile) are copied when necessary, so the client only needs to guarantee their validity until the call to this function returns.
	
	## Reference
	
	[Index.h:1169](./include/clang-c/Index.h:1169:34)
	""" clang_createTranslationUnitFromSourceFile
	export clang_createTranslationUnitFromSourceFile
	𝐣𝐥.@cextern clang_createTranslationUnitFromSourceFile(CIdx::CXIndex, source_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, num_clang_command_line_args::𝐣𝐥.Cint, clang_command_line_args::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})}, num_unsaved_files::𝐣𝐥.Cuint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile})::CXTranslationUnit
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_createTranslationUnit(CIdx::CXIndex, ast_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXTranslationUnit
	```
	
	 Same as `clang_createTranslationUnit2,` but returns the `CXTranslationUnit` instead of an error code.  In case of an error this routine returns a `NULL` `CXTranslationUnit,` without further detailed error codes.
	
	## Reference
	
	[Index.h:1183](./include/clang-c/Index.h:1183:34)
	""" clang_createTranslationUnit
	export clang_createTranslationUnit
	𝐣𝐥.@cextern clang_createTranslationUnit(CIdx::CXIndex, ast_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXTranslationUnit
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_createTranslationUnit2(CIdx::CXIndex, ast_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, out_TU::𝐣𝐥.Ptr{CXTranslationUnit})::𝐣𝐥.@cenum CXErrorCode
	```
	
	 Create a translation unit from an AST file (`-emit-ast).`
	
	## Parameters
	
	  * `out_TU`: A non-NULL pointer to store the created `CXTranslationUnit.`
	
	## Returns
	
	 Zero on success, otherwise returns an error code.
	
	## Reference
	
	[Index.h:1195](./include/clang-c/Index.h:1195:33)
	""" clang_createTranslationUnit2
	export clang_createTranslationUnit2
	𝐣𝐥.@cextern clang_createTranslationUnit2(CIdx::CXIndex, ast_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, out_TU::𝐣𝐥.Ptr{CXTranslationUnit})::𝐣𝐥.@cenum CXErrorCode
	
	𝐣𝐥.@doc """
	 Used to indicate that no special translation-unit options are needed.
	
	## Reference
	
	[Index.h:1212](./include/clang-c/Index.h:1212:3)
	""" CXTranslationUnit_None
	𝐣𝐥.@doc """
	 DEPRECATED: Enabled chained precompiled preambles in C++.
	
	## Details
	
	 Note: this is a *temporary* option that is available only while we are testing C++ precompiled preamble support. It is deprecated.
	
	## Reference
	
	[Index.h:1280](./include/clang-c/Index.h:1280:3)
	""" CXTranslationUnit_CXXChainedPCH
	𝐣𝐥.@doc """
	 Used to indicate that the parser should construct a \"detailed\" preprocessing record, including all macro definitions and instantiations.
	
	## Details
	
	 Constructing a detailed preprocessing record requires more memory and time to parse, since the information contained in the record is usually not retained. However, it can be useful for applications that require more detailed information about the behavior of the preprocessor.
	
	## Reference
	
	[Index.h:1224](./include/clang-c/Index.h:1224:3)
	""" CXTranslationUnit_DetailedPreprocessingRecord
	𝐣𝐥.@doc """
	 Flags that control the creation of translation units.
	
	## Details
	
	 The enumerators in this enumeration type are meant to be bitwise ORed together to specify which options should be used when constructing the translation unit.
	
	## Reference
	
	[Index.h:1207](./include/clang-c/Index.h:1207:6)
	""" CXTranslationUnit_Flags
	𝐣𝐥.@doc """
	 Sets the preprocessor in a mode for parsing a single file only.
	
	## Reference
	
	[Index.h:1320](./include/clang-c/Index.h:1320:3)
	""" CXTranslationUnit_SingleFileParse
	𝐣𝐥.@doc """
	 Used to indicate that brief documentation comments should be included into the set of code completions returned from this translation unit.
	
	## Reference
	
	[Index.h:1296](./include/clang-c/Index.h:1296:3)
	""" CXTranslationUnit_IncludeBriefCommentsInCodeCompletion
	𝐣𝐥.@doc """
	 Used to indicate that the translation unit should cache some code-completion results with each reparse of the source file.
	
	## Details
	
	 Caching of code-completion results is a performance optimization that introduces some overhead to reparsing but improves the performance of code-completion operations.
	
	## Reference
	
	[Index.h:1263](./include/clang-c/Index.h:1263:3)
	""" CXTranslationUnit_CacheCompletionResults
	𝐣𝐥.@doc """
	 Used to indicate that the translation unit will be serialized with `clang_saveTranslationUnit.`
	
	## Details
	
	 This option is typically used when parsing a header with the intent of producing a precompiled header.
	
	## Reference
	
	[Index.h:1272](./include/clang-c/Index.h:1272:3)
	""" CXTranslationUnit_ForSerialization
	𝐣𝐥.@doc """
	 Used to indicate that the translation unit should be built with an  implicit precompiled header for the preamble.
	
	## Details
	
	 An implicit precompiled header is used as an optimization when a particular translation unit is likely to be reparsed many times when the sources aren't changing that often. In this case, an implicit precompiled header will be built containing all of the initial includes at the top of the main file (what we refer to as the \"preamble\" of the file). In subsequent parses, if the preamble or the files in it have not changed, `clang_reparseTranslationUnit()` will re-use the implicit precompiled header to improve parsing performance.
	
	## Reference
	
	[Index.h:1253](./include/clang-c/Index.h:1253:3)
	""" CXTranslationUnit_PrecompiledPreamble
	𝐣𝐥.@doc """
	 Used to indicate that function/method bodies should be skipped while parsing.
	
	## Details
	
	 This option can be used to search for declarations/definitions while ignoring the usages.
	
	## Reference
	
	[Index.h:1289](./include/clang-c/Index.h:1289:3)
	""" CXTranslationUnit_SkipFunctionBodies
	𝐣𝐥.@doc """
	 Used to indicate that the translation unit is incomplete.
	
	## Details
	
	 When a translation unit is considered \"incomplete\", semantic analysis that is typically performed at the end of the translation unit will be suppressed. For example, this suppresses the completion of tentative declarations in C and of instantiation of implicitly-instantiation function templates in C++. This option is typically used when parsing a header with the intent of producing a precompiled header.
	
	## Reference
	
	[Index.h:1237](./include/clang-c/Index.h:1237:3)
	""" CXTranslationUnit_Incomplete
	𝐣𝐥.@doc """
	 Do not stop processing when fatal errors are encountered.
	
	## Details
	
	 When fatal errors are encountered while parsing a translation unit, semantic analysis is typically stopped early when compiling code. A common source for fatal errors are unresolvable include files. For the purposes of an IDE, this is undesirable behavior and as much information as possible should be reported. Use this flag to enable this behavior.
	
	## Reference
	
	[Index.h:1315](./include/clang-c/Index.h:1315:3)
	""" CXTranslationUnit_KeepGoing
	𝐣𝐥.@doc """
	 Used to indicate that the precompiled preamble should be created on the first parse. Otherwise it will be created on the first reparse. This trades runtime on the first parse (serializing the preamble takes time) for reduced runtime on the second parse (can now reuse the preamble).
	
	## Reference
	
	[Index.h:1304](./include/clang-c/Index.h:1304:3)
	""" CXTranslationUnit_CreatePreambleOnFirstParse
	export CXTranslationUnit_CXXChainedPCH, CXTranslationUnit_CacheCompletionResults, CXTranslationUnit_CreatePreambleOnFirstParse, CXTranslationUnit_DetailedPreprocessingRecord, CXTranslationUnit_Flags, CXTranslationUnit_ForSerialization, CXTranslationUnit_IncludeBriefCommentsInCodeCompletion, CXTranslationUnit_Incomplete, CXTranslationUnit_KeepGoing, CXTranslationUnit_None, CXTranslationUnit_PrecompiledPreamble, CXTranslationUnit_SingleFileParse, CXTranslationUnit_SkipFunctionBodies
	𝐣𝐥.@cenum CXTranslationUnit_Flags {
		CXTranslationUnit_None = 𝐣𝐥.Cuint(0)
		CXTranslationUnit_DetailedPreprocessingRecord = 𝐣𝐥.Cuint(1)
		CXTranslationUnit_Incomplete = 𝐣𝐥.Cuint(2)
		CXTranslationUnit_PrecompiledPreamble = 𝐣𝐥.Cuint(4)
		CXTranslationUnit_CacheCompletionResults = 𝐣𝐥.Cuint(8)
		CXTranslationUnit_ForSerialization = 𝐣𝐥.Cuint(16)
		CXTranslationUnit_CXXChainedPCH = 𝐣𝐥.Cuint(32)
		CXTranslationUnit_SkipFunctionBodies = 𝐣𝐥.Cuint(64)
		CXTranslationUnit_IncludeBriefCommentsInCodeCompletion = 𝐣𝐥.Cuint(128)
		CXTranslationUnit_CreatePreambleOnFirstParse = 𝐣𝐥.Cuint(256)
		CXTranslationUnit_KeepGoing = 𝐣𝐥.Cuint(512)
		CXTranslationUnit_SingleFileParse = 𝐣𝐥.Cuint(1024)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_defaultEditingTranslationUnitOptions()::𝐣𝐥.Cuint
	```
	
	 Returns the set of flags that is suitable for parsing a translation unit that is being edited.
	
	## Details
	
	 The set of flags returned provide options for `clang_parseTranslationUnit()` to indicate that the translation unit is likely to be reparsed many times, either explicitly (via `clang_reparseTranslationUnit())` or implicitly (e.g., by code completion (`clang_codeCompletionAt())).` The returned flag set contains an unspecified set of optimizations (e.g., the precompiled  preamble) geared toward improving the performance of these routines. The set of optimizations enabled may change from one version to the next.
	
	## Reference
	
	[Index.h:1335](./include/clang-c/Index.h:1335:25)
	""" clang_defaultEditingTranslationUnitOptions
	export clang_defaultEditingTranslationUnitOptions
	𝐣𝐥.@cextern clang_defaultEditingTranslationUnitOptions()::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_parseTranslationUnit(CIdx::CXIndex, source_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, command_line_args::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})}, num_command_line_args::𝐣𝐥.Cint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, num_unsaved_files::𝐣𝐥.Cuint, options::𝐣𝐥.Cuint)::CXTranslationUnit
	```
	
	 Same as `clang_parseTranslationUnit2,` but returns the `CXTranslationUnit` instead of an error code.  In case of an error this routine returns a `NULL` `CXTranslationUnit,` without further detailed error codes.
	
	## Reference
	
	[Index.h:1344](./include/clang-c/Index.h:1344:1)
	""" clang_parseTranslationUnit
	export clang_parseTranslationUnit
	𝐣𝐥.@cextern clang_parseTranslationUnit(CIdx::CXIndex, source_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, command_line_args::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})}, num_command_line_args::𝐣𝐥.Cint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, num_unsaved_files::𝐣𝐥.Cuint, options::𝐣𝐥.Cuint)::CXTranslationUnit
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_parseTranslationUnit2(CIdx::CXIndex, source_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, command_line_args::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})}, num_command_line_args::𝐣𝐥.Cint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, num_unsaved_files::𝐣𝐥.Cuint, options::𝐣𝐥.Cuint, out_TU::𝐣𝐥.Ptr{CXTranslationUnit})::𝐣𝐥.@cenum CXErrorCode
	```
	
	 Parse the given source file and the translation unit corresponding to that file.
	
	## Details
	
	 This routine is the main entry point for the Clang C API, providing the ability to parse a source file into a translation unit that can then be queried by other functions in the API. This routine accepts a set of command-line arguments so that the compilation can be configured in the same way that the compiler is configured on the command line.
	
	## Parameters
	
	  * `CIdx`: The index object with which the translation unit will be  associated.
	  * `source_filename`: The name of the source file to load, or NULL if the source file is included in `command_line_args.`
	  * `command_line_args`: The command-line arguments that would be passed to the `clang` executable if it were being invoked out-of-process. These command-line options will be parsed and will affect how the translation unit is parsed. Note that the following options are ignored: '-c',  '-emit-ast', '-fsyntax-only' (which is the default), and '-o <output file>'.
	  * `num_command_line_args`: The number of command-line arguments in `command_line_args.`
	  * `unsaved_files`: the files that have not yet been saved to disk but may be required for parsing, including the contents of those files.  The contents and name of these files (as specified by CXUnsavedFile) are copied when necessary, so the client only needs to guarantee their validity until the call to this function returns.
	  * `num_unsaved_files`: the number of unsaved file entries in `unsaved_files.`
	  * `options`: A bitmask of options that affects how the translation unit is managed but not its compilation. This should be a bitwise OR of the CXTranslationUnit_XXX flags.
	  * `out_TU`: A non-NULL pointer to store the created `CXTranslationUnit,` describing the parsed code and containing any diagnostics produced by the compiler.
	
	## Returns
	
	 Zero on success, otherwise returns an error code.
	
	## Reference
	
	[Index.h:1397](./include/clang-c/Index.h:1397:1)
	""" clang_parseTranslationUnit2
	export clang_parseTranslationUnit2
	𝐣𝐥.@cextern clang_parseTranslationUnit2(CIdx::CXIndex, source_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, command_line_args::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})}, num_command_line_args::𝐣𝐥.Cint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, num_unsaved_files::𝐣𝐥.Cuint, options::𝐣𝐥.Cuint, out_TU::𝐣𝐥.Ptr{CXTranslationUnit})::𝐣𝐥.@cenum CXErrorCode
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_parseTranslationUnit2FullArgv(CIdx::CXIndex, source_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, command_line_args::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})}, num_command_line_args::𝐣𝐥.Cint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, num_unsaved_files::𝐣𝐥.Cuint, options::𝐣𝐥.Cuint, out_TU::𝐣𝐥.Ptr{CXTranslationUnit})::𝐣𝐥.@cenum CXErrorCode
	```
	
	 Same as clang_parseTranslationUnit2 but requires a full command line for `command_line_args` including argv[0]. This is useful if the standard library paths are relative to the binary.
	
	## Reference
	
	[Index.h:1411](./include/clang-c/Index.h:1411:33)
	""" clang_parseTranslationUnit2FullArgv
	export clang_parseTranslationUnit2FullArgv
	𝐣𝐥.@cextern clang_parseTranslationUnit2FullArgv(CIdx::CXIndex, source_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, command_line_args::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})}, num_command_line_args::𝐣𝐥.Cint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, num_unsaved_files::𝐣𝐥.Cuint, options::𝐣𝐥.Cuint, out_TU::𝐣𝐥.Ptr{CXTranslationUnit})::𝐣𝐥.@cenum CXErrorCode
	
	𝐣𝐥.@doc """
	 Flags that control how translation units are saved.
	
	## Details
	
	 The enumerators in this enumeration type are meant to be bitwise ORed together to specify which options should be used when saving the translation unit.
	
	## Reference
	
	[Index.h:1424](./include/clang-c/Index.h:1424:6)
	""" CXSaveTranslationUnit_Flags
	𝐣𝐥.@doc """
	 Used to indicate that no special saving options are needed.
	
	## Reference
	
	[Index.h:1428](./include/clang-c/Index.h:1428:3)
	""" CXSaveTranslationUnit_None
	export CXSaveTranslationUnit_Flags, CXSaveTranslationUnit_None
	𝐣𝐥.@cenum CXSaveTranslationUnit_Flags {
		CXSaveTranslationUnit_None = 𝐣𝐥.Cuint(0)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_defaultSaveOptions(TU::CXTranslationUnit)::𝐣𝐥.Cuint
	```
	
	 Returns the set of flags that is suitable for saving a translation unit.
	
	## Details
	
	 The set of flags returned provide options for `clang_saveTranslationUnit()` by default. The returned flag set contains an unspecified set of options that save translation units with the most commonly-requested data.
	
	## Reference
	
	[Index.h:1440](./include/clang-c/Index.h:1440:25)
	""" clang_defaultSaveOptions
	export clang_defaultSaveOptions
	𝐣𝐥.@cextern clang_defaultSaveOptions(TU::CXTranslationUnit)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	 Indicates that no error occurred while saving a translation unit.
	
	## Reference
	
	[Index.h:1450](./include/clang-c/Index.h:1450:3)
	""" CXSaveError_None
	𝐣𝐥.@doc """
	 Indicates that errors during translation prevented this attempt to save the translation unit.
	
	## Details
	
	 Errors that prevent the translation unit from being saved can be extracted using `clang_getNumDiagnostics()` and `clang_getDiagnostic().`   
	
	## Reference
	
	[Index.h:1468](./include/clang-c/Index.h:1468:3)
	""" CXSaveError_TranslationErrors
	𝐣𝐥.@doc """
	 Indicates that the translation unit to be saved was somehow invalid (e.g., NULL).
	
	## Reference
	
	[Index.h:1474](./include/clang-c/Index.h:1474:3)
	""" CXSaveError_InvalidTU
	𝐣𝐥.@doc """
	 Indicates that an unknown error occurred while attempting to save the file.
	
	## Details
	
	 This error typically indicates that file I/O failed when attempting to  write the file.
	
	## Reference
	
	[Index.h:1459](./include/clang-c/Index.h:1459:3)
	""" CXSaveError_Unknown
	𝐣𝐥.@doc """
	 Describes the kind of error that occurred (if any) in a call to `clang_saveTranslationUnit().` 
	
	## Reference
	
	[Index.h:1446](./include/clang-c/Index.h:1446:6)
	""" CXSaveError
	export CXSaveError, CXSaveError_InvalidTU, CXSaveError_None, CXSaveError_TranslationErrors, CXSaveError_Unknown
	𝐣𝐥.@cenum CXSaveError {
		CXSaveError_None = 𝐣𝐥.Cuint(0)
		CXSaveError_Unknown = 𝐣𝐥.Cuint(1)
		CXSaveError_TranslationErrors = 𝐣𝐥.Cuint(2)
		CXSaveError_InvalidTU = 𝐣𝐥.Cuint(3)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_saveTranslationUnit(TU::CXTranslationUnit, FileName::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, options::𝐣𝐥.Cuint)::𝐣𝐥.Cint
	```
	
	 Saves a translation unit into a serialized representation of that translation unit on disk.
	
	## Details
	
	 Any translation unit that was parsed without error can be saved into a file. The translation unit can then be deserialized into a new `CXTranslationUnit` with `clang_createTranslationUnit()` or, if it is an incomplete translation unit that corresponds to a header, used as a precompiled header when parsing other translation units.
	
	## Parameters
	
	  * `TU`: The translation unit to save.
	  * `FileName`: The file to which the translation unit will be saved.
	  * `options`: A bitmask of options that affects how the translation unit is saved. This should be a bitwise OR of the CXSaveTranslationUnit_XXX flags.
	
	## Returns
	
	 A value that will match one of the enumerators of the CXSaveError enumeration. Zero (CXSaveError_None) indicates that the translation unit was  saved successfully, while a non-zero value indicates that a problem occurred.
	
	## Reference
	
	[Index.h:1500](./include/clang-c/Index.h:1500:20)
	""" clang_saveTranslationUnit
	export clang_saveTranslationUnit
	𝐣𝐥.@cextern clang_saveTranslationUnit(TU::CXTranslationUnit, FileName::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, options::𝐣𝐥.Cuint)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_suspendTranslationUnit(var\"?1?\"::CXTranslationUnit)::𝐣𝐥.Cuint
	```
	
	 Suspend a translation unit in order to free memory associated with it.
	
	## Details
	
	 A suspended translation unit uses significantly less memory but on the other side does not support any other calls than `clang_reparseTranslationUnit` to resume it or `clang_disposeTranslationUnit` to dispose it completely.
	
	## Reference
	
	[Index.h:1511](./include/clang-c/Index.h:1511:25)
	""" clang_suspendTranslationUnit
	export clang_suspendTranslationUnit
	𝐣𝐥.@cextern clang_suspendTranslationUnit(var"?1?"::CXTranslationUnit)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_disposeTranslationUnit(var\"?1?\"::CXTranslationUnit)::𝐣𝐥.Cvoid
	```
	
	 Destroy the specified CXTranslationUnit object.
	
	## Reference
	
	[Index.h:1516](./include/clang-c/Index.h:1516:21)
	""" clang_disposeTranslationUnit
	export clang_disposeTranslationUnit
	𝐣𝐥.@cextern clang_disposeTranslationUnit(var"?1?"::CXTranslationUnit)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	 Used to indicate that no special reparsing options are needed.
	
	## Reference
	
	[Index.h:1529](./include/clang-c/Index.h:1529:3)
	""" CXReparse_None
	𝐣𝐥.@doc """
	 Flags that control the reparsing of translation units.
	
	## Details
	
	 The enumerators in this enumeration type are meant to be bitwise ORed together to specify which options should be used when reparsing the translation unit.
	
	## Reference
	
	[Index.h:1525](./include/clang-c/Index.h:1525:6)
	""" CXReparse_Flags
	export CXReparse_Flags, CXReparse_None
	𝐣𝐥.@cenum CXReparse_Flags {
		CXReparse_None = 𝐣𝐥.Cuint(0)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_defaultReparseOptions(TU::CXTranslationUnit)::𝐣𝐥.Cuint
	```
	
	 Returns the set of flags that is suitable for reparsing a translation unit.
	
	## Details
	
	 The set of flags returned provide options for `clang_reparseTranslationUnit()` by default. The returned flag set contains an unspecified set of optimizations geared toward common uses of reparsing. The set of optimizations enabled may change from one version  to the next.
	
	## Reference
	
	[Index.h:1542](./include/clang-c/Index.h:1542:25)
	""" clang_defaultReparseOptions
	export clang_defaultReparseOptions
	𝐣𝐥.@cextern clang_defaultReparseOptions(TU::CXTranslationUnit)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_reparseTranslationUnit(TU::CXTranslationUnit, num_unsaved_files::𝐣𝐥.Cuint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, options::𝐣𝐥.Cuint)::𝐣𝐥.Cint
	```
	
	 Reparse the source files that produced this translation unit.
	
	## Details
	
	 This routine can be used to re-parse the source files that originally created the given translation unit, for example because those source files have changed (either on disk or as passed via `unsaved_files).` The source code will be reparsed with the same command-line options as it was originally parsed. 
	
	 Reparsing a translation unit invalidates all cursors and source locations that refer into that translation unit. This makes reparsing a translation unit semantically equivalent to destroying the translation unit and then creating a new translation unit with the same command-line arguments. However, it may be more efficient to reparse a translation  unit using this routine.
	
	## Parameters
	
	  * `TU`: The translation unit whose contents will be re-parsed. The translation unit must originally have been built with  `clang_createTranslationUnitFromSourceFile().`
	  * `num_unsaved_files`: The number of unsaved file entries in `unsaved_files.`
	  * `unsaved_files`: The files that have not yet been saved to disk but may be required for parsing, including the contents of those files.  The contents and name of these files (as specified by CXUnsavedFile) are copied when necessary, so the client only needs to guarantee their validity until the call to this function returns.
	  * `options`: A bitset of options composed of the flags in CXReparse_Flags. The function `clang_defaultReparseOptions()` produces a default set of options recommended for most uses, based on the translation unit.
	
	## Returns
	
	 0 if the sources could be reparsed.  A non-zero error code will be returned if reparsing was impossible, such that the translation unit is invalid. In such cases, the only valid call for `TU` is `clang_disposeTranslationUnit(TU).`  The error codes returned by this routine are described by the `CXErrorCode` enum.
	
	## Reference
	
	[Index.h:1583](./include/clang-c/Index.h:1583:20)
	""" clang_reparseTranslationUnit
	export clang_reparseTranslationUnit
	𝐣𝐥.@cextern clang_reparseTranslationUnit(TU::CXTranslationUnit, num_unsaved_files::𝐣𝐥.Cuint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, options::𝐣𝐥.Cuint)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1595](./include/clang-c/Index.h:1595:3)
	""" CXTUResourceUsage_GlobalCompletionResults
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1599](./include/clang-c/Index.h:1599:3)
	""" CXTUResourceUsage_SourceManager_Membuffer_MMap
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1606](./include/clang-c/Index.h:1606:3)
	""" CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1592](./include/clang-c/Index.h:1592:3)
	""" CXTUResourceUsage_AST
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1604](./include/clang-c/Index.h:1604:3)
	""" CXTUResourceUsage_SourceManager_DataStructures
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1611](./include/clang-c/Index.h:1611:3)
	""" CXTUResourceUsage_Last
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1603](./include/clang-c/Index.h:1603:3)
	""" CXTUResourceUsage_PreprocessingRecord
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1598](./include/clang-c/Index.h:1598:3)
	""" CXTUResourceUsage_SourceManager_Membuffer_Malloc
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1596](./include/clang-c/Index.h:1596:3)
	""" CXTUResourceUsage_SourceManagerContentCache
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1593](./include/clang-c/Index.h:1593:3)
	""" CXTUResourceUsage_Identifiers
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1597](./include/clang-c/Index.h:1597:3)
	""" CXTUResourceUsage_AST_SideTables
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1601](./include/clang-c/Index.h:1601:3)
	""" CXTUResourceUsage_ExternalASTSource_Membuffer_MMap
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1594](./include/clang-c/Index.h:1594:3)
	""" CXTUResourceUsage_Selectors
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1602](./include/clang-c/Index.h:1602:3)
	""" CXTUResourceUsage_Preprocessor
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1605](./include/clang-c/Index.h:1605:3)
	""" CXTUResourceUsage_Preprocessor_HeaderSearch
	𝐣𝐥.@doc """
	 Categorizes how memory is being used by a translation unit.
	
	## Reference
	
	[Index.h:1591](./include/clang-c/Index.h:1591:6)
	""" CXTUResourceUsageKind
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1607](./include/clang-c/Index.h:1607:3)
	""" CXTUResourceUsage_MEMORY_IN_BYTES_END
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1610](./include/clang-c/Index.h:1610:3)
	""" CXTUResourceUsage_First
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:1600](./include/clang-c/Index.h:1600:3)
	""" CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc
	export CXTUResourceUsageKind, CXTUResourceUsage_AST, CXTUResourceUsage_AST_SideTables, CXTUResourceUsage_ExternalASTSource_Membuffer_MMap, CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc, CXTUResourceUsage_First, CXTUResourceUsage_GlobalCompletionResults, CXTUResourceUsage_Identifiers, CXTUResourceUsage_Last, CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN, CXTUResourceUsage_MEMORY_IN_BYTES_END, CXTUResourceUsage_PreprocessingRecord, CXTUResourceUsage_Preprocessor, CXTUResourceUsage_Preprocessor_HeaderSearch, CXTUResourceUsage_Selectors, CXTUResourceUsage_SourceManagerContentCache, CXTUResourceUsage_SourceManager_DataStructures, CXTUResourceUsage_SourceManager_Membuffer_MMap, CXTUResourceUsage_SourceManager_Membuffer_Malloc
	𝐣𝐥.@cenum CXTUResourceUsageKind {
		CXTUResourceUsage_AST = 𝐣𝐥.Cuint(1)
		CXTUResourceUsage_Identifiers = 𝐣𝐥.Cuint(2)
		CXTUResourceUsage_Selectors = 𝐣𝐥.Cuint(3)
		CXTUResourceUsage_GlobalCompletionResults = 𝐣𝐥.Cuint(4)
		CXTUResourceUsage_SourceManagerContentCache = 𝐣𝐥.Cuint(5)
		CXTUResourceUsage_AST_SideTables = 𝐣𝐥.Cuint(6)
		CXTUResourceUsage_SourceManager_Membuffer_Malloc = 𝐣𝐥.Cuint(7)
		CXTUResourceUsage_SourceManager_Membuffer_MMap = 𝐣𝐥.Cuint(8)
		CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc = 𝐣𝐥.Cuint(9)
		CXTUResourceUsage_ExternalASTSource_Membuffer_MMap = 𝐣𝐥.Cuint(10)
		CXTUResourceUsage_Preprocessor = 𝐣𝐥.Cuint(11)
		CXTUResourceUsage_PreprocessingRecord = 𝐣𝐥.Cuint(12)
		CXTUResourceUsage_SourceManager_DataStructures = 𝐣𝐥.Cuint(13)
		CXTUResourceUsage_Preprocessor_HeaderSearch = 𝐣𝐥.Cuint(14)
		CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN = 𝐣𝐥.Cuint(1)
		CXTUResourceUsage_MEMORY_IN_BYTES_END = 𝐣𝐥.Cuint(14)
		CXTUResourceUsage_First = 𝐣𝐥.Cuint(1)
		CXTUResourceUsage_Last = 𝐣𝐥.Cuint(14)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTUResourceUsageName(kind::𝐣𝐥.@cenum CXTUResourceUsageKind)::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}
	```
	
	 Returns the human-readable null-terminated C string that represents  the name of the memory category.  This string should never be freed.
	
	## Reference
	
	[Index.h:1619](./include/clang-c/Index.h:1619:13)
	""" clang_getTUResourceUsageName
	export clang_getTUResourceUsageName
	𝐣𝐥.@cextern clang_getTUResourceUsageName(kind::𝐣𝐥.@cenum CXTUResourceUsageKind)::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}
	
	𝐣𝐥.@doc """
	## References
	
	[Index.h:1621](./include/clang-c/Index.h:1621:16)
	
	[Index.h:1627](./include/clang-c/Index.h:1627:3)
	""" CXTUResourceUsageEntry
	export CXTUResourceUsageEntry
	𝐣𝐥.@ctypedef CXTUResourceUsageEntry 𝐣𝐥.@cstruct CXTUResourceUsageEntry {
		kind::𝐣𝐥.@cenum CXTUResourceUsageKind
		amount::𝐣𝐥.Culong
	}
	
	𝐣𝐥.@doc """
	 The memory usage of a CXTranslationUnit, broken into categories.
	
	---
	
	 The memory usage of a CXTranslationUnit, broken into categories.
	
	## References
	
	[Index.h:1632](./include/clang-c/Index.h:1632:16)
	
	[Index.h:1643](./include/clang-c/Index.h:1643:3)
	""" CXTUResourceUsage
	export CXTUResourceUsage
	𝐣𝐥.@ctypedef CXTUResourceUsage 𝐣𝐥.@cstruct CXTUResourceUsage {
		data::𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
		numEntries::𝐣𝐥.Cuint
		entries::𝐣𝐥.Ptr{CXTUResourceUsageEntry}
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCXTUResourceUsage(TU::CXTranslationUnit)::CXTUResourceUsage
	```
	
	 Return the memory usage of a translation unit.  This object  should be released with clang_disposeCXTUResourceUsage().
	
	## Reference
	
	[Index.h:1649](./include/clang-c/Index.h:1649:34)
	""" clang_getCXTUResourceUsage
	export clang_getCXTUResourceUsage
	𝐣𝐥.@cextern clang_getCXTUResourceUsage(TU::CXTranslationUnit)::CXTUResourceUsage
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_disposeCXTUResourceUsage(usage::CXTUResourceUsage)::𝐣𝐥.Cvoid
	```
	
	## Reference
	
	[Index.h:1651](./include/clang-c/Index.h:1651:21)
	""" clang_disposeCXTUResourceUsage
	export clang_disposeCXTUResourceUsage
	𝐣𝐥.@cextern clang_disposeCXTUResourceUsage(usage::CXTUResourceUsage)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTranslationUnitTargetInfo(CTUnit::CXTranslationUnit)::CXTargetInfo
	```
	
	 Get target information for this translation unit.
	
	## Details
	
	 The CXTargetInfo object cannot outlive the CXTranslationUnit object.
	
	## Reference
	
	[Index.h:1659](./include/clang-c/Index.h:1659:1)
	""" clang_getTranslationUnitTargetInfo
	export clang_getTranslationUnitTargetInfo
	𝐣𝐥.@cextern clang_getTranslationUnitTargetInfo(CTUnit::CXTranslationUnit)::CXTargetInfo
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_TargetInfo_dispose(Info::CXTargetInfo)::𝐣𝐥.Cvoid
	```
	
	 Destroy the CXTargetInfo object.
	
	## Reference
	
	[Index.h:1665](./include/clang-c/Index.h:1665:1)
	""" clang_TargetInfo_dispose
	export clang_TargetInfo_dispose
	𝐣𝐥.@cextern clang_TargetInfo_dispose(Info::CXTargetInfo)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_TargetInfo_getTriple(Info::CXTargetInfo)::CXString
	```
	
	 Get the normalized target triple as a string.
	
	## Details
	
	 Returns the empty string in case of any error.
	
	## Reference
	
	[Index.h:1673](./include/clang-c/Index.h:1673:1)
	""" clang_TargetInfo_getTriple
	export clang_TargetInfo_getTriple
	𝐣𝐥.@cextern clang_TargetInfo_getTriple(Info::CXTargetInfo)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_TargetInfo_getPointerWidth(Info::CXTargetInfo)::𝐣𝐥.Cint
	```
	
	 Get the pointer width of the target in bits.
	
	## Details
	
	 Returns -1 in case of error.
	
	## Reference
	
	[Index.h:1681](./include/clang-c/Index.h:1681:1)
	""" clang_TargetInfo_getPointerWidth
	export clang_TargetInfo_getPointerWidth
	𝐣𝐥.@cextern clang_TargetInfo_getPointerWidth(Info::CXTargetInfo)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2530](./include/clang-c/Index.h:2530:3)
	""" CXCursor_PackedAttr
	𝐣𝐥.@doc """
	 OpenMP target teams distribute parallel for simd directive.
	
	## Reference
	
	[Index.h:2499](./include/clang-c/Index.h:2499:3)
	""" CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2524](./include/clang-c/Index.h:2524:3)
	""" CXCursor_IBOutletAttr
	𝐣𝐥.@doc """
	 An access specifier. 
	
	## Reference
	
	[Index.h:1788](./include/clang-c/Index.h:1788:3)
	""" CXCursor_ObjCProtocolRef
	𝐣𝐥.@doc """
	 OpenMP atomic directive.
	
	## Reference
	
	[Index.h:2383](./include/clang-c/Index.h:2383:3)
	""" CXCursor_OMPAtomicDirective
	𝐣𝐥.@doc """
	 An access specifier. 
	
	## Reference
	
	[Index.h:1783](./include/clang-c/Index.h:1783:3)
	""" CXCursor_LastDecl
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2551](./include/clang-c/Index.h:2551:3)
	""" CXCursor_LastPreprocessing
	𝐣𝐥.@doc """
	 OpenMP taskgroup directive.
	
	## Reference
	
	[Index.h:2403](./include/clang-c/Index.h:2403:3)
	""" CXCursor_OMPTaskgroupDirective
	𝐣𝐥.@doc """
	 A module import declaration.
	
	## Reference
	
	[Index.h:2558](./include/clang-c/Index.h:2558:3)
	""" CXCursor_TypeAliasTemplateDecl
	𝐣𝐥.@doc """
	 A C++ template template parameter. 
	
	## Reference
	
	[Index.h:1760](./include/clang-c/Index.h:1760:3)
	""" CXCursor_TemplateTemplateParameter
	𝐣𝐥.@doc """
	 Describes the kind of entity that a cursor refers to.
	
	## Reference
	
	[Index.h:1690](./include/clang-c/Index.h:1690:6)
	""" CXCursorKind
	𝐣𝐥.@doc """
	 A typedef. 
	
	## Reference
	
	[Index.h:1742](./include/clang-c/Index.h:1742:3)
	""" CXCursor_TypedefDecl
	𝐣𝐥.@doc """
	 C++'s const_cast<> expression.
	
	## Reference
	
	[Index.h:2027](./include/clang-c/Index.h:2027:3)
	""" CXCursor_CXXConstCastExpr
	𝐣𝐥.@doc """
	 OpenMP parallel directive.
	
	## Reference
	
	[Index.h:2315](./include/clang-c/Index.h:2315:3)
	""" CXCursor_OMPParallelDirective
	𝐣𝐥.@doc """
	 OpenMP flush directive.
	
	## Reference
	
	[Index.h:2371](./include/clang-c/Index.h:2371:3)
	""" CXCursor_OMPFlushDirective
	𝐣𝐥.@doc """
	 A floating point number literal.
	
	## Reference
	
	[Index.h:1934](./include/clang-c/Index.h:1934:3)
	""" CXCursor_FloatingLiteral
	𝐣𝐥.@doc """
	 A parenthesized expression, e.g. \"(1)\".
	
	## Details
	
	 This AST node is only formed if full location information is requested.
	
	## Reference
	
	[Index.h:1952](./include/clang-c/Index.h:1952:3)
	""" CXCursor_ParenExpr
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2549](./include/clang-c/Index.h:2549:3)
	""" CXCursor_InclusionDirective
	𝐣𝐥.@doc """
	 A reference to a namespace or namespace alias.
	
	## Reference
	
	[Index.h:1815](./include/clang-c/Index.h:1815:3)
	""" CXCursor_NamespaceRef
	𝐣𝐥.@doc """
	 OpenMP teams distribute simd directive.
	
	## Reference
	
	[Index.h:2475](./include/clang-c/Index.h:2475:3)
	""" CXCursor_OMPTeamsDistributeSimdDirective
	𝐣𝐥.@doc """
	 An access specifier. 
	
	## Reference
	
	[Index.h:1789](./include/clang-c/Index.h:1789:3)
	""" CXCursor_ObjCClassRef
	𝐣𝐥.@doc """
	 A reference to a variable that occurs in some non-expression  context, e.g., a C++ lambda capture list.
	
	## Reference
	
	[Index.h:1890](./include/clang-c/Index.h:1890:3)
	""" CXCursor_LastInvalid
	𝐣𝐥.@doc """
	 OpenMP for directive.
	
	## Reference
	
	[Index.h:2323](./include/clang-c/Index.h:2323:3)
	""" CXCursor_OMPForDirective
	𝐣𝐥.@doc """
	 A builtin binary operation expression such as \"x + y\" or \"x <= y\".
	
	## Reference
	
	[Index.h:1966](./include/clang-c/Index.h:1966:3)
	""" CXCursor_BinaryOperator
	𝐣𝐥.@doc """
	 OpenMP taskyield directive.
	
	## Reference
	
	[Index.h:2359](./include/clang-c/Index.h:2359:3)
	""" CXCursor_OMPTaskyieldDirective
	𝐣𝐥.@doc """
	 A character literal.
	
	## Reference
	
	[Index.h:1946](./include/clang-c/Index.h:1946:3)
	""" CXCursor_CharacterLiteral
	𝐣𝐥.@doc """
	 A reference to a variable that occurs in some non-expression  context, e.g., a C++ lambda capture list.
	
	## Reference
	
	[Index.h:1880](./include/clang-c/Index.h:1880:3)
	""" CXCursor_VariableRef
	𝐣𝐥.@doc """
	 OpenMP barrier directive.
	
	## Reference
	
	[Index.h:2363](./include/clang-c/Index.h:2363:3)
	""" CXCursor_OMPBarrierDirective
	𝐣𝐥.@doc """
	 An expression that refers to some value declaration, such as a function, variable, or enumerator.
	
	## Reference
	
	[Index.h:1910](./include/clang-c/Index.h:1910:3)
	""" CXCursor_DeclRefExpr
	𝐣𝐥.@doc """
	 C++'s try statement.
	
	## Reference
	
	[Index.h:2280](./include/clang-c/Index.h:2280:3)
	""" CXCursor_CXXTryStmt
	𝐣𝐥.@doc """
	 A new expression for memory allocation and constructor calls, e.g: \"new CXXNewExpr(foo)\".
	
	## Reference
	
	[Index.h:2065](./include/clang-c/Index.h:2065:3)
	""" CXCursor_CXXNewExpr
	𝐣𝐥.@doc """
	 An integer literal.
	
	## Reference
	
	[Index.h:1930](./include/clang-c/Index.h:1930:3)
	""" CXCursor_IntegerLiteral
	𝐣𝐥.@doc """
	 A reference to a variable that occurs in some non-expression  context, e.g., a C++ lambda capture list.
	
	## Reference
	
	[Index.h:1887](./include/clang-c/Index.h:1887:3)
	""" CXCursor_NoDeclFound
	𝐣𝐥.@doc """
	 An Objective-C @selector expression.
	
	## Reference
	
	[Index.h:2086](./include/clang-c/Index.h:2086:3)
	""" CXCursor_ObjCSelectorExpr
	𝐣𝐥.@doc """
	 This is the GNU Statement Expression extension: ({int X=4; X;})
	
	## Reference
	
	[Index.h:1997](./include/clang-c/Index.h:1997:3)
	""" CXCursor_StmtExpr
	𝐣𝐥.@doc """
	 An Objective-C @protocol expression.
	
	## Reference
	
	[Index.h:2090](./include/clang-c/Index.h:2090:3)
	""" CXCursor_ObjCProtocolExpr
	𝐣𝐥.@doc """
	 Represents an nothing(...) check.
	
	## Reference
	
	[Index.h:2161](./include/clang-c/Index.h:2161:3)
	""" CXCursor_FirstStmt
	𝐣𝐥.@doc """
	 C++'s dynamic_cast<> expression.
	
	## Reference
	
	[Index.h:2019](./include/clang-c/Index.h:2019:3)
	""" CXCursor_CXXDynamicCastExpr
	𝐣𝐥.@doc """
	 [C++ 15] C++ Throw Expression.
	
	## Details
	
	 This handles 'throw' and 'throw' assignment-expression. When assignment-expression isn't present, Op will be null.
	
	## Reference
	
	[Index.h:2060](./include/clang-c/Index.h:2060:3)
	""" CXCursor_CXXThrowExpr
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2542](./include/clang-c/Index.h:2542:3)
	""" CXCursor_LastAttr
	𝐣𝐥.@doc """
	 An Objective-C instance method. 
	
	## Reference
	
	[Index.h:1734](./include/clang-c/Index.h:1734:3)
	""" CXCursor_ObjCInstanceMethodDecl
	𝐣𝐥.@doc """
	 A default statement.
	
	## Reference
	
	[Index.h:2199](./include/clang-c/Index.h:2199:3)
	""" CXCursor_DefaultStmt
	𝐣𝐥.@doc """
	 A C++ conversion function. 
	
	## Reference
	
	[Index.h:1754](./include/clang-c/Index.h:1754:3)
	""" CXCursor_ConversionFunction
	𝐣𝐥.@doc """
	 A variable. 
	
	## Reference
	
	[Index.h:1720](./include/clang-c/Index.h:1720:3)
	""" CXCursor_VarDecl
	𝐣𝐥.@doc """
	 [C++ 2.13.5] C++ Boolean Literal.
	
	## Reference
	
	[Index.h:2045](./include/clang-c/Index.h:2045:3)
	""" CXCursor_CXXBoolLiteralExpr
	𝐣𝐥.@doc """
	 A continue statement.
	
	## Reference
	
	[Index.h:2231](./include/clang-c/Index.h:2231:3)
	""" CXCursor_ContinueStmt
	𝐣𝐥.@doc """
	 OpenMP parallel sections directive.
	
	## Reference
	
	[Index.h:2343](./include/clang-c/Index.h:2343:3)
	""" CXCursor_OMPParallelSectionsDirective
	𝐣𝐥.@doc """
	 Objective-C's @synchronized statement.
	
	## Reference
	
	[Index.h:2264](./include/clang-c/Index.h:2264:3)
	""" CXCursor_ObjCAtSynchronizedStmt
	𝐣𝐥.@doc """
	 An Objective-C @interface. 
	
	## Reference
	
	[Index.h:1724](./include/clang-c/Index.h:1724:3)
	""" CXCursor_ObjCInterfaceDecl
	𝐣𝐥.@doc """
	 A C++ using declaration. 
	
	## Reference
	
	[Index.h:1772](./include/clang-c/Index.h:1772:3)
	""" CXCursor_UsingDeclaration
	𝐣𝐥.@doc """
	 A C++ class template. 
	
	## Reference
	
	[Index.h:1764](./include/clang-c/Index.h:1764:3)
	""" CXCursor_ClassTemplate
	𝐣𝐥.@doc """
	 Objective-C's @catch statement.
	
	## Reference
	
	[Index.h:2252](./include/clang-c/Index.h:2252:3)
	""" CXCursor_ObjCAtCatchStmt
	𝐣𝐥.@doc """
	 Represents an explicit C++ type conversion that uses \"functional\" notion (C++ [expr.type.conv]).
	
	## Details
	
	 Example: 
	
	```
	   x = int(0.5);
	```
	
	## Reference
	
	[Index.h:2037](./include/clang-c/Index.h:2037:3)
	""" CXCursor_CXXFunctionalCastExpr
	𝐣𝐥.@doc """
	 C++'s catch statement.
	
	## Reference
	
	[Index.h:2276](./include/clang-c/Index.h:2276:3)
	""" CXCursor_CXXCatchStmt
	𝐣𝐥.@doc """
	 OpenMP target parallel directive.
	
	## Reference
	
	[Index.h:2439](./include/clang-c/Index.h:2439:3)
	""" CXCursor_OMPTargetParallelDirective
	𝐣𝐥.@doc """
	 An enumerator constant. 
	
	## Reference
	
	[Index.h:1716](./include/clang-c/Index.h:1716:3)
	""" CXCursor_EnumConstantDecl
	𝐣𝐥.@doc """
	 A C++ function template. 
	
	## Reference
	
	[Index.h:1762](./include/clang-c/Index.h:1762:3)
	""" CXCursor_FunctionTemplate
	𝐣𝐥.@doc """
	 Windows Structured Exception Handling's except statement.
	
	## Reference
	
	[Index.h:2292](./include/clang-c/Index.h:2292:3)
	""" CXCursor_SEHExceptStmt
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2533](./include/clang-c/Index.h:2533:3)
	""" CXCursor_NoDuplicateAttr
	𝐣𝐥.@doc """
	 An Objective-C string literal i.e. \"foo\".
	
	## Reference
	
	[Index.h:2078](./include/clang-c/Index.h:2078:3)
	""" CXCursor_ObjCStringLiteral
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2523](./include/clang-c/Index.h:2523:3)
	""" CXCursor_IBActionAttr
	𝐣𝐥.@doc """
	 A labelled statement in a function. 
	
	## Details
	
	 This cursor kind is used to describe the \"start_over:\" label statement in  the following example:
	
	```
	   start_over:
	     ++counter;
	```
	
	## Reference
	
	[Index.h:2184](./include/clang-c/Index.h:2184:3)
	""" CXCursor_LabelStmt
	𝐣𝐥.@doc """
	 A for statement.
	
	## Reference
	
	[Index.h:2219](./include/clang-c/Index.h:2219:3)
	""" CXCursor_ForStmt
	𝐣𝐥.@doc """
	 Represents the \"this\" expression in C++
	
	## Reference
	
	[Index.h:2053](./include/clang-c/Index.h:2053:3)
	""" CXCursor_CXXThisExpr
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:2140](./include/clang-c/Index.h:2140:3)
	""" CXCursor_LambdaExpr
	𝐣𝐥.@doc """
	 A string literal.
	
	## Reference
	
	[Index.h:1942](./include/clang-c/Index.h:1942:3)
	""" CXCursor_StringLiteral
	𝐣𝐥.@doc """
	 OpenMP target parallel for simd directive.
	
	## Reference
	
	[Index.h:2463](./include/clang-c/Index.h:2463:3)
	""" CXCursor_OMPTargetParallelForSimdDirective
	𝐣𝐥.@doc """
	 A goto statement.
	
	## Reference
	
	[Index.h:2223](./include/clang-c/Index.h:2223:3)
	""" CXCursor_GotoStmt
	𝐣𝐥.@doc """
	 A return statement.
	
	## Reference
	
	[Index.h:2239](./include/clang-c/Index.h:2239:3)
	""" CXCursor_ReturnStmt
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2548](./include/clang-c/Index.h:2548:3)
	""" CXCursor_MacroInstantiation
	𝐣𝐥.@doc """
	 Represents an nothing(...) check.
	
	## Reference
	
	[Index.h:2156](./include/clang-c/Index.h:2156:3)
	""" CXCursor_ObjCAvailabilityCheckExpr
	𝐣𝐥.@doc """
	 OpenMP target teams directive.
	
	## Reference
	
	[Index.h:2487](./include/clang-c/Index.h:2487:3)
	""" CXCursor_OMPTargetTeamsDirective
	𝐣𝐥.@doc """
	 An access specifier. 
	
	## Reference
	
	[Index.h:1786](./include/clang-c/Index.h:1786:3)
	""" CXCursor_FirstRef
	𝐣𝐥.@doc """
	 An expression that represents a block literal. 
	
	## Reference
	
	[Index.h:1926](./include/clang-c/Index.h:1926:3)
	""" CXCursor_BlockExpr
	𝐣𝐥.@doc """
	 An explicit cast in C (C99 6.5.4) or a C-style cast in C++ (C++ [expr.cast]), which uses the syntax (Type)expr.
	
	## Details
	
	 For example: (int)f.
	
	## Reference
	
	[Index.h:1981](./include/clang-c/Index.h:1981:3)
	""" CXCursor_CStyleCastExpr
	𝐣𝐥.@doc """
	 A module import declaration.
	
	## Reference
	
	[Index.h:2557](./include/clang-c/Index.h:2557:3)
	""" CXCursor_ModuleImportDecl
	𝐣𝐥.@doc """
	 A code completion overload candidate.
	
	## Reference
	
	[Index.h:2573](./include/clang-c/Index.h:2573:3)
	""" CXCursor_OverloadCandidate
	𝐣𝐥.@doc """
	 A C++ using directive. 
	
	## Reference
	
	[Index.h:1770](./include/clang-c/Index.h:1770:3)
	""" CXCursor_UsingDirective
	𝐣𝐥.@doc """
	 A reference to a type declaration.
	
	## Details
	
	 A type reference occurs anywhere where a type is named but not declared. For example, given:
	
	```
	 typedef unsigned size_type;
	 size_type size;
	```
	
	 The typedef is a declaration of size_type (CXCursor_TypedefDecl), while the type of the variable \"size\" is referenced. The cursor referenced by the type of size is the typedef for size_type.
	
	## Reference
	
	[Index.h:1805](./include/clang-c/Index.h:1805:3)
	""" CXCursor_TypeRef
	𝐣𝐥.@doc """
	 Adaptor class for mixing declarations with statements and expressions.
	
	## Reference
	
	[Index.h:2311](./include/clang-c/Index.h:2311:3)
	""" CXCursor_DeclStmt
	𝐣𝐥.@doc """
	 Represents the \"self\" expression in an Objective-C method.
	
	## Reference
	
	[Index.h:2148](./include/clang-c/Index.h:2148:3)
	""" CXCursor_ObjCSelfExpr
	𝐣𝐥.@doc """
	 An Objective-C @implementation for a category. 
	
	## Reference
	
	[Index.h:1740](./include/clang-c/Index.h:1740:3)
	""" CXCursor_ObjCCategoryImplDecl
	𝐣𝐥.@doc """
	 OpenMP target exit data directive.
	
	## Reference
	
	[Index.h:2435](./include/clang-c/Index.h:2435:3)
	""" CXCursor_OMPTargetExitDataDirective
	𝐣𝐥.@doc """
	 A GCC inline assembly statement extension.
	
	## Reference
	
	[Index.h:2244](./include/clang-c/Index.h:2244:3)
	""" CXCursor_AsmStmt
	𝐣𝐥.@doc """
	 An expression that sends a message to an Objective-C   object or class. 
	
	## Reference
	
	[Index.h:1923](./include/clang-c/Index.h:1923:3)
	""" CXCursor_ObjCMessageExpr
	𝐣𝐥.@doc """
	 An indirect goto statement.
	
	## Reference
	
	[Index.h:2227](./include/clang-c/Index.h:2227:3)
	""" CXCursor_IndirectGotoStmt
	𝐣𝐥.@doc """
	 OpenMP single directive.
	
	## Reference
	
	[Index.h:2335](./include/clang-c/Index.h:2335:3)
	""" CXCursor_OMPSingleDirective
	𝐣𝐥.@doc """
	 OpenMP parallel for directive.
	
	## Reference
	
	[Index.h:2339](./include/clang-c/Index.h:2339:3)
	""" CXCursor_OMPParallelForDirective
	𝐣𝐥.@doc """
	 Objective-C's @finally statement.
	
	## Reference
	
	[Index.h:2256](./include/clang-c/Index.h:2256:3)
	""" CXCursor_ObjCAtFinallyStmt
	𝐣𝐥.@doc """
	 OpenMP ordered directive.
	
	## Reference
	
	[Index.h:2379](./include/clang-c/Index.h:2379:3)
	""" CXCursor_OMPOrderedDirective
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2532](./include/clang-c/Index.h:2532:3)
	""" CXCursor_ConstAttr
	𝐣𝐥.@doc """
	 C++'s for (* : *) statement.
	
	## Reference
	
	[Index.h:2284](./include/clang-c/Index.h:2284:3)
	""" CXCursor_CXXForRangeStmt
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2541](./include/clang-c/Index.h:2541:3)
	""" CXCursor_DLLImport
	𝐣𝐥.@doc """
	 A linkage specification, e.g. 'extern \"C\"'. 
	
	## Reference
	
	[Index.h:1748](./include/clang-c/Index.h:1748:3)
	""" CXCursor_LinkageSpec
	𝐣𝐥.@doc """
	 OpenMP distribute simd directive.
	
	## Reference
	
	[Index.h:2459](./include/clang-c/Index.h:2459:3)
	""" CXCursor_OMPDistributeSimdDirective
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2536](./include/clang-c/Index.h:2536:3)
	""" CXCursor_CUDAGlobalAttr
	𝐣𝐥.@doc """
	 A C++ typeid expression (C++ [expr.typeid]).
	
	## Reference
	
	[Index.h:2041](./include/clang-c/Index.h:2041:3)
	""" CXCursor_CXXTypeidExpr
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2538](./include/clang-c/Index.h:2538:3)
	""" CXCursor_CUDASharedAttr
	𝐣𝐥.@doc """
	 A unary expression. (noexcept, sizeof, or other traits)
	
	## Reference
	
	[Index.h:2074](./include/clang-c/Index.h:2074:3)
	""" CXCursor_UnaryExpr
	𝐣𝐥.@doc """
	 Cursor that represents the translation unit itself.
	
	## Details
	
	 The translation unit cursor exists primarily to act as the root cursor for traversing the contents of a translation unit.
	
	## Reference
	
	[Index.h:2516](./include/clang-c/Index.h:2516:3)
	""" CXCursor_FirstAttr
	𝐣𝐥.@doc """
	 Represents a C11 generic selection.
	
	## Reference
	
	[Index.h:2001](./include/clang-c/Index.h:2001:3)
	""" CXCursor_GenericSelectionExpr
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2526](./include/clang-c/Index.h:2526:3)
	""" CXCursor_CXXFinalAttr
	𝐣𝐥.@doc """
	 An Objective-C @synthesize definition. 
	
	## Reference
	
	[Index.h:1776](./include/clang-c/Index.h:1776:3)
	""" CXCursor_ObjCSynthesizeDecl
	𝐣𝐥.@doc """
	 OpenMP distribute directive.
	
	## Reference
	
	[Index.h:2427](./include/clang-c/Index.h:2427:3)
	""" CXCursor_OMPDistributeDirective
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2539](./include/clang-c/Index.h:2539:3)
	""" CXCursor_VisibilityAttr
	𝐣𝐥.@doc """
	 An enumeration. 
	
	## Reference
	
	[Index.h:1709](./include/clang-c/Index.h:1709:3)
	""" CXCursor_EnumDecl
	𝐣𝐥.@doc """
	 The GNU address of label extension, representing &&label.
	
	## Reference
	
	[Index.h:1993](./include/clang-c/Index.h:1993:3)
	""" CXCursor_AddrLabelExpr
	𝐣𝐥.@doc """
	 An expression that refers to a member of a struct, union, class, Objective-C class, etc.
	
	## Reference
	
	[Index.h:1916](./include/clang-c/Index.h:1916:3)
	""" CXCursor_MemberRefExpr
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2528](./include/clang-c/Index.h:2528:3)
	""" CXCursor_AnnotateAttr
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2540](./include/clang-c/Index.h:2540:3)
	""" CXCursor_DLLExport
	𝐣𝐥.@doc """
	 A declaration whose specific kind is not exposed via this interface.
	
	## Details
	
	 Unexposed declarations have the same operations as any other kind of declaration; one can extract their location information, spelling, find their definitions, etc. However, the specific kind of the declaration is not reported.
	
	## Reference
	
	[Index.h:1701](./include/clang-c/Index.h:1701:3)
	""" CXCursor_UnexposedDecl
	𝐣𝐥.@doc """
	 [C99 6.5.2.1] Array Subscripting.
	
	## Reference
	
	[Index.h:1961](./include/clang-c/Index.h:1961:3)
	""" CXCursor_ArraySubscriptExpr
	𝐣𝐥.@doc """
	 Objective-C's collection statement.
	
	## Reference
	
	[Index.h:2272](./include/clang-c/Index.h:2272:3)
	""" CXCursor_ObjCForCollectionStmt
	𝐣𝐥.@doc """
	 OpenMP target simd directive.
	
	## Reference
	
	[Index.h:2467](./include/clang-c/Index.h:2467:3)
	""" CXCursor_OMPTargetSimdDirective
	𝐣𝐥.@doc """
	 An access specifier. 
	
	## Reference
	
	[Index.h:1780](./include/clang-c/Index.h:1780:3)
	""" CXCursor_CXXAccessSpecifier
	𝐣𝐥.@doc """
	 A statement whose specific kind is not exposed via this interface.
	
	## Details
	
	 Unexposed statements have the same operations as any other kind of statement; one can extract their location information, spelling, children, etc. However, the specific kind of the statement is not reported.
	
	## Reference
	
	[Index.h:2171](./include/clang-c/Index.h:2171:3)
	""" CXCursor_UnexposedStmt
	𝐣𝐥.@doc """
	 An Objective-C class method. 
	
	## Reference
	
	[Index.h:1736](./include/clang-c/Index.h:1736:3)
	""" CXCursor_ObjCClassMethodDecl
	𝐣𝐥.@doc """
	 Compound assignment such as \"+=\".
	
	## Reference
	
	[Index.h:1970](./include/clang-c/Index.h:1970:3)
	""" CXCursor_CompoundAssignOperator
	𝐣𝐥.@doc """
	 This represents the unary-expression's (except sizeof and alignof).
	
	## Reference
	
	[Index.h:1957](./include/clang-c/Index.h:1957:3)
	""" CXCursor_UnaryOperator
	𝐣𝐥.@doc """
	 OpenMP target data directive.
	
	## Reference
	
	[Index.h:2415](./include/clang-c/Index.h:2415:3)
	""" CXCursor_OMPTargetDataDirective
	𝐣𝐥.@doc """
	 OpenMP teams distribute parallel for directive.
	
	## Reference
	
	[Index.h:2483](./include/clang-c/Index.h:2483:3)
	""" CXCursor_OMPTeamsDistributeParallelForDirective
	𝐣𝐥.@doc """
	 Describes an C or C++ initializer list.
	
	## Reference
	
	[Index.h:1989](./include/clang-c/Index.h:1989:3)
	""" CXCursor_InitListExpr
	𝐣𝐥.@doc """
	 An Objective-C \"bridged\" cast expression, which casts between Objective-C pointers and C pointers, transferring ownership in the process.
	
	## Details
	
	```
	   NSString *str = (__bridge_transfer NSString *)CFCreateString();
	```
	
	## Reference
	
	[Index.h:2099](./include/clang-c/Index.h:2099:3)
	""" CXCursor_ObjCBridgedCastExpr
	𝐣𝐥.@doc """
	 An Objective-C instance variable. 
	
	## Reference
	
	[Index.h:1732](./include/clang-c/Index.h:1732:3)
	""" CXCursor_ObjCIvarDecl
	𝐣𝐥.@doc """
	 Windows Structured Exception Handling's try statement.
	
	## Reference
	
	[Index.h:2288](./include/clang-c/Index.h:2288:3)
	""" CXCursor_SEHTryStmt
	𝐣𝐥.@doc """
	 An Objective-C @implementation. 
	
	## Reference
	
	[Index.h:1738](./include/clang-c/Index.h:1738:3)
	""" CXCursor_ObjCImplementationDecl
	𝐣𝐥.@doc """
	 A break statement.
	
	## Reference
	
	[Index.h:2235](./include/clang-c/Index.h:2235:3)
	""" CXCursor_BreakStmt
	𝐣𝐥.@doc """
	 OpenMP SIMD directive.
	
	## Reference
	
	[Index.h:2319](./include/clang-c/Index.h:2319:3)
	""" CXCursor_OMPSimdDirective
	𝐣𝐥.@doc """
	 OpenMP taskloop simd directive.
	
	## Reference
	
	[Index.h:2423](./include/clang-c/Index.h:2423:3)
	""" CXCursor_OMPTaskLoopSimdDirective
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2527](./include/clang-c/Index.h:2527:3)
	""" CXCursor_CXXOverrideAttr
	𝐣𝐥.@doc """
	 An expression that calls a function. 
	
	## Reference
	
	[Index.h:1919](./include/clang-c/Index.h:1919:3)
	""" CXCursor_CallExpr
	𝐣𝐥.@doc """
	 An access specifier. 
	
	## Reference
	
	[Index.h:1782](./include/clang-c/Index.h:1782:3)
	""" CXCursor_FirstDecl
	𝐣𝐥.@doc """
	 A C++ template type parameter. 
	
	## Reference
	
	[Index.h:1756](./include/clang-c/Index.h:1756:3)
	""" CXCursor_TemplateTypeParameter
	𝐣𝐥.@doc """
	 A reference to a variable that occurs in some non-expression  context, e.g., a C++ lambda capture list.
	
	## Reference
	
	[Index.h:1893](./include/clang-c/Index.h:1893:3)
	""" CXCursor_FirstExpr
	𝐣𝐥.@doc """
	 OpenMP sections directive.
	
	## Reference
	
	[Index.h:2327](./include/clang-c/Index.h:2327:3)
	""" CXCursor_OMPSectionsDirective
	𝐣𝐥.@doc """
	 A C++ namespace alias declaration. 
	
	## Reference
	
	[Index.h:1768](./include/clang-c/Index.h:1768:3)
	""" CXCursor_NamespaceAlias
	𝐣𝐥.@doc """
	 A reference to a variable that occurs in some non-expression  context, e.g., a C++ lambda capture list.
	
	## Reference
	
	[Index.h:1882](./include/clang-c/Index.h:1882:3)
	""" CXCursor_LastRef
	𝐣𝐥.@doc """
	 OpenMP for SIMD directive.
	
	## Reference
	
	[Index.h:2387](./include/clang-c/Index.h:2387:3)
	""" CXCursor_OMPForSimdDirective
	𝐣𝐥.@doc """
	 A C++ destructor. 
	
	## Reference
	
	[Index.h:1752](./include/clang-c/Index.h:1752:3)
	""" CXCursor_Destructor
	𝐣𝐥.@doc """
	 A reference to a variable that occurs in some non-expression  context, e.g., a C++ lambda capture list.
	
	## Reference
	
	[Index.h:1889](./include/clang-c/Index.h:1889:3)
	""" CXCursor_InvalidCode
	𝐣𝐥.@doc """
	 OpenMP critical directive.
	
	## Reference
	
	[Index.h:2355](./include/clang-c/Index.h:2355:3)
	""" CXCursor_OMPCriticalDirective
	𝐣𝐥.@doc """
	 OpenMP target teams distribute directive.
	
	## Reference
	
	[Index.h:2491](./include/clang-c/Index.h:2491:3)
	""" CXCursor_OMPTargetTeamsDistributeDirective
	𝐣𝐥.@doc """
	 Cursor that represents the translation unit itself.
	
	## Details
	
	 The translation unit cursor exists primarily to act as the root cursor for traversing the contents of a translation unit.
	
	## Reference
	
	[Index.h:2513](./include/clang-c/Index.h:2513:3)
	""" CXCursor_TranslationUnit
	𝐣𝐥.@doc """
	 C++'s reinterpret_cast<> expression.
	
	## Reference
	
	[Index.h:2023](./include/clang-c/Index.h:2023:3)
	""" CXCursor_CXXReinterpretCastExpr
	𝐣𝐥.@doc """
	 A function or method parameter. 
	
	## Reference
	
	[Index.h:1722](./include/clang-c/Index.h:1722:3)
	""" CXCursor_ParmDecl
	𝐣𝐥.@doc """
	 Windows Structured Exception Handling's leave statement.
	
	## Reference
	
	[Index.h:2375](./include/clang-c/Index.h:2375:3)
	""" CXCursor_SEHLeaveStmt
	𝐣𝐥.@doc """
	 OpenMP cancellation point directive.
	
	## Reference
	
	[Index.h:2407](./include/clang-c/Index.h:2407:3)
	""" CXCursor_OMPCancellationPointDirective
	𝐣𝐥.@doc """
	 A case statement.
	
	## Reference
	
	[Index.h:2195](./include/clang-c/Index.h:2195:3)
	""" CXCursor_CaseStmt
	𝐣𝐥.@doc """
	 OpenMP teams directive.
	
	## Reference
	
	[Index.h:2399](./include/clang-c/Index.h:2399:3)
	""" CXCursor_OMPTeamsDirective
	𝐣𝐥.@doc """
	 Implements the GNU __null extension, which is a name for a null pointer constant that has integral type (e.g., int or long) and is the same size and alignment as a pointer.
	
	## Details
	
	 The __null extension is typically only used by system headers, which define NULL as __null in C++ rather than using 0 (which is an integer that may not match the size of a pointer).
	
	## Reference
	
	[Index.h:2011](./include/clang-c/Index.h:2011:3)
	""" CXCursor_GNUNullExpr
	𝐣𝐥.@doc """
	 OpenMP teams distribute directive.
	
	## Reference
	
	[Index.h:2471](./include/clang-c/Index.h:2471:3)
	""" CXCursor_OMPTeamsDistributeDirective
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2529](./include/clang-c/Index.h:2529:3)
	""" CXCursor_AsmLabelAttr
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2545](./include/clang-c/Index.h:2545:3)
	""" CXCursor_PreprocessingDirective
	𝐣𝐥.@doc """
	 An imaginary number literal.
	
	## Reference
	
	[Index.h:1938](./include/clang-c/Index.h:1938:3)
	""" CXCursor_ImaginaryLiteral
	𝐣𝐥.@doc """
	 OpenMP target update directive.
	
	## Reference
	
	[Index.h:2447](./include/clang-c/Index.h:2447:3)
	""" CXCursor_OMPTargetUpdateDirective
	𝐣𝐥.@doc """
	 A field (in C) or non-static data member (in C++) in a struct, union, or C++ class.
	
	## Reference
	
	[Index.h:1714](./include/clang-c/Index.h:1714:3)
	""" CXCursor_FieldDecl
	𝐣𝐥.@doc """
	 A function. 
	
	## Reference
	
	[Index.h:1718](./include/clang-c/Index.h:1718:3)
	""" CXCursor_FunctionDecl
	𝐣𝐥.@doc """
	 OpenMP taskwait directive.
	
	## Reference
	
	[Index.h:2367](./include/clang-c/Index.h:2367:3)
	""" CXCursor_OMPTaskwaitDirective
	𝐣𝐥.@doc """
	 A delete expression for memory deallocation and destructor calls, e.g. \"delete[] pArray\".
	
	## Reference
	
	[Index.h:2070](./include/clang-c/Index.h:2070:3)
	""" CXCursor_CXXDeleteExpr
	𝐣𝐥.@doc """
	 A C++ constructor. 
	
	## Reference
	
	[Index.h:1750](./include/clang-c/Index.h:1750:3)
	""" CXCursor_Constructor
	𝐣𝐥.@doc """
	 [C++0x 2.14.7] C++ Pointer Literal.
	
	## Reference
	
	[Index.h:2049](./include/clang-c/Index.h:2049:3)
	""" CXCursor_CXXNullPtrLiteralExpr
	𝐣𝐥.@doc """
	 Represents an nothing(...) check.
	
	## Reference
	
	[Index.h:2158](./include/clang-c/Index.h:2158:3)
	""" CXCursor_LastExpr
	𝐣𝐥.@doc """
	 A switch statement.
	
	## Reference
	
	[Index.h:2207](./include/clang-c/Index.h:2207:3)
	""" CXCursor_SwitchStmt
	𝐣𝐥.@doc """
	 An if statement
	
	## Reference
	
	[Index.h:2203](./include/clang-c/Index.h:2203:3)
	""" CXCursor_IfStmt
	𝐣𝐥.@doc """
	 OpenMP target teams distribute simd directive.
	
	## Reference
	
	[Index.h:2503](./include/clang-c/Index.h:2503:3)
	""" CXCursor_OMPTargetTeamsDistributeSimdDirective
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2525](./include/clang-c/Index.h:2525:3)
	""" CXCursor_IBOutletCollectionAttr
	𝐣𝐥.@doc """
	 An access specifier. 
	
	## Reference
	
	[Index.h:1787](./include/clang-c/Index.h:1787:3)
	""" CXCursor_ObjCSuperClassRef
	𝐣𝐥.@doc """
	 A do statement.
	
	## Reference
	
	[Index.h:2215](./include/clang-c/Index.h:2215:3)
	""" CXCursor_DoStmt
	𝐣𝐥.@doc """
	 OpenMP parallel for SIMD directive.
	
	## Reference
	
	[Index.h:2391](./include/clang-c/Index.h:2391:3)
	""" CXCursor_OMPParallelForSimdDirective
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2521](./include/clang-c/Index.h:2521:3)
	""" CXCursor_UnexposedAttr
	𝐣𝐥.@doc """
	 Represents an expression that computes the length of a parameter pack.
	
	## Details
	
	```
	 template<typename ...Types>
	 struct count {
	   static const unsigned value = sizeof...(Types);
	 };
	```
	
	## Reference
	
	[Index.h:2126](./include/clang-c/Index.h:2126:3)
	""" CXCursor_SizeOfPackExpr
	𝐣𝐥.@doc """
	 OpenMP target teams distribute parallel for directive.
	
	## Reference
	
	[Index.h:2495](./include/clang-c/Index.h:2495:3)
	""" CXCursor_OMPTargetTeamsDistributeParallelForDirective
	𝐣𝐥.@doc """
	 OpenMP 4.0 [2.4, Array Section].
	
	## Reference
	
	[Index.h:2152](./include/clang-c/Index.h:2152:3)
	""" CXCursor_OMPArraySectionExpr
	𝐣𝐥.@doc """
	 A GCC inline assembly statement extension.
	
	## Reference
	
	[Index.h:2243](./include/clang-c/Index.h:2243:3)
	""" CXCursor_GCCAsmStmt
	𝐣𝐥.@doc """
	 A MS inline assembly statement extension.
	
	## Reference
	
	[Index.h:2300](./include/clang-c/Index.h:2300:3)
	""" CXCursor_MSAsmStmt
	𝐣𝐥.@doc """
	 An Objective-C @property declaration. 
	
	## Reference
	
	[Index.h:1730](./include/clang-c/Index.h:1730:3)
	""" CXCursor_ObjCPropertyDecl
	𝐣𝐥.@doc """
	 A reference to a member of a struct, union, or class that occurs in  some non-expression context, e.g., a designated initializer.
	
	## Reference
	
	[Index.h:1820](./include/clang-c/Index.h:1820:3)
	""" CXCursor_MemberRef
	𝐣𝐥.@doc """
	 A C++ class template partial specialization. 
	
	## Reference
	
	[Index.h:1766](./include/clang-c/Index.h:1766:3)
	""" CXCursor_ClassTemplatePartialSpecialization
	𝐣𝐥.@doc """
	 OpenMP target enter data directive.
	
	## Reference
	
	[Index.h:2431](./include/clang-c/Index.h:2431:3)
	""" CXCursor_OMPTargetEnterDataDirective
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2537](./include/clang-c/Index.h:2537:3)
	""" CXCursor_CUDAHostAttr
	𝐣𝐥.@doc """
	 OpenMP target teams distribute simd directive.
	
	## Reference
	
	[Index.h:2505](./include/clang-c/Index.h:2505:3)
	""" CXCursor_LastStmt
	𝐣𝐥.@doc """
	 A C++ namespace. 
	
	## Reference
	
	[Index.h:1746](./include/clang-c/Index.h:1746:3)
	""" CXCursor_Namespace
	𝐣𝐥.@doc """
	 [C99 6.5.2.5]
	
	## Reference
	
	[Index.h:1985](./include/clang-c/Index.h:1985:3)
	""" CXCursor_CompoundLiteralExpr
	𝐣𝐥.@doc """
	 An Objective-C @interface for a category. 
	
	## Reference
	
	[Index.h:1726](./include/clang-c/Index.h:1726:3)
	""" CXCursor_ObjCCategoryDecl
	𝐣𝐥.@doc """
	 OpenMP teams distribute parallel for simd directive.
	
	## Reference
	
	[Index.h:2479](./include/clang-c/Index.h:2479:3)
	""" CXCursor_OMPTeamsDistributeParallelForSimdDirective
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2547](./include/clang-c/Index.h:2547:3)
	""" CXCursor_MacroExpansion
	𝐣𝐥.@doc """
	 The null statement \";\": C99 6.8.3p3.
	
	## Details
	
	 This cursor kind is used to describe the null statement.
	
	## Reference
	
	[Index.h:2306](./include/clang-c/Index.h:2306:3)
	""" CXCursor_NullStmt
	𝐣𝐥.@doc """
	 A reference to a type declaration.
	
	## Details
	
	 A type reference occurs anywhere where a type is named but not declared. For example, given:
	
	```
	 typedef unsigned size_type;
	 size_type size;
	```
	
	 The typedef is a declaration of size_type (CXCursor_TypedefDecl), while the type of the variable \"size\" is referenced. The cursor referenced by the type of size is the typedef for size_type.
	
	## Reference
	
	[Index.h:1806](./include/clang-c/Index.h:1806:3)
	""" CXCursor_CXXBaseSpecifier
	𝐣𝐥.@doc """
	 Objective-C's autorelease pool statement.
	
	## Reference
	
	[Index.h:2268](./include/clang-c/Index.h:2268:3)
	""" CXCursor_ObjCAutoreleasePoolStmt
	𝐣𝐥.@doc """
	 a friend declaration.
	
	## Reference
	
	[Index.h:2567](./include/clang-c/Index.h:2567:3)
	""" CXCursor_FirstExtraDecl
	𝐣𝐥.@doc """
	 A reference to a class template, function template, template template parameter, or class template partial specialization.
	
	## Reference
	
	[Index.h:1811](./include/clang-c/Index.h:1811:3)
	""" CXCursor_TemplateRef
	𝐣𝐥.@doc """
	 Objective-C's @throw statement.
	
	## Reference
	
	[Index.h:2260](./include/clang-c/Index.h:2260:3)
	""" CXCursor_ObjCAtThrowStmt
	𝐣𝐥.@doc """
	 OpenMP target directive.
	
	## Reference
	
	[Index.h:2395](./include/clang-c/Index.h:2395:3)
	""" CXCursor_OMPTargetDirective
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2546](./include/clang-c/Index.h:2546:3)
	""" CXCursor_MacroDefinition
	𝐣𝐥.@doc """
	 a friend declaration.
	
	## Reference
	
	[Index.h:2566](./include/clang-c/Index.h:2566:3)
	""" CXCursor_FriendDecl
	𝐣𝐥.@doc """
	 An Objective-C @dynamic definition. 
	
	## Reference
	
	[Index.h:1778](./include/clang-c/Index.h:1778:3)
	""" CXCursor_ObjCDynamicDecl
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2534](./include/clang-c/Index.h:2534:3)
	""" CXCursor_CUDAConstantAttr
	𝐣𝐥.@doc """
	 Represents a C++0x pack expansion that produces a sequence of expressions.
	
	## Details
	
	 A pack expansion expression contains a pattern (which itself is an expression) followed by an ellipsis. For example:
	
	```
	 template<typename F, typename ...Types>
	 void forward(F f, Types &&...args) {
	  f(static_cast<Types&&>(args)...);
	 }
	```
	
	## Reference
	
	[Index.h:2114](./include/clang-c/Index.h:2114:3)
	""" CXCursor_PackExpansionExpr
	𝐣𝐥.@doc """
	 An expression whose specific kind is not exposed via this interface.
	
	## Details
	
	 Unexposed expressions have the same operations as any other kind of expression; one can extract their location information, spelling, children, etc. However, the specific kind of the expression is not reported.
	
	## Reference
	
	[Index.h:1904](./include/clang-c/Index.h:1904:3)
	""" CXCursor_UnexposedExpr
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2531](./include/clang-c/Index.h:2531:3)
	""" CXCursor_PureAttr
	𝐣𝐥.@doc """
	 Windows Structured Exception Handling's finally statement.
	
	## Reference
	
	[Index.h:2296](./include/clang-c/Index.h:2296:3)
	""" CXCursor_SEHFinallyStmt
	𝐣𝐥.@doc """
	 A reference to a labeled statement.
	
	## Details
	
	 This cursor kind is used to describe the jump to \"start_over\" in the  goto statement in the following example:
	
	```
	   start_over:
	     ++counter;
	
	     goto start_over;
	```
	
	 A label reference cursor refers to a label statement.
	
	## Reference
	
	[Index.h:1836](./include/clang-c/Index.h:1836:3)
	""" CXCursor_LabelRef
	𝐣𝐥.@doc """
	 An Objective-C @encode expression.
	
	## Reference
	
	[Index.h:2082](./include/clang-c/Index.h:2082:3)
	""" CXCursor_ObjCEncodeExpr
	𝐣𝐥.@doc """
	 OpenMP taskloop directive.
	
	## Reference
	
	[Index.h:2419](./include/clang-c/Index.h:2419:3)
	""" CXCursor_OMPTaskLoopDirective
	𝐣𝐥.@doc """
	 A C++ class method. 
	
	## Reference
	
	[Index.h:1744](./include/clang-c/Index.h:1744:3)
	""" CXCursor_CXXMethod
	𝐣𝐥.@doc """
	 OpenMP master directive.
	
	## Reference
	
	[Index.h:2351](./include/clang-c/Index.h:2351:3)
	""" CXCursor_OMPMasterDirective
	𝐣𝐥.@doc """
	 A C++ class. 
	
	## Reference
	
	[Index.h:1707](./include/clang-c/Index.h:1707:3)
	""" CXCursor_ClassDecl
	𝐣𝐥.@doc """
	 OpenMP distribute parallel for simd directive.
	
	## Reference
	
	[Index.h:2455](./include/clang-c/Index.h:2455:3)
	""" CXCursor_OMPDistributeParallelForSimdDirective
	𝐣𝐥.@doc """
	 The ?: ternary operator.
	
	## Reference
	
	[Index.h:1974](./include/clang-c/Index.h:1974:3)
	""" CXCursor_ConditionalOperator
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2535](./include/clang-c/Index.h:2535:3)
	""" CXCursor_CUDADeviceAttr
	𝐣𝐥.@doc """
	 OpenMP cancel directive.
	
	## Reference
	
	[Index.h:2411](./include/clang-c/Index.h:2411:3)
	""" CXCursor_OMPCancelDirective
	𝐣𝐥.@doc """
	 OpenMP distribute parallel for directive.
	
	## Reference
	
	[Index.h:2451](./include/clang-c/Index.h:2451:3)
	""" CXCursor_OMPDistributeParallelForDirective
	𝐣𝐥.@doc """
	 A reference to a variable that occurs in some non-expression  context, e.g., a C++ lambda capture list.
	
	## Reference
	
	[Index.h:1886](./include/clang-c/Index.h:1886:3)
	""" CXCursor_InvalidFile
	𝐣𝐥.@doc """
	 A C or C++ struct. 
	
	## Reference
	
	[Index.h:1703](./include/clang-c/Index.h:1703:3)
	""" CXCursor_StructDecl
	𝐣𝐥.@doc """
	 A reference to a set of overloaded functions or function templates that has not yet been resolved to a specific function or function template.
	
	## Details
	
	 An overloaded declaration reference cursor occurs in C++ templates where a dependent name refers to a function. For example:
	
	```
	 template<typename T> void swap(T&, T&);
	
	 struct X { ... };
	 void swap(X&, X&);
	
	 template<typename T>
	 void reverse(T* first, T* last) {
	   while (first < last - 1) {
	     swap(*first, *--last);
	     ++first;
	   }
	 }
	
	 struct Y { };
	 void swap(Y&, Y&);
	```
	
	 Here, the identifier \"swap\" is associated with an overloaded declaration reference. In the template definition, \"swap\" refers to either of the two \"swap\" functions declared above, so both results will be available. At instantiation time, \"swap\" may also refer to other functions found via argument-dependent lookup (e.g., the \"swap\" function at the end of the example).
	
	 The functions `clang_getNumOverloadedDecls()` and  `clang_getOverloadedDecl()` can be used to retrieve the definitions referenced by this cursor.
	
	## Reference
	
	[Index.h:1874](./include/clang-c/Index.h:1874:3)
	""" CXCursor_OverloadedDeclRef
	𝐣𝐥.@doc """
	 An Objective-C @protocol declaration. 
	
	## Reference
	
	[Index.h:1728](./include/clang-c/Index.h:1728:3)
	""" CXCursor_ObjCProtocolDecl
	𝐣𝐥.@doc """
	 OpenMP target parallel for directive.
	
	## Reference
	
	[Index.h:2443](./include/clang-c/Index.h:2443:3)
	""" CXCursor_OMPTargetParallelForDirective
	𝐣𝐥.@doc """
	 OpenMP section directive.
	
	## Reference
	
	[Index.h:2331](./include/clang-c/Index.h:2331:3)
	""" CXCursor_OMPSectionDirective
	𝐣𝐥.@doc """
	 A static_assert or _Static_assert node
	
	## Reference
	
	[Index.h:2562](./include/clang-c/Index.h:2562:3)
	""" CXCursor_StaticAssert
	𝐣𝐥.@doc """
	 A reference to a variable that occurs in some non-expression  context, e.g., a C++ lambda capture list.
	
	## Reference
	
	[Index.h:1885](./include/clang-c/Index.h:1885:3)
	""" CXCursor_FirstInvalid
	𝐣𝐥.@doc """
	 C++'s static_cast<> expression.
	
	## Reference
	
	[Index.h:2015](./include/clang-c/Index.h:2015:3)
	""" CXCursor_CXXStaticCastExpr
	𝐣𝐥.@doc """
	 Objective-c Boolean Literal.
	
	## Reference
	
	[Index.h:2144](./include/clang-c/Index.h:2144:3)
	""" CXCursor_ObjCBoolLiteralExpr
	𝐣𝐥.@doc """
	 An attribute whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:2550](./include/clang-c/Index.h:2550:3)
	""" CXCursor_FirstPreprocessing
	𝐣𝐥.@doc """
	 A while statement.
	
	## Reference
	
	[Index.h:2211](./include/clang-c/Index.h:2211:3)
	""" CXCursor_WhileStmt
	𝐣𝐥.@doc """
	 a friend declaration.
	
	## Reference
	
	[Index.h:2568](./include/clang-c/Index.h:2568:3)
	""" CXCursor_LastExtraDecl
	𝐣𝐥.@doc """
	 A C++ non-type template parameter. 
	
	## Reference
	
	[Index.h:1758](./include/clang-c/Index.h:1758:3)
	""" CXCursor_NonTypeTemplateParameter
	𝐣𝐥.@doc """
	 Objective-C's overall @try-@catch-@finally statement.
	
	## Reference
	
	[Index.h:2248](./include/clang-c/Index.h:2248:3)
	""" CXCursor_ObjCAtTryStmt
	𝐣𝐥.@doc """
	 A C or C++ union. 
	
	## Reference
	
	[Index.h:1705](./include/clang-c/Index.h:1705:3)
	""" CXCursor_UnionDecl
	𝐣𝐥.@doc """
	 A C++ alias declaration 
	
	## Reference
	
	[Index.h:1774](./include/clang-c/Index.h:1774:3)
	""" CXCursor_TypeAliasDecl
	𝐣𝐥.@doc """
	 A group of statements like { stmt stmt }.
	
	## Details
	
	 This cursor kind is used to describe compound statements, e.g. function bodies.
	
	## Reference
	
	[Index.h:2191](./include/clang-c/Index.h:2191:3)
	""" CXCursor_CompoundStmt
	𝐣𝐥.@doc """
	 OpenMP task directive.
	
	## Reference
	
	[Index.h:2347](./include/clang-c/Index.h:2347:3)
	""" CXCursor_OMPTaskDirective
	𝐣𝐥.@doc """
	 A reference to a variable that occurs in some non-expression  context, e.g., a C++ lambda capture list.
	
	## Reference
	
	[Index.h:1888](./include/clang-c/Index.h:1888:3)
	""" CXCursor_NotImplemented
	export CXCursorKind, CXCursor_AddrLabelExpr, CXCursor_AnnotateAttr, CXCursor_ArraySubscriptExpr, CXCursor_AsmLabelAttr, CXCursor_AsmStmt, CXCursor_BinaryOperator, CXCursor_BlockExpr, CXCursor_BreakStmt, CXCursor_CStyleCastExpr, CXCursor_CUDAConstantAttr, CXCursor_CUDADeviceAttr, CXCursor_CUDAGlobalAttr, CXCursor_CUDAHostAttr, CXCursor_CUDASharedAttr, CXCursor_CXXAccessSpecifier, CXCursor_CXXBaseSpecifier, CXCursor_CXXBoolLiteralExpr, CXCursor_CXXCatchStmt, CXCursor_CXXConstCastExpr, CXCursor_CXXDeleteExpr, CXCursor_CXXDynamicCastExpr, CXCursor_CXXFinalAttr, CXCursor_CXXForRangeStmt, CXCursor_CXXFunctionalCastExpr, CXCursor_CXXMethod, CXCursor_CXXNewExpr, CXCursor_CXXNullPtrLiteralExpr, CXCursor_CXXOverrideAttr, CXCursor_CXXReinterpretCastExpr, CXCursor_CXXStaticCastExpr, CXCursor_CXXThisExpr, CXCursor_CXXThrowExpr, CXCursor_CXXTryStmt, CXCursor_CXXTypeidExpr, CXCursor_CallExpr, CXCursor_CaseStmt, CXCursor_CharacterLiteral, CXCursor_ClassDecl, CXCursor_ClassTemplate, CXCursor_ClassTemplatePartialSpecialization, CXCursor_CompoundAssignOperator, CXCursor_CompoundLiteralExpr, CXCursor_CompoundStmt, CXCursor_ConditionalOperator, CXCursor_ConstAttr, CXCursor_Constructor, CXCursor_ContinueStmt, CXCursor_ConversionFunction, CXCursor_DLLExport, CXCursor_DLLImport, CXCursor_DeclRefExpr, CXCursor_DeclStmt, CXCursor_DefaultStmt, CXCursor_Destructor, CXCursor_DoStmt, CXCursor_EnumConstantDecl, CXCursor_EnumDecl, CXCursor_FieldDecl, CXCursor_FirstAttr, CXCursor_FirstDecl, CXCursor_FirstExpr, CXCursor_FirstExtraDecl, CXCursor_FirstInvalid, CXCursor_FirstPreprocessing, CXCursor_FirstRef, CXCursor_FirstStmt, CXCursor_FloatingLiteral, CXCursor_ForStmt, CXCursor_FriendDecl, CXCursor_FunctionDecl, CXCursor_FunctionTemplate, CXCursor_GCCAsmStmt, CXCursor_GNUNullExpr, CXCursor_GenericSelectionExpr, CXCursor_GotoStmt, CXCursor_IBActionAttr, CXCursor_IBOutletAttr, CXCursor_IBOutletCollectionAttr, CXCursor_IfStmt, CXCursor_ImaginaryLiteral, CXCursor_InclusionDirective, CXCursor_IndirectGotoStmt, CXCursor_InitListExpr, CXCursor_IntegerLiteral, CXCursor_InvalidCode, CXCursor_InvalidFile, CXCursor_LabelRef, CXCursor_LabelStmt, CXCursor_LambdaExpr, CXCursor_LastAttr, CXCursor_LastDecl, CXCursor_LastExpr, CXCursor_LastExtraDecl, CXCursor_LastInvalid, CXCursor_LastPreprocessing, CXCursor_LastRef, CXCursor_LastStmt, CXCursor_LinkageSpec, CXCursor_MSAsmStmt, CXCursor_MacroDefinition, CXCursor_MacroExpansion, CXCursor_MacroInstantiation, CXCursor_MemberRef, CXCursor_MemberRefExpr, CXCursor_ModuleImportDecl, CXCursor_Namespace, CXCursor_NamespaceAlias, CXCursor_NamespaceRef, CXCursor_NoDeclFound, CXCursor_NoDuplicateAttr, CXCursor_NonTypeTemplateParameter, CXCursor_NotImplemented, CXCursor_NullStmt, CXCursor_OMPArraySectionExpr, CXCursor_OMPAtomicDirective, CXCursor_OMPBarrierDirective, CXCursor_OMPCancelDirective, CXCursor_OMPCancellationPointDirective, CXCursor_OMPCriticalDirective, CXCursor_OMPDistributeDirective, CXCursor_OMPDistributeParallelForDirective, CXCursor_OMPDistributeParallelForSimdDirective, CXCursor_OMPDistributeSimdDirective, CXCursor_OMPFlushDirective, CXCursor_OMPForDirective, CXCursor_OMPForSimdDirective, CXCursor_OMPMasterDirective, CXCursor_OMPOrderedDirective, CXCursor_OMPParallelDirective, CXCursor_OMPParallelForDirective, CXCursor_OMPParallelForSimdDirective, CXCursor_OMPParallelSectionsDirective, CXCursor_OMPSectionDirective, CXCursor_OMPSectionsDirective, CXCursor_OMPSimdDirective, CXCursor_OMPSingleDirective, CXCursor_OMPTargetDataDirective, CXCursor_OMPTargetDirective, CXCursor_OMPTargetEnterDataDirective, CXCursor_OMPTargetExitDataDirective, CXCursor_OMPTargetParallelDirective, CXCursor_OMPTargetParallelForDirective, CXCursor_OMPTargetParallelForSimdDirective, CXCursor_OMPTargetSimdDirective, CXCursor_OMPTargetTeamsDirective, CXCursor_OMPTargetTeamsDistributeDirective, CXCursor_OMPTargetTeamsDistributeParallelForDirective, CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective, CXCursor_OMPTargetTeamsDistributeSimdDirective, CXCursor_OMPTargetUpdateDirective, CXCursor_OMPTaskDirective, CXCursor_OMPTaskLoopDirective, CXCursor_OMPTaskLoopSimdDirective, CXCursor_OMPTaskgroupDirective, CXCursor_OMPTaskwaitDirective, CXCursor_OMPTaskyieldDirective, CXCursor_OMPTeamsDirective, CXCursor_OMPTeamsDistributeDirective, CXCursor_OMPTeamsDistributeParallelForDirective, CXCursor_OMPTeamsDistributeParallelForSimdDirective, CXCursor_OMPTeamsDistributeSimdDirective, CXCursor_ObjCAtCatchStmt, CXCursor_ObjCAtFinallyStmt, CXCursor_ObjCAtSynchronizedStmt, CXCursor_ObjCAtThrowStmt, CXCursor_ObjCAtTryStmt, CXCursor_ObjCAutoreleasePoolStmt, CXCursor_ObjCAvailabilityCheckExpr, CXCursor_ObjCBoolLiteralExpr, CXCursor_ObjCBridgedCastExpr, CXCursor_ObjCCategoryDecl, CXCursor_ObjCCategoryImplDecl, CXCursor_ObjCClassMethodDecl, CXCursor_ObjCClassRef, CXCursor_ObjCDynamicDecl, CXCursor_ObjCEncodeExpr, CXCursor_ObjCForCollectionStmt, CXCursor_ObjCImplementationDecl, CXCursor_ObjCInstanceMethodDecl, CXCursor_ObjCInterfaceDecl, CXCursor_ObjCIvarDecl, CXCursor_ObjCMessageExpr, CXCursor_ObjCPropertyDecl, CXCursor_ObjCProtocolDecl, CXCursor_ObjCProtocolExpr, CXCursor_ObjCProtocolRef, CXCursor_ObjCSelectorExpr, CXCursor_ObjCSelfExpr, CXCursor_ObjCStringLiteral, CXCursor_ObjCSuperClassRef, CXCursor_ObjCSynthesizeDecl, CXCursor_OverloadCandidate, CXCursor_OverloadedDeclRef, CXCursor_PackExpansionExpr, CXCursor_PackedAttr, CXCursor_ParenExpr, CXCursor_ParmDecl, CXCursor_PreprocessingDirective, CXCursor_PureAttr, CXCursor_ReturnStmt, CXCursor_SEHExceptStmt, CXCursor_SEHFinallyStmt, CXCursor_SEHLeaveStmt, CXCursor_SEHTryStmt, CXCursor_SizeOfPackExpr, CXCursor_StaticAssert, CXCursor_StmtExpr, CXCursor_StringLiteral, CXCursor_StructDecl, CXCursor_SwitchStmt, CXCursor_TemplateRef, CXCursor_TemplateTemplateParameter, CXCursor_TemplateTypeParameter, CXCursor_TranslationUnit, CXCursor_TypeAliasDecl, CXCursor_TypeAliasTemplateDecl, CXCursor_TypeRef, CXCursor_TypedefDecl, CXCursor_UnaryExpr, CXCursor_UnaryOperator, CXCursor_UnexposedAttr, CXCursor_UnexposedDecl, CXCursor_UnexposedExpr, CXCursor_UnexposedStmt, CXCursor_UnionDecl, CXCursor_UsingDeclaration, CXCursor_UsingDirective, CXCursor_VarDecl, CXCursor_VariableRef, CXCursor_VisibilityAttr, CXCursor_WhileStmt
	𝐣𝐥.@cenum CXCursorKind {
		CXCursor_UnexposedDecl = 𝐣𝐥.Cuint(1)
		CXCursor_StructDecl = 𝐣𝐥.Cuint(2)
		CXCursor_UnionDecl = 𝐣𝐥.Cuint(3)
		CXCursor_ClassDecl = 𝐣𝐥.Cuint(4)
		CXCursor_EnumDecl = 𝐣𝐥.Cuint(5)
		CXCursor_FieldDecl = 𝐣𝐥.Cuint(6)
		CXCursor_EnumConstantDecl = 𝐣𝐥.Cuint(7)
		CXCursor_FunctionDecl = 𝐣𝐥.Cuint(8)
		CXCursor_VarDecl = 𝐣𝐥.Cuint(9)
		CXCursor_ParmDecl = 𝐣𝐥.Cuint(10)
		CXCursor_ObjCInterfaceDecl = 𝐣𝐥.Cuint(11)
		CXCursor_ObjCCategoryDecl = 𝐣𝐥.Cuint(12)
		CXCursor_ObjCProtocolDecl = 𝐣𝐥.Cuint(13)
		CXCursor_ObjCPropertyDecl = 𝐣𝐥.Cuint(14)
		CXCursor_ObjCIvarDecl = 𝐣𝐥.Cuint(15)
		CXCursor_ObjCInstanceMethodDecl = 𝐣𝐥.Cuint(16)
		CXCursor_ObjCClassMethodDecl = 𝐣𝐥.Cuint(17)
		CXCursor_ObjCImplementationDecl = 𝐣𝐥.Cuint(18)
		CXCursor_ObjCCategoryImplDecl = 𝐣𝐥.Cuint(19)
		CXCursor_TypedefDecl = 𝐣𝐥.Cuint(20)
		CXCursor_CXXMethod = 𝐣𝐥.Cuint(21)
		CXCursor_Namespace = 𝐣𝐥.Cuint(22)
		CXCursor_LinkageSpec = 𝐣𝐥.Cuint(23)
		CXCursor_Constructor = 𝐣𝐥.Cuint(24)
		CXCursor_Destructor = 𝐣𝐥.Cuint(25)
		CXCursor_ConversionFunction = 𝐣𝐥.Cuint(26)
		CXCursor_TemplateTypeParameter = 𝐣𝐥.Cuint(27)
		CXCursor_NonTypeTemplateParameter = 𝐣𝐥.Cuint(28)
		CXCursor_TemplateTemplateParameter = 𝐣𝐥.Cuint(29)
		CXCursor_FunctionTemplate = 𝐣𝐥.Cuint(30)
		CXCursor_ClassTemplate = 𝐣𝐥.Cuint(31)
		CXCursor_ClassTemplatePartialSpecialization = 𝐣𝐥.Cuint(32)
		CXCursor_NamespaceAlias = 𝐣𝐥.Cuint(33)
		CXCursor_UsingDirective = 𝐣𝐥.Cuint(34)
		CXCursor_UsingDeclaration = 𝐣𝐥.Cuint(35)
		CXCursor_TypeAliasDecl = 𝐣𝐥.Cuint(36)
		CXCursor_ObjCSynthesizeDecl = 𝐣𝐥.Cuint(37)
		CXCursor_ObjCDynamicDecl = 𝐣𝐥.Cuint(38)
		CXCursor_CXXAccessSpecifier = 𝐣𝐥.Cuint(39)
		CXCursor_FirstDecl = 𝐣𝐥.Cuint(1)
		CXCursor_LastDecl = 𝐣𝐥.Cuint(39)
		CXCursor_FirstRef = 𝐣𝐥.Cuint(40)
		CXCursor_ObjCSuperClassRef = 𝐣𝐥.Cuint(40)
		CXCursor_ObjCProtocolRef = 𝐣𝐥.Cuint(41)
		CXCursor_ObjCClassRef = 𝐣𝐥.Cuint(42)
		CXCursor_TypeRef = 𝐣𝐥.Cuint(43)
		CXCursor_CXXBaseSpecifier = 𝐣𝐥.Cuint(44)
		CXCursor_TemplateRef = 𝐣𝐥.Cuint(45)
		CXCursor_NamespaceRef = 𝐣𝐥.Cuint(46)
		CXCursor_MemberRef = 𝐣𝐥.Cuint(47)
		CXCursor_LabelRef = 𝐣𝐥.Cuint(48)
		CXCursor_OverloadedDeclRef = 𝐣𝐥.Cuint(49)
		CXCursor_VariableRef = 𝐣𝐥.Cuint(50)
		CXCursor_LastRef = 𝐣𝐥.Cuint(50)
		CXCursor_FirstInvalid = 𝐣𝐥.Cuint(70)
		CXCursor_InvalidFile = 𝐣𝐥.Cuint(70)
		CXCursor_NoDeclFound = 𝐣𝐥.Cuint(71)
		CXCursor_NotImplemented = 𝐣𝐥.Cuint(72)
		CXCursor_InvalidCode = 𝐣𝐥.Cuint(73)
		CXCursor_LastInvalid = 𝐣𝐥.Cuint(73)
		CXCursor_FirstExpr = 𝐣𝐥.Cuint(100)
		CXCursor_UnexposedExpr = 𝐣𝐥.Cuint(100)
		CXCursor_DeclRefExpr = 𝐣𝐥.Cuint(101)
		CXCursor_MemberRefExpr = 𝐣𝐥.Cuint(102)
		CXCursor_CallExpr = 𝐣𝐥.Cuint(103)
		CXCursor_ObjCMessageExpr = 𝐣𝐥.Cuint(104)
		CXCursor_BlockExpr = 𝐣𝐥.Cuint(105)
		CXCursor_IntegerLiteral = 𝐣𝐥.Cuint(106)
		CXCursor_FloatingLiteral = 𝐣𝐥.Cuint(107)
		CXCursor_ImaginaryLiteral = 𝐣𝐥.Cuint(108)
		CXCursor_StringLiteral = 𝐣𝐥.Cuint(109)
		CXCursor_CharacterLiteral = 𝐣𝐥.Cuint(110)
		CXCursor_ParenExpr = 𝐣𝐥.Cuint(111)
		CXCursor_UnaryOperator = 𝐣𝐥.Cuint(112)
		CXCursor_ArraySubscriptExpr = 𝐣𝐥.Cuint(113)
		CXCursor_BinaryOperator = 𝐣𝐥.Cuint(114)
		CXCursor_CompoundAssignOperator = 𝐣𝐥.Cuint(115)
		CXCursor_ConditionalOperator = 𝐣𝐥.Cuint(116)
		CXCursor_CStyleCastExpr = 𝐣𝐥.Cuint(117)
		CXCursor_CompoundLiteralExpr = 𝐣𝐥.Cuint(118)
		CXCursor_InitListExpr = 𝐣𝐥.Cuint(119)
		CXCursor_AddrLabelExpr = 𝐣𝐥.Cuint(120)
		CXCursor_StmtExpr = 𝐣𝐥.Cuint(121)
		CXCursor_GenericSelectionExpr = 𝐣𝐥.Cuint(122)
		CXCursor_GNUNullExpr = 𝐣𝐥.Cuint(123)
		CXCursor_CXXStaticCastExpr = 𝐣𝐥.Cuint(124)
		CXCursor_CXXDynamicCastExpr = 𝐣𝐥.Cuint(125)
		CXCursor_CXXReinterpretCastExpr = 𝐣𝐥.Cuint(126)
		CXCursor_CXXConstCastExpr = 𝐣𝐥.Cuint(127)
		CXCursor_CXXFunctionalCastExpr = 𝐣𝐥.Cuint(128)
		CXCursor_CXXTypeidExpr = 𝐣𝐥.Cuint(129)
		CXCursor_CXXBoolLiteralExpr = 𝐣𝐥.Cuint(130)
		CXCursor_CXXNullPtrLiteralExpr = 𝐣𝐥.Cuint(131)
		CXCursor_CXXThisExpr = 𝐣𝐥.Cuint(132)
		CXCursor_CXXThrowExpr = 𝐣𝐥.Cuint(133)
		CXCursor_CXXNewExpr = 𝐣𝐥.Cuint(134)
		CXCursor_CXXDeleteExpr = 𝐣𝐥.Cuint(135)
		CXCursor_UnaryExpr = 𝐣𝐥.Cuint(136)
		CXCursor_ObjCStringLiteral = 𝐣𝐥.Cuint(137)
		CXCursor_ObjCEncodeExpr = 𝐣𝐥.Cuint(138)
		CXCursor_ObjCSelectorExpr = 𝐣𝐥.Cuint(139)
		CXCursor_ObjCProtocolExpr = 𝐣𝐥.Cuint(140)
		CXCursor_ObjCBridgedCastExpr = 𝐣𝐥.Cuint(141)
		CXCursor_PackExpansionExpr = 𝐣𝐥.Cuint(142)
		CXCursor_SizeOfPackExpr = 𝐣𝐥.Cuint(143)
		CXCursor_LambdaExpr = 𝐣𝐥.Cuint(144)
		CXCursor_ObjCBoolLiteralExpr = 𝐣𝐥.Cuint(145)
		CXCursor_ObjCSelfExpr = 𝐣𝐥.Cuint(146)
		CXCursor_OMPArraySectionExpr = 𝐣𝐥.Cuint(147)
		CXCursor_ObjCAvailabilityCheckExpr = 𝐣𝐥.Cuint(148)
		CXCursor_LastExpr = 𝐣𝐥.Cuint(148)
		CXCursor_FirstStmt = 𝐣𝐥.Cuint(200)
		CXCursor_UnexposedStmt = 𝐣𝐥.Cuint(200)
		CXCursor_LabelStmt = 𝐣𝐥.Cuint(201)
		CXCursor_CompoundStmt = 𝐣𝐥.Cuint(202)
		CXCursor_CaseStmt = 𝐣𝐥.Cuint(203)
		CXCursor_DefaultStmt = 𝐣𝐥.Cuint(204)
		CXCursor_IfStmt = 𝐣𝐥.Cuint(205)
		CXCursor_SwitchStmt = 𝐣𝐥.Cuint(206)
		CXCursor_WhileStmt = 𝐣𝐥.Cuint(207)
		CXCursor_DoStmt = 𝐣𝐥.Cuint(208)
		CXCursor_ForStmt = 𝐣𝐥.Cuint(209)
		CXCursor_GotoStmt = 𝐣𝐥.Cuint(210)
		CXCursor_IndirectGotoStmt = 𝐣𝐥.Cuint(211)
		CXCursor_ContinueStmt = 𝐣𝐥.Cuint(212)
		CXCursor_BreakStmt = 𝐣𝐥.Cuint(213)
		CXCursor_ReturnStmt = 𝐣𝐥.Cuint(214)
		CXCursor_GCCAsmStmt = 𝐣𝐥.Cuint(215)
		CXCursor_AsmStmt = 𝐣𝐥.Cuint(215)
		CXCursor_ObjCAtTryStmt = 𝐣𝐥.Cuint(216)
		CXCursor_ObjCAtCatchStmt = 𝐣𝐥.Cuint(217)
		CXCursor_ObjCAtFinallyStmt = 𝐣𝐥.Cuint(218)
		CXCursor_ObjCAtThrowStmt = 𝐣𝐥.Cuint(219)
		CXCursor_ObjCAtSynchronizedStmt = 𝐣𝐥.Cuint(220)
		CXCursor_ObjCAutoreleasePoolStmt = 𝐣𝐥.Cuint(221)
		CXCursor_ObjCForCollectionStmt = 𝐣𝐥.Cuint(222)
		CXCursor_CXXCatchStmt = 𝐣𝐥.Cuint(223)
		CXCursor_CXXTryStmt = 𝐣𝐥.Cuint(224)
		CXCursor_CXXForRangeStmt = 𝐣𝐥.Cuint(225)
		CXCursor_SEHTryStmt = 𝐣𝐥.Cuint(226)
		CXCursor_SEHExceptStmt = 𝐣𝐥.Cuint(227)
		CXCursor_SEHFinallyStmt = 𝐣𝐥.Cuint(228)
		CXCursor_MSAsmStmt = 𝐣𝐥.Cuint(229)
		CXCursor_NullStmt = 𝐣𝐥.Cuint(230)
		CXCursor_DeclStmt = 𝐣𝐥.Cuint(231)
		CXCursor_OMPParallelDirective = 𝐣𝐥.Cuint(232)
		CXCursor_OMPSimdDirective = 𝐣𝐥.Cuint(233)
		CXCursor_OMPForDirective = 𝐣𝐥.Cuint(234)
		CXCursor_OMPSectionsDirective = 𝐣𝐥.Cuint(235)
		CXCursor_OMPSectionDirective = 𝐣𝐥.Cuint(236)
		CXCursor_OMPSingleDirective = 𝐣𝐥.Cuint(237)
		CXCursor_OMPParallelForDirective = 𝐣𝐥.Cuint(238)
		CXCursor_OMPParallelSectionsDirective = 𝐣𝐥.Cuint(239)
		CXCursor_OMPTaskDirective = 𝐣𝐥.Cuint(240)
		CXCursor_OMPMasterDirective = 𝐣𝐥.Cuint(241)
		CXCursor_OMPCriticalDirective = 𝐣𝐥.Cuint(242)
		CXCursor_OMPTaskyieldDirective = 𝐣𝐥.Cuint(243)
		CXCursor_OMPBarrierDirective = 𝐣𝐥.Cuint(244)
		CXCursor_OMPTaskwaitDirective = 𝐣𝐥.Cuint(245)
		CXCursor_OMPFlushDirective = 𝐣𝐥.Cuint(246)
		CXCursor_SEHLeaveStmt = 𝐣𝐥.Cuint(247)
		CXCursor_OMPOrderedDirective = 𝐣𝐥.Cuint(248)
		CXCursor_OMPAtomicDirective = 𝐣𝐥.Cuint(249)
		CXCursor_OMPForSimdDirective = 𝐣𝐥.Cuint(250)
		CXCursor_OMPParallelForSimdDirective = 𝐣𝐥.Cuint(251)
		CXCursor_OMPTargetDirective = 𝐣𝐥.Cuint(252)
		CXCursor_OMPTeamsDirective = 𝐣𝐥.Cuint(253)
		CXCursor_OMPTaskgroupDirective = 𝐣𝐥.Cuint(254)
		CXCursor_OMPCancellationPointDirective = 𝐣𝐥.Cuint(255)
		CXCursor_OMPCancelDirective = 𝐣𝐥.Cuint(256)
		CXCursor_OMPTargetDataDirective = 𝐣𝐥.Cuint(257)
		CXCursor_OMPTaskLoopDirective = 𝐣𝐥.Cuint(258)
		CXCursor_OMPTaskLoopSimdDirective = 𝐣𝐥.Cuint(259)
		CXCursor_OMPDistributeDirective = 𝐣𝐥.Cuint(260)
		CXCursor_OMPTargetEnterDataDirective = 𝐣𝐥.Cuint(261)
		CXCursor_OMPTargetExitDataDirective = 𝐣𝐥.Cuint(262)
		CXCursor_OMPTargetParallelDirective = 𝐣𝐥.Cuint(263)
		CXCursor_OMPTargetParallelForDirective = 𝐣𝐥.Cuint(264)
		CXCursor_OMPTargetUpdateDirective = 𝐣𝐥.Cuint(265)
		CXCursor_OMPDistributeParallelForDirective = 𝐣𝐥.Cuint(266)
		CXCursor_OMPDistributeParallelForSimdDirective = 𝐣𝐥.Cuint(267)
		CXCursor_OMPDistributeSimdDirective = 𝐣𝐥.Cuint(268)
		CXCursor_OMPTargetParallelForSimdDirective = 𝐣𝐥.Cuint(269)
		CXCursor_OMPTargetSimdDirective = 𝐣𝐥.Cuint(270)
		CXCursor_OMPTeamsDistributeDirective = 𝐣𝐥.Cuint(271)
		CXCursor_OMPTeamsDistributeSimdDirective = 𝐣𝐥.Cuint(272)
		CXCursor_OMPTeamsDistributeParallelForSimdDirective = 𝐣𝐥.Cuint(273)
		CXCursor_OMPTeamsDistributeParallelForDirective = 𝐣𝐥.Cuint(274)
		CXCursor_OMPTargetTeamsDirective = 𝐣𝐥.Cuint(275)
		CXCursor_OMPTargetTeamsDistributeDirective = 𝐣𝐥.Cuint(276)
		CXCursor_OMPTargetTeamsDistributeParallelForDirective = 𝐣𝐥.Cuint(277)
		CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective = 𝐣𝐥.Cuint(278)
		CXCursor_OMPTargetTeamsDistributeSimdDirective = 𝐣𝐥.Cuint(279)
		CXCursor_LastStmt = 𝐣𝐥.Cuint(279)
		CXCursor_TranslationUnit = 𝐣𝐥.Cuint(300)
		CXCursor_FirstAttr = 𝐣𝐥.Cuint(400)
		CXCursor_UnexposedAttr = 𝐣𝐥.Cuint(400)
		CXCursor_IBActionAttr = 𝐣𝐥.Cuint(401)
		CXCursor_IBOutletAttr = 𝐣𝐥.Cuint(402)
		CXCursor_IBOutletCollectionAttr = 𝐣𝐥.Cuint(403)
		CXCursor_CXXFinalAttr = 𝐣𝐥.Cuint(404)
		CXCursor_CXXOverrideAttr = 𝐣𝐥.Cuint(405)
		CXCursor_AnnotateAttr = 𝐣𝐥.Cuint(406)
		CXCursor_AsmLabelAttr = 𝐣𝐥.Cuint(407)
		CXCursor_PackedAttr = 𝐣𝐥.Cuint(408)
		CXCursor_PureAttr = 𝐣𝐥.Cuint(409)
		CXCursor_ConstAttr = 𝐣𝐥.Cuint(410)
		CXCursor_NoDuplicateAttr = 𝐣𝐥.Cuint(411)
		CXCursor_CUDAConstantAttr = 𝐣𝐥.Cuint(412)
		CXCursor_CUDADeviceAttr = 𝐣𝐥.Cuint(413)
		CXCursor_CUDAGlobalAttr = 𝐣𝐥.Cuint(414)
		CXCursor_CUDAHostAttr = 𝐣𝐥.Cuint(415)
		CXCursor_CUDASharedAttr = 𝐣𝐥.Cuint(416)
		CXCursor_VisibilityAttr = 𝐣𝐥.Cuint(417)
		CXCursor_DLLExport = 𝐣𝐥.Cuint(418)
		CXCursor_DLLImport = 𝐣𝐥.Cuint(419)
		CXCursor_LastAttr = 𝐣𝐥.Cuint(419)
		CXCursor_PreprocessingDirective = 𝐣𝐥.Cuint(500)
		CXCursor_MacroDefinition = 𝐣𝐥.Cuint(501)
		CXCursor_MacroExpansion = 𝐣𝐥.Cuint(502)
		CXCursor_MacroInstantiation = 𝐣𝐥.Cuint(502)
		CXCursor_InclusionDirective = 𝐣𝐥.Cuint(503)
		CXCursor_FirstPreprocessing = 𝐣𝐥.Cuint(500)
		CXCursor_LastPreprocessing = 𝐣𝐥.Cuint(503)
		CXCursor_ModuleImportDecl = 𝐣𝐥.Cuint(600)
		CXCursor_TypeAliasTemplateDecl = 𝐣𝐥.Cuint(601)
		CXCursor_StaticAssert = 𝐣𝐥.Cuint(602)
		CXCursor_FriendDecl = 𝐣𝐥.Cuint(603)
		CXCursor_FirstExtraDecl = 𝐣𝐥.Cuint(600)
		CXCursor_LastExtraDecl = 𝐣𝐥.Cuint(603)
		CXCursor_OverloadCandidate = 𝐣𝐥.Cuint(700)
	}
	
	𝐣𝐥.@doc """
	 A cursor representing some element in the abstract syntax tree for a translation unit.
	
	## Details
	
	 The cursor abstraction unifies the different kinds of entities in a program--declaration, statements, expressions, references to declarations, etc.--under a single \"cursor\" abstraction with a common set of operations. Common operation for a cursor include: getting the physical location in a source file where the cursor points, getting the name associated with a cursor, and retrieving cursors for any child nodes of a particular cursor.
	
	 Cursors can be produced in two specific ways. clang_getTranslationUnitCursor() produces a cursor for a translation unit, from which one can use clang_visitChildren() to explore the rest of the translation unit. clang_getCursor() maps from a physical source location to the entity that resides at that location, allowing one to map from the source code into the AST.
	
	## Reference
	
	[Index.h:2598](./include/clang-c/Index.h:2598:3)
	""" CXCursor
	export CXCursor
	𝐣𝐥.@ctypedef CXCursor 𝐣𝐥.@cstruct {
		kind::𝐣𝐥.@cenum CXCursorKind
		xdata::𝐣𝐥.Cint
		data::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cvoid)}[3]
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getNullCursor()::CXCursor
	```
	
	 Retrieve the NULL cursor, which represents no entity.
	
	## Reference
	
	[Index.h:2609](./include/clang-c/Index.h:2609:25)
	""" clang_getNullCursor
	export clang_getNullCursor
	𝐣𝐥.@cextern clang_getNullCursor()::CXCursor
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTranslationUnitCursor(var\"?1?\"::CXTranslationUnit)::CXCursor
	```
	
	 Retrieve the cursor that represents the given translation unit.
	
	## Details
	
	 The translation unit cursor can be used to start traversing the various declarations within the given translation unit.
	
	## Reference
	
	[Index.h:2617](./include/clang-c/Index.h:2617:25)
	""" clang_getTranslationUnitCursor
	export clang_getTranslationUnitCursor
	𝐣𝐥.@cextern clang_getTranslationUnitCursor(var"?1?"::CXTranslationUnit)::CXCursor
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_equalCursors(var\"?1?\"::CXCursor, var\"?2?\"::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine whether two cursors are equivalent.
	
	## Reference
	
	[Index.h:2622](./include/clang-c/Index.h:2622:25)
	""" clang_equalCursors
	export clang_equalCursors
	𝐣𝐥.@cextern clang_equalCursors(var"?1?"::CXCursor, var"?2?"::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_isNull(cursor::CXCursor)::𝐣𝐥.Cint
	```
	
	 Returns non-zero if `cursor` is null.
	
	## Reference
	
	[Index.h:2627](./include/clang-c/Index.h:2627:20)
	""" clang_Cursor_isNull
	export clang_Cursor_isNull
	𝐣𝐥.@cextern clang_Cursor_isNull(cursor::CXCursor)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_hashCursor(var\"?1?\"::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Compute a hash value for the given cursor.
	
	## Reference
	
	[Index.h:2632](./include/clang-c/Index.h:2632:25)
	""" clang_hashCursor
	export clang_hashCursor
	𝐣𝐥.@cextern clang_hashCursor(var"?1?"::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorKind(var\"?1?\"::CXCursor)::𝐣𝐥.@cenum CXCursorKind
	```
	
	 Retrieve the kind of the given cursor.
	
	## Reference
	
	[Index.h:2637](./include/clang-c/Index.h:2637:34)
	""" clang_getCursorKind
	export clang_getCursorKind
	𝐣𝐥.@cextern clang_getCursorKind(var"?1?"::CXCursor)::𝐣𝐥.@cenum CXCursorKind
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isDeclaration(var\"?1?\"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	```
	
	 Determine whether the given cursor kind represents a declaration.
	
	## Reference
	
	[Index.h:2642](./include/clang-c/Index.h:2642:25)
	""" clang_isDeclaration
	export clang_isDeclaration
	𝐣𝐥.@cextern clang_isDeclaration(var"?1?"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isReference(var\"?1?\"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	```
	
	 Determine whether the given cursor kind represents a simple reference.
	
	## Details
	
	 Note that other kinds of cursors (such as expressions) can also refer to other cursors. Use clang_getCursorReferenced() to determine whether a particular cursor refers to another entity.
	
	## Reference
	
	[Index.h:2652](./include/clang-c/Index.h:2652:25)
	""" clang_isReference
	export clang_isReference
	𝐣𝐥.@cextern clang_isReference(var"?1?"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isExpression(var\"?1?\"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	```
	
	 Determine whether the given cursor kind represents an expression.
	
	## Reference
	
	[Index.h:2657](./include/clang-c/Index.h:2657:25)
	""" clang_isExpression
	export clang_isExpression
	𝐣𝐥.@cextern clang_isExpression(var"?1?"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isStatement(var\"?1?\"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	```
	
	 Determine whether the given cursor kind represents a statement.
	
	## Reference
	
	[Index.h:2662](./include/clang-c/Index.h:2662:25)
	""" clang_isStatement
	export clang_isStatement
	𝐣𝐥.@cextern clang_isStatement(var"?1?"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isAttribute(var\"?1?\"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	```
	
	 Determine whether the given cursor kind represents an attribute.
	
	## Reference
	
	[Index.h:2667](./include/clang-c/Index.h:2667:25)
	""" clang_isAttribute
	export clang_isAttribute
	𝐣𝐥.@cextern clang_isAttribute(var"?1?"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_hasAttrs(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine whether the given cursor has any attributes.
	
	## Reference
	
	[Index.h:2672](./include/clang-c/Index.h:2672:25)
	""" clang_Cursor_hasAttrs
	export clang_Cursor_hasAttrs
	𝐣𝐥.@cextern clang_Cursor_hasAttrs(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isInvalid(var\"?1?\"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	```
	
	 Determine whether the given cursor kind represents an invalid cursor.
	
	## Reference
	
	[Index.h:2678](./include/clang-c/Index.h:2678:25)
	""" clang_isInvalid
	export clang_isInvalid
	𝐣𝐥.@cextern clang_isInvalid(var"?1?"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isTranslationUnit(var\"?1?\"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	```
	
	 Determine whether the given cursor kind represents a translation unit.
	
	## Reference
	
	[Index.h:2684](./include/clang-c/Index.h:2684:25)
	""" clang_isTranslationUnit
	export clang_isTranslationUnit
	𝐣𝐥.@cextern clang_isTranslationUnit(var"?1?"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isPreprocessing(var\"?1?\"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	```
	
	* 
	
	## Details
	
	 Determine whether the given cursor represents a preprocessing element, such as a preprocessor directive or macro instantiation.
	
	## Reference
	
	[Index.h:2690](./include/clang-c/Index.h:2690:25)
	""" clang_isPreprocessing
	export clang_isPreprocessing
	𝐣𝐥.@cextern clang_isPreprocessing(var"?1?"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isUnexposed(var\"?1?\"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	```
	
	* 
	
	## Details
	
	 Determine whether the given cursor represents a currently  unexposed piece of the AST (e.g., CXCursor_UnexposedStmt).
	
	## Reference
	
	[Index.h:2696](./include/clang-c/Index.h:2696:25)
	""" clang_isUnexposed
	export clang_isUnexposed
	𝐣𝐥.@cextern clang_isUnexposed(var"?1?"::𝐣𝐥.@cenum CXCursorKind)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	 This is the linkage for static variables and static functions. 
	
	## Reference
	
	[Index.h:2711](./include/clang-c/Index.h:2711:3)
	""" CXLinkage_Internal
	𝐣𝐥.@doc """
	 This is the linkage for entities with external linkage that live in C++ anonymous namespaces.
	
	## Reference
	
	[Index.h:2714](./include/clang-c/Index.h:2714:3)
	""" CXLinkage_UniqueExternal
	𝐣𝐥.@doc """
	 This is the linkage for entities with true, external linkage. 
	
	## Reference
	
	[Index.h:2716](./include/clang-c/Index.h:2716:3)
	""" CXLinkage_External
	𝐣𝐥.@doc """
	 This value indicates that no linkage information is available for a provided CXCursor. 
	
	## Reference
	
	[Index.h:2704](./include/clang-c/Index.h:2704:3)
	""" CXLinkage_Invalid
	𝐣𝐥.@doc """
	 This is the linkage for variables, parameters, and so on that  have automatic storage.  This covers normal (non-extern) local variables.
	
	## Reference
	
	[Index.h:2709](./include/clang-c/Index.h:2709:3)
	""" CXLinkage_NoLinkage
	𝐣𝐥.@doc """
	 Describe the linkage of the entity referred to by a cursor.
	
	## Reference
	
	[Index.h:2701](./include/clang-c/Index.h:2701:6)
	""" CXLinkageKind
	export CXLinkageKind, CXLinkage_External, CXLinkage_Internal, CXLinkage_Invalid, CXLinkage_NoLinkage, CXLinkage_UniqueExternal
	𝐣𝐥.@cenum CXLinkageKind {
		CXLinkage_Invalid = 𝐣𝐥.Cuint(0)
		CXLinkage_NoLinkage = 𝐣𝐥.Cuint(1)
		CXLinkage_Internal = 𝐣𝐥.Cuint(2)
		CXLinkage_UniqueExternal = 𝐣𝐥.Cuint(3)
		CXLinkage_External = 𝐣𝐥.Cuint(4)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorLinkage(cursor::CXCursor)::𝐣𝐥.@cenum CXLinkageKind
	```
	
	 Determine the linkage of the entity referred to by a given cursor.
	
	## Reference
	
	[Index.h:2722](./include/clang-c/Index.h:2722:35)
	""" clang_getCursorLinkage
	export clang_getCursorLinkage
	𝐣𝐥.@cextern clang_getCursorLinkage(cursor::CXCursor)::𝐣𝐥.@cenum CXLinkageKind
	
	𝐣𝐥.@doc """
	 Symbol seen by the linker but resolves to a symbol inside this object. 
	
	## Reference
	
	[Index.h:2732](./include/clang-c/Index.h:2732:3)
	""" CXVisibility_Protected
	𝐣𝐥.@doc """
	 This value indicates that no visibility information is available for a provided CXCursor. 
	
	## Reference
	
	[Index.h:2727](./include/clang-c/Index.h:2727:3)
	""" CXVisibility_Invalid
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:2724](./include/clang-c/Index.h:2724:6)
	""" CXVisibilityKind
	𝐣𝐥.@doc """
	 Symbol not seen by the linker. 
	
	## Reference
	
	[Index.h:2730](./include/clang-c/Index.h:2730:3)
	""" CXVisibility_Hidden
	𝐣𝐥.@doc """
	 Symbol seen by the linker and acts like a normal symbol. 
	
	## Reference
	
	[Index.h:2734](./include/clang-c/Index.h:2734:3)
	""" CXVisibility_Default
	export CXVisibilityKind, CXVisibility_Default, CXVisibility_Hidden, CXVisibility_Invalid, CXVisibility_Protected
	𝐣𝐥.@cenum CXVisibilityKind {
		CXVisibility_Invalid = 𝐣𝐥.Cuint(0)
		CXVisibility_Hidden = 𝐣𝐥.Cuint(1)
		CXVisibility_Protected = 𝐣𝐥.Cuint(2)
		CXVisibility_Default = 𝐣𝐥.Cuint(3)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorVisibility(cursor::CXCursor)::𝐣𝐥.@cenum CXVisibilityKind
	```
	
	 Describe the visibility of the entity referred to by a cursor.
	
	## Details
	
	 This returns the default visibility if not explicitly specified by a visibility attribute. The default visibility may be changed by commandline arguments.
	
	## Parameters
	
	  * `cursor`: The cursor to query.
	
	## Returns
	
	 The visibility of the cursor.
	
	## Reference
	
	[Index.h:2748](./include/clang-c/Index.h:2748:38)
	""" clang_getCursorVisibility
	export clang_getCursorVisibility
	𝐣𝐥.@cextern clang_getCursorVisibility(cursor::CXCursor)::𝐣𝐥.@cenum CXVisibilityKind
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorAvailability(cursor::CXCursor)::𝐣𝐥.@cenum CXAvailabilityKind
	```
	
	 Determine the availability of the entity that this cursor refers to, taking the current target platform into account.
	
	## Parameters
	
	  * `cursor`: The cursor to query.
	
	## Returns
	
	 The availability of the cursor.
	
	## Reference
	
	[Index.h:2759](./include/clang-c/Index.h:2759:1)
	""" clang_getCursorAvailability
	export clang_getCursorAvailability
	𝐣𝐥.@cextern clang_getCursorAvailability(cursor::CXCursor)::𝐣𝐥.@cenum CXAvailabilityKind
	
	𝐣𝐥.@doc """
	 Describes the availability of a given entity on a particular platform, e.g., a particular class might only be available on Mac OS 10.7 or newer.
	
	---
	
	 Describes the availability of a given entity on a particular platform, e.g., a particular class might only be available on Mac OS 10.7 or newer.
	
	## References
	
	[Index.h:2765](./include/clang-c/Index.h:2765:16)
	
	[Index.h:2796](./include/clang-c/Index.h:2796:3)
	""" CXPlatformAvailability
	export CXPlatformAvailability
	𝐣𝐥.@ctypedef CXPlatformAvailability 𝐣𝐥.@cstruct CXPlatformAvailability {
		Platform::CXString
		Introduced::CXVersion
		Deprecated::CXVersion
		Obsoleted::CXVersion
		Unavailable::𝐣𝐥.Cint
		Message::CXString
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorPlatformAvailability(cursor::CXCursor, always_deprecated::𝐣𝐥.Ptr{𝐣𝐥.Cint}, deprecated_message::𝐣𝐥.Ptr{CXString}, always_unavailable::𝐣𝐥.Ptr{𝐣𝐥.Cint}, unavailable_message::𝐣𝐥.Ptr{CXString}, availability::𝐣𝐥.Ptr{CXPlatformAvailability}, availability_size::𝐣𝐥.Cint)::𝐣𝐥.Cint
	```
	
	 Determine the availability of the entity that this cursor refers to on any platforms for which availability information is known.
	
	## Parameters
	
	  * `cursor`: The cursor to query.
	  * `always_deprecated`: If non-NULL, will be set to indicate whether the  entity is deprecated on all platforms.
	  * `deprecated_message`: If non-NULL, will be set to the message text  provided along with the unconditional deprecation of this entity. The client is responsible for deallocating this string.
	  * `always_unavailable`: If non-NULL, will be set to indicate whether the entity is unavailable on all platforms.
	  * `unavailable_message`: If non-NULL, will be set to the message text provided along with the unconditional unavailability of this entity. The  client is responsible for deallocating this string.
	  * `availability`: If non-NULL, an array of CXPlatformAvailability instances that will be populated with platform availability information, up to either the number of platforms for which availability information is available (as returned by this function) or `availability_size,` whichever is smaller.
	  * `availability_size`: The number of elements available in the  `availability` array.
	
	## Returns
	
	 The number of platforms (N) for which availability information is available (which is unrelated to `availability_size).`
	
	 Note that the client is responsible for calling  `clang_disposeCXPlatformAvailability` to free each of the  platform-availability structures returned. There are  `min(N,` availability_size) such structures.
	
	## Reference
	
	[Index.h:2835](./include/clang-c/Index.h:2835:1)
	""" clang_getCursorPlatformAvailability
	export clang_getCursorPlatformAvailability
	𝐣𝐥.@cextern clang_getCursorPlatformAvailability(cursor::CXCursor, always_deprecated::𝐣𝐥.Ptr{𝐣𝐥.Cint}, deprecated_message::𝐣𝐥.Ptr{CXString}, always_unavailable::𝐣𝐥.Ptr{𝐣𝐥.Cint}, unavailable_message::𝐣𝐥.Ptr{CXString}, availability::𝐣𝐥.Ptr{CXPlatformAvailability}, availability_size::𝐣𝐥.Cint)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_disposeCXPlatformAvailability(availability::𝐣𝐥.Ptr{CXPlatformAvailability})::𝐣𝐥.Cvoid
	```
	
	 Free the memory associated with a `CXPlatformAvailability` structure.
	
	## Reference
	
	[Index.h:2847](./include/clang-c/Index.h:2847:1)
	""" clang_disposeCXPlatformAvailability
	export clang_disposeCXPlatformAvailability
	𝐣𝐥.@cextern clang_disposeCXPlatformAvailability(availability::𝐣𝐥.Ptr{CXPlatformAvailability})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	 Describe the \"language\" of the entity referred to by a cursor.
	
	## Reference
	
	[Index.h:2852](./include/clang-c/Index.h:2852:6)
	""" CXLanguageKind
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:2856](./include/clang-c/Index.h:2856:3)
	""" CXLanguage_CPlusPlus
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:2855](./include/clang-c/Index.h:2855:3)
	""" CXLanguage_ObjC
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:2853](./include/clang-c/Index.h:2853:3)
	""" CXLanguage_Invalid
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:2854](./include/clang-c/Index.h:2854:3)
	""" CXLanguage_C
	export CXLanguageKind, CXLanguage_C, CXLanguage_CPlusPlus, CXLanguage_Invalid, CXLanguage_ObjC
	𝐣𝐥.@cenum CXLanguageKind {
		CXLanguage_Invalid = 𝐣𝐥.Cuint(0)
		CXLanguage_C = 𝐣𝐥.Cuint(1)
		CXLanguage_ObjC = 𝐣𝐥.Cuint(2)
		CXLanguage_CPlusPlus = 𝐣𝐥.Cuint(3)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorLanguage(cursor::CXCursor)::𝐣𝐥.@cenum CXLanguageKind
	```
	
	 Determine the \"language\" of the entity referred to by a given cursor.
	
	## Reference
	
	[Index.h:2862](./include/clang-c/Index.h:2862:36)
	""" clang_getCursorLanguage
	export clang_getCursorLanguage
	𝐣𝐥.@cextern clang_getCursorLanguage(cursor::CXCursor)::𝐣𝐥.@cenum CXLanguageKind
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:2870](./include/clang-c/Index.h:2870:3)
	""" CXTLS_Dynamic
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:2871](./include/clang-c/Index.h:2871:3)
	""" CXTLS_Static
	𝐣𝐥.@doc """
	 Describe the \"thread-local storage (TLS) kind\" of the declaration referred to by a cursor.
	
	## Reference
	
	[Index.h:2868](./include/clang-c/Index.h:2868:6)
	""" CXTLSKind
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:2869](./include/clang-c/Index.h:2869:3)
	""" CXTLS_None
	export CXTLSKind, CXTLS_Dynamic, CXTLS_None, CXTLS_Static
	𝐣𝐥.@cenum CXTLSKind {
		CXTLS_None = 𝐣𝐥.Cuint(0)
		CXTLS_Dynamic = 𝐣𝐥.Cuint(1)
		CXTLS_Static = 𝐣𝐥.Cuint(2)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorTLSKind(cursor::CXCursor)::𝐣𝐥.@cenum CXTLSKind
	```
	
	 Determine the \"thread-local storage (TLS) kind\" of the declaration referred to by a cursor.
	
	## Reference
	
	[Index.h:2878](./include/clang-c/Index.h:2878:31)
	""" clang_getCursorTLSKind
	export clang_getCursorTLSKind
	𝐣𝐥.@cextern clang_getCursorTLSKind(cursor::CXCursor)::𝐣𝐥.@cenum CXTLSKind
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getTranslationUnit(var\"?1?\"::CXCursor)::CXTranslationUnit
	```
	
	 Returns the translation unit that a cursor originated from.
	
	## Reference
	
	[Index.h:2883](./include/clang-c/Index.h:2883:34)
	""" clang_Cursor_getTranslationUnit
	export clang_Cursor_getTranslationUnit
	𝐣𝐥.@cextern clang_Cursor_getTranslationUnit(var"?1?"::CXCursor)::CXTranslationUnit
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:2888](./include/clang-c/Index.h:2888:16)
	""" CXCursorSetImpl
	𝐣𝐥.@doc """
	 A fast container representing a set of CXCursors.
	
	## Reference
	
	[Index.h:2888](./include/clang-c/Index.h:2888:33)
	""" CXCursorSet
	export CXCursorSet, CXCursorSetImpl
	𝐣𝐥.@ctypedef CXCursorSet 𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXCursorSetImpl}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_createCXCursorSet()::CXCursorSet
	```
	
	 Creates an empty CXCursorSet.
	
	## Reference
	
	[Index.h:2893](./include/clang-c/Index.h:2893:28)
	""" clang_createCXCursorSet
	export clang_createCXCursorSet
	𝐣𝐥.@cextern clang_createCXCursorSet()::CXCursorSet
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_disposeCXCursorSet(cset::CXCursorSet)::𝐣𝐥.Cvoid
	```
	
	 Disposes a CXCursorSet and releases its associated memory.
	
	## Reference
	
	[Index.h:2898](./include/clang-c/Index.h:2898:21)
	""" clang_disposeCXCursorSet
	export clang_disposeCXCursorSet
	𝐣𝐥.@cextern clang_disposeCXCursorSet(cset::CXCursorSet)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXCursorSet_contains(cset::CXCursorSet, cursor::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Queries a CXCursorSet to see if it contains a specific CXCursor.
	
	## Returns
	
	 non-zero if the set contains the specified cursor.
	
	## Reference
	
	[Index.h:2905](./include/clang-c/Index.h:2905:25)
	""" clang_CXCursorSet_contains
	export clang_CXCursorSet_contains
	𝐣𝐥.@cextern clang_CXCursorSet_contains(cset::CXCursorSet, cursor::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXCursorSet_insert(cset::CXCursorSet, cursor::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Inserts a CXCursor into a CXCursorSet.
	
	## Returns
	
	 zero if the CXCursor was already in the set, and non-zero otherwise.
	
	## Reference
	
	[Index.h:2913](./include/clang-c/Index.h:2913:25)
	""" clang_CXCursorSet_insert
	export clang_CXCursorSet_insert
	𝐣𝐥.@cextern clang_CXCursorSet_insert(cset::CXCursorSet, cursor::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorSemanticParent(cursor::CXCursor)::CXCursor
	```
	
	 Determine the semantic parent of the given cursor.
	
	## Details
	
	 The semantic parent of a cursor is the cursor that semantically contains the given `cursor.` For many declarations, the lexical and semantic parents are equivalent (the lexical parent is returned by  `clang_getCursorLexicalParent()).` They diverge when declarations or definitions are provided out-of-line. For example:
	
	```
	 class C {
	  void f();
	 };
	
	 void C::f() { }
	```
	
	 In the out-of-line definition of `C::f,` the semantic parent is the class `C,` of which this function is a member. The lexical parent is the place where the declaration actually occurs in the source code; in this case, the definition occurs in the translation unit. In general, the lexical parent for a given entity can change without affecting the semantics of the program, and the lexical parent of different declarations of the same entity may be different. Changing the semantic parent of a declaration, on the other hand, can have a major impact on semantics, and redeclarations of a particular entity should all have the same semantic context.
	
	 In the example above, both declarations of `C::f` have `C` as their semantic context, while the lexical context of the first `C::f` is `C` and the lexical context of the second `C::f` is the translation unit.
	
	 For global declarations, the semantic parent is the translation unit.
	
	## Reference
	
	[Index.h:2949](./include/clang-c/Index.h:2949:25)
	""" clang_getCursorSemanticParent
	export clang_getCursorSemanticParent
	𝐣𝐥.@cextern clang_getCursorSemanticParent(cursor::CXCursor)::CXCursor
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorLexicalParent(cursor::CXCursor)::CXCursor
	```
	
	 Determine the lexical parent of the given cursor.
	
	## Details
	
	 The lexical parent of a cursor is the cursor in which the given `cursor` was actually written. For many declarations, the lexical and semantic parents are equivalent (the semantic parent is returned by  `clang_getCursorSemanticParent()).` They diverge when declarations or definitions are provided out-of-line. For example:
	
	```
	 class C {
	  void f();
	 };
	
	 void C::f() { }
	```
	
	 In the out-of-line definition of `C::f,` the semantic parent is the class `C,` of which this function is a member. The lexical parent is the place where the declaration actually occurs in the source code; in this case, the definition occurs in the translation unit. In general, the lexical parent for a given entity can change without affecting the semantics of the program, and the lexical parent of different declarations of the same entity may be different. Changing the semantic parent of a declaration, on the other hand, can have a major impact on semantics, and redeclarations of a particular entity should all have the same semantic context.
	
	 In the example above, both declarations of `C::f` have `C` as their semantic context, while the lexical context of the first `C::f` is `C` and the lexical context of the second `C::f` is the translation unit.
	
	 For declarations written in the global scope, the lexical parent is the translation unit.
	
	## Reference
	
	[Index.h:2985](./include/clang-c/Index.h:2985:25)
	""" clang_getCursorLexicalParent
	export clang_getCursorLexicalParent
	𝐣𝐥.@cextern clang_getCursorLexicalParent(cursor::CXCursor)::CXCursor
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getOverriddenCursors(cursor::CXCursor, overridden::𝐣𝐥.Ptr{𝐣𝐥.Ptr{CXCursor}}, num_overridden::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	```
	
	 Determine the set of methods that are overridden by the given method.
	
	## Details
	
	 In both Objective-C and C++, a method (aka virtual member function, in C++) can override a virtual method in a base class. For Objective-C, a method is said to override any method in the class's base class, its protocols, or its categories' protocols, that has the same selector and is of the same kind (class or instance). If no such method exists, the search continues to the class's superclass, its protocols, and its categories, and so on. A method from an Objective-C implementation is considered to override the same methods as its corresponding method in the interface.
	
	 For C++, a virtual member function overrides any virtual member function with the same signature that occurs in its base classes. With multiple inheritance, a virtual member function can override several virtual member functions coming from different base classes.
	
	 In all cases, this function determines the immediate overridden method, rather than all of the overridden methods. For example, if a method is originally declared in a class A, then overridden in B (which in inherits from A) and also in C (which inherited from B), then the only overridden method returned from this function when invoked on C's method will be B's method. The client may then invoke this function again, given the previously-found overridden methods, to map out the complete method-override set.
	
	## Parameters
	
	  * `cursor`: A cursor representing an Objective-C or C++ method. This routine will compute the set of methods that this method overrides.
	  * `overridden`: A pointer whose pointee will be replaced with a pointer to an array of cursors, representing the set of overridden methods. If there are no overridden methods, the pointee will be set to NULL. The pointee must be freed via a call to  `clang_disposeOverriddenCursors().`
	  * `num_overridden`: A pointer to the number of overridden functions, will be set to the number of overridden functions in the array pointed to by `overridden.`
	
	## Reference
	
	[Index.h:3030](./include/clang-c/Index.h:3030:21)
	""" clang_getOverriddenCursors
	export clang_getOverriddenCursors
	𝐣𝐥.@cextern clang_getOverriddenCursors(cursor::CXCursor, overridden::𝐣𝐥.Ptr{𝐣𝐥.Ptr{CXCursor}}, num_overridden::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_disposeOverriddenCursors(overridden::𝐣𝐥.Ptr{CXCursor})::𝐣𝐥.Cvoid
	```
	
	 Free the set of overridden cursors returned by `clang_getOverriddenCursors().` 
	
	## Reference
	
	[Index.h:3038](./include/clang-c/Index.h:3038:21)
	""" clang_disposeOverriddenCursors
	export clang_disposeOverriddenCursors
	𝐣𝐥.@cextern clang_disposeOverriddenCursors(overridden::𝐣𝐥.Ptr{CXCursor})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getIncludedFile(cursor::CXCursor)::CXFile
	```
	
	 Retrieve the file that is included by the given inclusion directive cursor.
	
	## Reference
	
	[Index.h:3044](./include/clang-c/Index.h:3044:23)
	""" clang_getIncludedFile
	export clang_getIncludedFile
	𝐣𝐥.@cextern clang_getIncludedFile(cursor::CXCursor)::CXFile
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursor(var\"?1?\"::CXTranslationUnit, var\"?2?\"::CXSourceLocation)::CXCursor
	```
	
	 Map a source location to the cursor that describes the entity at that location in the source code.
	
	## Details
	
	 clang_getCursor() maps an arbitrary source location within a translation unit down to the most specific cursor that describes the entity at that location. For example, given an expression `x` + y, invoking clang_getCursor() with a source location pointing to \"x\" will return the cursor for \"x\"; similarly for \"y\". If the cursor points anywhere between \"x\" or \"y\" (e.g., on the + or the whitespace around it), clang_getCursor() will return a cursor referring to the \"+\" expression.
	
	## Returns
	
	 a cursor representing the entity at the given source location, or a NULL cursor if no such entity can be found.
	
	## Reference
	
	[Index.h:3076](./include/clang-c/Index.h:3076:25)
	""" clang_getCursor
	export clang_getCursor
	𝐣𝐥.@cextern clang_getCursor(var"?1?"::CXTranslationUnit, var"?2?"::CXSourceLocation)::CXCursor
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorLocation(var\"?1?\"::CXCursor)::CXSourceLocation
	```
	
	 Retrieve the physical location of the source constructor referenced by the given cursor.
	
	## Details
	
	 The location of a declaration is typically the location of the name of that declaration, where the name of that declaration would occur if it is unnamed, or some keyword that introduces that particular declaration. The location of a reference is where that reference occurs within the source code.
	
	## Reference
	
	[Index.h:3088](./include/clang-c/Index.h:3088:33)
	""" clang_getCursorLocation
	export clang_getCursorLocation
	𝐣𝐥.@cextern clang_getCursorLocation(var"?1?"::CXCursor)::CXSourceLocation
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorExtent(var\"?1?\"::CXCursor)::CXSourceRange
	```
	
	 Retrieve the physical extent of the source construct referenced by the given cursor.
	
	## Details
	
	 The extent of a cursor starts with the file/line/column pointing at the first character within the source construct that the cursor refers to and ends with the last character within that source construct. For a declaration, the extent covers the declaration itself. For a reference, the extent covers the location of the reference (e.g., where the referenced entity was actually used).
	
	## Reference
	
	[Index.h:3101](./include/clang-c/Index.h:3101:30)
	""" clang_getCursorExtent
	export clang_getCursorExtent
	𝐣𝐥.@cextern clang_getCursorExtent(var"?1?"::CXCursor)::CXSourceRange
	
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3181](./include/clang-c/Index.h:3181:3)
	""" CXType_Auto
	𝐣𝐥.@doc """
	 Describes the kind of type
	
	## Reference
	
	[Index.h:3116](./include/clang-c/Index.h:3116:6)
	""" CXTypeKind
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3166](./include/clang-c/Index.h:3166:3)
	""" CXType_LValueReference
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3161](./include/clang-c/Index.h:3161:3)
	""" CXType_LastBuiltin
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3194](./include/clang-c/Index.h:3194:3)
	""" CXType_OCLImage1dRO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3169](./include/clang-c/Index.h:3169:3)
	""" CXType_Enum
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3153](./include/clang-c/Index.h:3153:3)
	""" CXType_Dependent
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3222](./include/clang-c/Index.h:3222:3)
	""" CXType_OCLImage2dArrayRW
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3156](./include/clang-c/Index.h:3156:3)
	""" CXType_ObjCSel
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3165](./include/clang-c/Index.h:3165:3)
	""" CXType_BlockPointer
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3201](./include/clang-c/Index.h:3201:3)
	""" CXType_OCLImage2dMSAARO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3137](./include/clang-c/Index.h:3137:3)
	""" CXType_ULong
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3149](./include/clang-c/Index.h:3149:3)
	""" CXType_Double
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3148](./include/clang-c/Index.h:3148:3)
	""" CXType_Float
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3213](./include/clang-c/Index.h:3213:3)
	""" CXType_OCLImage2dMSAAWO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3135](./include/clang-c/Index.h:3135:3)
	""" CXType_UShort
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3228](./include/clang-c/Index.h:3228:3)
	""" CXType_OCLImage2dArrayMSAADepthRW
	𝐣𝐥.@doc """
	 Represents an invalid type (e.g., where no type is available).
	
	## Reference
	
	[Index.h:3120](./include/clang-c/Index.h:3120:3)
	""" CXType_Invalid
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3231](./include/clang-c/Index.h:3231:3)
	""" CXType_OCLEvent
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3209](./include/clang-c/Index.h:3209:3)
	""" CXType_OCLImage2dWO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3141](./include/clang-c/Index.h:3141:3)
	""" CXType_SChar
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3168](./include/clang-c/Index.h:3168:3)
	""" CXType_Record
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3206](./include/clang-c/Index.h:3206:3)
	""" CXType_OCLImage1dWO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3145](./include/clang-c/Index.h:3145:3)
	""" CXType_Long
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3212](./include/clang-c/Index.h:3212:3)
	""" CXType_OCLImage2dArrayDepthWO
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3211](./include/clang-c/Index.h:3211:3)
	""" CXType_OCLImage2dDepthWO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3130](./include/clang-c/Index.h:3130:3)
	""" CXType_Bool
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3220](./include/clang-c/Index.h:3220:3)
	""" CXType_OCLImage1dBufferRW
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3207](./include/clang-c/Index.h:3207:3)
	""" CXType_OCLImage1dArrayWO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3177](./include/clang-c/Index.h:3177:3)
	""" CXType_IncompleteArray
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3133](./include/clang-c/Index.h:3133:3)
	""" CXType_Char16
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3202](./include/clang-c/Index.h:3202:3)
	""" CXType_OCLImage2dArrayMSAARO
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3215](./include/clang-c/Index.h:3215:3)
	""" CXType_OCLImage2dMSAADepthWO
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3197](./include/clang-c/Index.h:3197:3)
	""" CXType_OCLImage2dRO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3171](./include/clang-c/Index.h:3171:3)
	""" CXType_ObjCInterface
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3229](./include/clang-c/Index.h:3229:3)
	""" CXType_OCLImage3dRW
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3178](./include/clang-c/Index.h:3178:3)
	""" CXType_VariableArray
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3167](./include/clang-c/Index.h:3167:3)
	""" CXType_RValueReference
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3170](./include/clang-c/Index.h:3170:3)
	""" CXType_Typedef
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3217](./include/clang-c/Index.h:3217:3)
	""" CXType_OCLImage3dWO
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3208](./include/clang-c/Index.h:3208:3)
	""" CXType_OCLImage1dBufferWO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3126](./include/clang-c/Index.h:3126:3)
	""" CXType_Unexposed
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3136](./include/clang-c/Index.h:3136:3)
	""" CXType_UInt
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3132](./include/clang-c/Index.h:3132:3)
	""" CXType_UChar
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3140](./include/clang-c/Index.h:3140:3)
	""" CXType_Char_S
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3131](./include/clang-c/Index.h:3131:3)
	""" CXType_Char_U
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3158](./include/clang-c/Index.h:3158:3)
	""" CXType_Half
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3150](./include/clang-c/Index.h:3150:3)
	""" CXType_LongDouble
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3195](./include/clang-c/Index.h:3195:3)
	""" CXType_OCLImage1dArrayRO
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3218](./include/clang-c/Index.h:3218:3)
	""" CXType_OCLImage1dRW
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3226](./include/clang-c/Index.h:3226:3)
	""" CXType_OCLImage2dArrayMSAARW
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3147](./include/clang-c/Index.h:3147:3)
	""" CXType_Int128
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3139](./include/clang-c/Index.h:3139:3)
	""" CXType_UInt128
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3157](./include/clang-c/Index.h:3157:3)
	""" CXType_Float128
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3196](./include/clang-c/Index.h:3196:3)
	""" CXType_OCLImage1dBufferRO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3134](./include/clang-c/Index.h:3134:3)
	""" CXType_Char32
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3221](./include/clang-c/Index.h:3221:3)
	""" CXType_OCLImage2dRW
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3172](./include/clang-c/Index.h:3172:3)
	""" CXType_ObjCObjectPointer
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3203](./include/clang-c/Index.h:3203:3)
	""" CXType_OCLImage2dMSAADepthRO
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3227](./include/clang-c/Index.h:3227:3)
	""" CXType_OCLImage2dMSAADepthRW
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3164](./include/clang-c/Index.h:3164:3)
	""" CXType_Pointer
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3198](./include/clang-c/Index.h:3198:3)
	""" CXType_OCLImage2dArrayRO
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3219](./include/clang-c/Index.h:3219:3)
	""" CXType_OCLImage1dArrayRW
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3223](./include/clang-c/Index.h:3223:3)
	""" CXType_OCLImage2dDepthRW
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3173](./include/clang-c/Index.h:3173:3)
	""" CXType_FunctionNoProto
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3138](./include/clang-c/Index.h:3138:3)
	""" CXType_ULongLong
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3191](./include/clang-c/Index.h:3191:3)
	""" CXType_Pipe
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3143](./include/clang-c/Index.h:3143:3)
	""" CXType_Short
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3129](./include/clang-c/Index.h:3129:3)
	""" CXType_Void
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3188](./include/clang-c/Index.h:3188:3)
	""" CXType_Elaborated
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3154](./include/clang-c/Index.h:3154:3)
	""" CXType_ObjCId
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3163](./include/clang-c/Index.h:3163:3)
	""" CXType_Complex
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3179](./include/clang-c/Index.h:3179:3)
	""" CXType_DependentSizedArray
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3232](./include/clang-c/Index.h:3232:3)
	""" CXType_OCLQueue
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3214](./include/clang-c/Index.h:3214:3)
	""" CXType_OCLImage2dArrayMSAAWO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3175](./include/clang-c/Index.h:3175:3)
	""" CXType_ConstantArray
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3152](./include/clang-c/Index.h:3152:3)
	""" CXType_Overload
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3216](./include/clang-c/Index.h:3216:3)
	""" CXType_OCLImage2dArrayMSAADepthWO
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3233](./include/clang-c/Index.h:3233:3)
	""" CXType_OCLReserveID
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3204](./include/clang-c/Index.h:3204:3)
	""" CXType_OCLImage2dArrayMSAADepthRO
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3225](./include/clang-c/Index.h:3225:3)
	""" CXType_OCLImage2dMSAARW
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3174](./include/clang-c/Index.h:3174:3)
	""" CXType_FunctionProto
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3205](./include/clang-c/Index.h:3205:3)
	""" CXType_OCLImage3dRO
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3230](./include/clang-c/Index.h:3230:3)
	""" CXType_OCLSampler
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3159](./include/clang-c/Index.h:3159:3)
	""" CXType_Float16
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3224](./include/clang-c/Index.h:3224:3)
	""" CXType_OCLImage2dArrayDepthRW
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3146](./include/clang-c/Index.h:3146:3)
	""" CXType_LongLong
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3200](./include/clang-c/Index.h:3200:3)
	""" CXType_OCLImage2dArrayDepthRO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3180](./include/clang-c/Index.h:3180:3)
	""" CXType_MemberPointer
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3160](./include/clang-c/Index.h:3160:3)
	""" CXType_FirstBuiltin
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3210](./include/clang-c/Index.h:3210:3)
	""" CXType_OCLImage2dArrayWO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3151](./include/clang-c/Index.h:3151:3)
	""" CXType_NullPtr
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3144](./include/clang-c/Index.h:3144:3)
	""" CXType_Int
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3155](./include/clang-c/Index.h:3155:3)
	""" CXType_ObjCClass
	𝐣𝐥.@doc """
	 Represents a type that was referred to using an elaborated type keyword.
	
	## Details
	
	 E.g., struct S, or via a qualified name, e.g., N::M::type, or both.
	
	## Reference
	
	[Index.h:3199](./include/clang-c/Index.h:3199:3)
	""" CXType_OCLImage2dDepthRO
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3142](./include/clang-c/Index.h:3142:3)
	""" CXType_WChar
	𝐣𝐥.@doc """
	 A type whose specific kind is not exposed via this interface.
	
	## Reference
	
	[Index.h:3176](./include/clang-c/Index.h:3176:3)
	""" CXType_Vector
	export CXTypeKind, CXType_Auto, CXType_BlockPointer, CXType_Bool, CXType_Char16, CXType_Char32, CXType_Char_S, CXType_Char_U, CXType_Complex, CXType_ConstantArray, CXType_Dependent, CXType_DependentSizedArray, CXType_Double, CXType_Elaborated, CXType_Enum, CXType_FirstBuiltin, CXType_Float, CXType_Float128, CXType_Float16, CXType_FunctionNoProto, CXType_FunctionProto, CXType_Half, CXType_IncompleteArray, CXType_Int, CXType_Int128, CXType_Invalid, CXType_LValueReference, CXType_LastBuiltin, CXType_Long, CXType_LongDouble, CXType_LongLong, CXType_MemberPointer, CXType_NullPtr, CXType_OCLEvent, CXType_OCLImage1dArrayRO, CXType_OCLImage1dArrayRW, CXType_OCLImage1dArrayWO, CXType_OCLImage1dBufferRO, CXType_OCLImage1dBufferRW, CXType_OCLImage1dBufferWO, CXType_OCLImage1dRO, CXType_OCLImage1dRW, CXType_OCLImage1dWO, CXType_OCLImage2dArrayDepthRO, CXType_OCLImage2dArrayDepthRW, CXType_OCLImage2dArrayDepthWO, CXType_OCLImage2dArrayMSAADepthRO, CXType_OCLImage2dArrayMSAADepthRW, CXType_OCLImage2dArrayMSAADepthWO, CXType_OCLImage2dArrayMSAARO, CXType_OCLImage2dArrayMSAARW, CXType_OCLImage2dArrayMSAAWO, CXType_OCLImage2dArrayRO, CXType_OCLImage2dArrayRW, CXType_OCLImage2dArrayWO, CXType_OCLImage2dDepthRO, CXType_OCLImage2dDepthRW, CXType_OCLImage2dDepthWO, CXType_OCLImage2dMSAADepthRO, CXType_OCLImage2dMSAADepthRW, CXType_OCLImage2dMSAADepthWO, CXType_OCLImage2dMSAARO, CXType_OCLImage2dMSAARW, CXType_OCLImage2dMSAAWO, CXType_OCLImage2dRO, CXType_OCLImage2dRW, CXType_OCLImage2dWO, CXType_OCLImage3dRO, CXType_OCLImage3dRW, CXType_OCLImage3dWO, CXType_OCLQueue, CXType_OCLReserveID, CXType_OCLSampler, CXType_ObjCClass, CXType_ObjCId, CXType_ObjCInterface, CXType_ObjCObjectPointer, CXType_ObjCSel, CXType_Overload, CXType_Pipe, CXType_Pointer, CXType_RValueReference, CXType_Record, CXType_SChar, CXType_Short, CXType_Typedef, CXType_UChar, CXType_UInt, CXType_UInt128, CXType_ULong, CXType_ULongLong, CXType_UShort, CXType_Unexposed, CXType_VariableArray, CXType_Vector, CXType_Void, CXType_WChar
	𝐣𝐥.@cenum CXTypeKind {
		CXType_Invalid = 𝐣𝐥.Cuint(0)
		CXType_Unexposed = 𝐣𝐥.Cuint(1)
		CXType_Void = 𝐣𝐥.Cuint(2)
		CXType_Bool = 𝐣𝐥.Cuint(3)
		CXType_Char_U = 𝐣𝐥.Cuint(4)
		CXType_UChar = 𝐣𝐥.Cuint(5)
		CXType_Char16 = 𝐣𝐥.Cuint(6)
		CXType_Char32 = 𝐣𝐥.Cuint(7)
		CXType_UShort = 𝐣𝐥.Cuint(8)
		CXType_UInt = 𝐣𝐥.Cuint(9)
		CXType_ULong = 𝐣𝐥.Cuint(10)
		CXType_ULongLong = 𝐣𝐥.Cuint(11)
		CXType_UInt128 = 𝐣𝐥.Cuint(12)
		CXType_Char_S = 𝐣𝐥.Cuint(13)
		CXType_SChar = 𝐣𝐥.Cuint(14)
		CXType_WChar = 𝐣𝐥.Cuint(15)
		CXType_Short = 𝐣𝐥.Cuint(16)
		CXType_Int = 𝐣𝐥.Cuint(17)
		CXType_Long = 𝐣𝐥.Cuint(18)
		CXType_LongLong = 𝐣𝐥.Cuint(19)
		CXType_Int128 = 𝐣𝐥.Cuint(20)
		CXType_Float = 𝐣𝐥.Cuint(21)
		CXType_Double = 𝐣𝐥.Cuint(22)
		CXType_LongDouble = 𝐣𝐥.Cuint(23)
		CXType_NullPtr = 𝐣𝐥.Cuint(24)
		CXType_Overload = 𝐣𝐥.Cuint(25)
		CXType_Dependent = 𝐣𝐥.Cuint(26)
		CXType_ObjCId = 𝐣𝐥.Cuint(27)
		CXType_ObjCClass = 𝐣𝐥.Cuint(28)
		CXType_ObjCSel = 𝐣𝐥.Cuint(29)
		CXType_Float128 = 𝐣𝐥.Cuint(30)
		CXType_Half = 𝐣𝐥.Cuint(31)
		CXType_Float16 = 𝐣𝐥.Cuint(32)
		CXType_FirstBuiltin = 𝐣𝐥.Cuint(2)
		CXType_LastBuiltin = 𝐣𝐥.Cuint(32)
		CXType_Complex = 𝐣𝐥.Cuint(100)
		CXType_Pointer = 𝐣𝐥.Cuint(101)
		CXType_BlockPointer = 𝐣𝐥.Cuint(102)
		CXType_LValueReference = 𝐣𝐥.Cuint(103)
		CXType_RValueReference = 𝐣𝐥.Cuint(104)
		CXType_Record = 𝐣𝐥.Cuint(105)
		CXType_Enum = 𝐣𝐥.Cuint(106)
		CXType_Typedef = 𝐣𝐥.Cuint(107)
		CXType_ObjCInterface = 𝐣𝐥.Cuint(108)
		CXType_ObjCObjectPointer = 𝐣𝐥.Cuint(109)
		CXType_FunctionNoProto = 𝐣𝐥.Cuint(110)
		CXType_FunctionProto = 𝐣𝐥.Cuint(111)
		CXType_ConstantArray = 𝐣𝐥.Cuint(112)
		CXType_Vector = 𝐣𝐥.Cuint(113)
		CXType_IncompleteArray = 𝐣𝐥.Cuint(114)
		CXType_VariableArray = 𝐣𝐥.Cuint(115)
		CXType_DependentSizedArray = 𝐣𝐥.Cuint(116)
		CXType_MemberPointer = 𝐣𝐥.Cuint(117)
		CXType_Auto = 𝐣𝐥.Cuint(118)
		CXType_Elaborated = 𝐣𝐥.Cuint(119)
		CXType_Pipe = 𝐣𝐥.Cuint(120)
		CXType_OCLImage1dRO = 𝐣𝐥.Cuint(121)
		CXType_OCLImage1dArrayRO = 𝐣𝐥.Cuint(122)
		CXType_OCLImage1dBufferRO = 𝐣𝐥.Cuint(123)
		CXType_OCLImage2dRO = 𝐣𝐥.Cuint(124)
		CXType_OCLImage2dArrayRO = 𝐣𝐥.Cuint(125)
		CXType_OCLImage2dDepthRO = 𝐣𝐥.Cuint(126)
		CXType_OCLImage2dArrayDepthRO = 𝐣𝐥.Cuint(127)
		CXType_OCLImage2dMSAARO = 𝐣𝐥.Cuint(128)
		CXType_OCLImage2dArrayMSAARO = 𝐣𝐥.Cuint(129)
		CXType_OCLImage2dMSAADepthRO = 𝐣𝐥.Cuint(130)
		CXType_OCLImage2dArrayMSAADepthRO = 𝐣𝐥.Cuint(131)
		CXType_OCLImage3dRO = 𝐣𝐥.Cuint(132)
		CXType_OCLImage1dWO = 𝐣𝐥.Cuint(133)
		CXType_OCLImage1dArrayWO = 𝐣𝐥.Cuint(134)
		CXType_OCLImage1dBufferWO = 𝐣𝐥.Cuint(135)
		CXType_OCLImage2dWO = 𝐣𝐥.Cuint(136)
		CXType_OCLImage2dArrayWO = 𝐣𝐥.Cuint(137)
		CXType_OCLImage2dDepthWO = 𝐣𝐥.Cuint(138)
		CXType_OCLImage2dArrayDepthWO = 𝐣𝐥.Cuint(139)
		CXType_OCLImage2dMSAAWO = 𝐣𝐥.Cuint(140)
		CXType_OCLImage2dArrayMSAAWO = 𝐣𝐥.Cuint(141)
		CXType_OCLImage2dMSAADepthWO = 𝐣𝐥.Cuint(142)
		CXType_OCLImage2dArrayMSAADepthWO = 𝐣𝐥.Cuint(143)
		CXType_OCLImage3dWO = 𝐣𝐥.Cuint(144)
		CXType_OCLImage1dRW = 𝐣𝐥.Cuint(145)
		CXType_OCLImage1dArrayRW = 𝐣𝐥.Cuint(146)
		CXType_OCLImage1dBufferRW = 𝐣𝐥.Cuint(147)
		CXType_OCLImage2dRW = 𝐣𝐥.Cuint(148)
		CXType_OCLImage2dArrayRW = 𝐣𝐥.Cuint(149)
		CXType_OCLImage2dDepthRW = 𝐣𝐥.Cuint(150)
		CXType_OCLImage2dArrayDepthRW = 𝐣𝐥.Cuint(151)
		CXType_OCLImage2dMSAARW = 𝐣𝐥.Cuint(152)
		CXType_OCLImage2dArrayMSAARW = 𝐣𝐥.Cuint(153)
		CXType_OCLImage2dMSAADepthRW = 𝐣𝐥.Cuint(154)
		CXType_OCLImage2dArrayMSAADepthRW = 𝐣𝐥.Cuint(155)
		CXType_OCLImage3dRW = 𝐣𝐥.Cuint(156)
		CXType_OCLSampler = 𝐣𝐥.Cuint(157)
		CXType_OCLEvent = 𝐣𝐥.Cuint(158)
		CXType_OCLQueue = 𝐣𝐥.Cuint(159)
		CXType_OCLReserveID = 𝐣𝐥.Cuint(160)
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3250](./include/clang-c/Index.h:3250:3)
	""" CXCallingConv_Win64
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3243](./include/clang-c/Index.h:3243:3)
	""" CXCallingConv_X86FastCall
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3255](./include/clang-c/Index.h:3255:3)
	""" CXCallingConv_Swift
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3240](./include/clang-c/Index.h:3240:3)
	""" CXCallingConv_Default
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3246](./include/clang-c/Index.h:3246:3)
	""" CXCallingConv_AAPCS
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3254](./include/clang-c/Index.h:3254:3)
	""" CXCallingConv_X86VectorCall
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3253](./include/clang-c/Index.h:3253:3)
	""" CXCallingConv_X86_64SysV
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3257](./include/clang-c/Index.h:3257:3)
	""" CXCallingConv_PreserveAll
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3248](./include/clang-c/Index.h:3248:3)
	""" CXCallingConv_X86RegCall
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3249](./include/clang-c/Index.h:3249:3)
	""" CXCallingConv_IntelOclBicc
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3259](./include/clang-c/Index.h:3259:3)
	""" CXCallingConv_Invalid
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3244](./include/clang-c/Index.h:3244:3)
	""" CXCallingConv_X86ThisCall
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3241](./include/clang-c/Index.h:3241:3)
	""" CXCallingConv_C
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3245](./include/clang-c/Index.h:3245:3)
	""" CXCallingConv_X86Pascal
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3247](./include/clang-c/Index.h:3247:3)
	""" CXCallingConv_AAPCS_VFP
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3252](./include/clang-c/Index.h:3252:3)
	""" CXCallingConv_X86_64Win64
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3242](./include/clang-c/Index.h:3242:3)
	""" CXCallingConv_X86StdCall
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3256](./include/clang-c/Index.h:3256:3)
	""" CXCallingConv_PreserveMost
	𝐣𝐥.@doc """
	 Describes the calling convention of a function type
	
	## Reference
	
	[Index.h:3239](./include/clang-c/Index.h:3239:6)
	""" CXCallingConv
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3260](./include/clang-c/Index.h:3260:3)
	""" CXCallingConv_Unexposed
	export CXCallingConv, CXCallingConv_AAPCS, CXCallingConv_AAPCS_VFP, CXCallingConv_C, CXCallingConv_Default, CXCallingConv_IntelOclBicc, CXCallingConv_Invalid, CXCallingConv_PreserveAll, CXCallingConv_PreserveMost, CXCallingConv_Swift, CXCallingConv_Unexposed, CXCallingConv_Win64, CXCallingConv_X86FastCall, CXCallingConv_X86Pascal, CXCallingConv_X86RegCall, CXCallingConv_X86StdCall, CXCallingConv_X86ThisCall, CXCallingConv_X86VectorCall, CXCallingConv_X86_64SysV, CXCallingConv_X86_64Win64
	𝐣𝐥.@cenum CXCallingConv {
		CXCallingConv_Default = 𝐣𝐥.Cuint(0)
		CXCallingConv_C = 𝐣𝐥.Cuint(1)
		CXCallingConv_X86StdCall = 𝐣𝐥.Cuint(2)
		CXCallingConv_X86FastCall = 𝐣𝐥.Cuint(3)
		CXCallingConv_X86ThisCall = 𝐣𝐥.Cuint(4)
		CXCallingConv_X86Pascal = 𝐣𝐥.Cuint(5)
		CXCallingConv_AAPCS = 𝐣𝐥.Cuint(6)
		CXCallingConv_AAPCS_VFP = 𝐣𝐥.Cuint(7)
		CXCallingConv_X86RegCall = 𝐣𝐥.Cuint(8)
		CXCallingConv_IntelOclBicc = 𝐣𝐥.Cuint(9)
		CXCallingConv_Win64 = 𝐣𝐥.Cuint(10)
		CXCallingConv_X86_64Win64 = 𝐣𝐥.Cuint(10)
		CXCallingConv_X86_64SysV = 𝐣𝐥.Cuint(11)
		CXCallingConv_X86VectorCall = 𝐣𝐥.Cuint(12)
		CXCallingConv_Swift = 𝐣𝐥.Cuint(13)
		CXCallingConv_PreserveMost = 𝐣𝐥.Cuint(14)
		CXCallingConv_PreserveAll = 𝐣𝐥.Cuint(15)
		CXCallingConv_Invalid = 𝐣𝐥.Cuint(100)
		CXCallingConv_Unexposed = 𝐣𝐥.Cuint(200)
	}
	
	𝐣𝐥.@doc """
	 The type of an element in the abstract syntax tree.
	
	## Reference
	
	[Index.h:3270](./include/clang-c/Index.h:3270:3)
	""" CXType
	export CXType
	𝐣𝐥.@ctypedef CXType 𝐣𝐥.@cstruct {
		kind::𝐣𝐥.@cenum CXTypeKind
		data::𝐣𝐥.Ptr{𝐣𝐥.Cvoid}[2]
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorType(C::CXCursor)::CXType
	```
	
	 Retrieve the type of a CXCursor (if any).
	
	## Reference
	
	[Index.h:3275](./include/clang-c/Index.h:3275:23)
	""" clang_getCursorType
	export clang_getCursorType
	𝐣𝐥.@cextern clang_getCursorType(C::CXCursor)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTypeSpelling(CT::CXType)::CXString
	```
	
	 Pretty-print the underlying type using the rules of the language of the translation unit from which it came.
	
	## Details
	
	 If the type is invalid, an empty string is returned.
	
	## Reference
	
	[Index.h:3283](./include/clang-c/Index.h:3283:25)
	""" clang_getTypeSpelling
	export clang_getTypeSpelling
	𝐣𝐥.@cextern clang_getTypeSpelling(CT::CXType)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTypedefDeclUnderlyingType(C::CXCursor)::CXType
	```
	
	 Retrieve the underlying type of a typedef declaration.
	
	## Details
	
	 If the cursor does not reference a typedef declaration, an invalid type is returned.
	
	## Reference
	
	[Index.h:3291](./include/clang-c/Index.h:3291:23)
	""" clang_getTypedefDeclUnderlyingType
	export clang_getTypedefDeclUnderlyingType
	𝐣𝐥.@cextern clang_getTypedefDeclUnderlyingType(C::CXCursor)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getEnumDeclIntegerType(C::CXCursor)::CXType
	```
	
	 Retrieve the integer type of an enum declaration.
	
	## Details
	
	 If the cursor does not reference an enum declaration, an invalid type is returned.
	
	## Reference
	
	[Index.h:3299](./include/clang-c/Index.h:3299:23)
	""" clang_getEnumDeclIntegerType
	export clang_getEnumDeclIntegerType
	𝐣𝐥.@cextern clang_getEnumDeclIntegerType(C::CXCursor)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getEnumConstantDeclValue(C::CXCursor)::𝐣𝐥.Clonglong
	```
	
	 Retrieve the integer value of an enum constant declaration as a signed  long long.
	
	## Details
	
	 If the cursor does not reference an enum constant declaration, LLONG_MIN is returned. Since this is also potentially a valid constant value, the kind of the cursor must be verified before calling this function.
	
	## Reference
	
	[Index.h:3309](./include/clang-c/Index.h:3309:26)
	""" clang_getEnumConstantDeclValue
	export clang_getEnumConstantDeclValue
	𝐣𝐥.@cextern clang_getEnumConstantDeclValue(C::CXCursor)::𝐣𝐥.Clonglong
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getEnumConstantDeclUnsignedValue(C::CXCursor)::𝐣𝐥.Culonglong
	```
	
	 Retrieve the integer value of an enum constant declaration as an unsigned  long long.
	
	## Details
	
	 If the cursor does not reference an enum constant declaration, ULLONG_MAX is returned. Since this is also potentially a valid constant value, the kind of the cursor must be verified before calling this function.
	
	## Reference
	
	[Index.h:3319](./include/clang-c/Index.h:3319:35)
	""" clang_getEnumConstantDeclUnsignedValue
	export clang_getEnumConstantDeclUnsignedValue
	𝐣𝐥.@cextern clang_getEnumConstantDeclUnsignedValue(C::CXCursor)::𝐣𝐥.Culonglong
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getFieldDeclBitWidth(C::CXCursor)::𝐣𝐥.Cint
	```
	
	 Retrieve the bit width of a bit field declaration as an integer.
	
	## Details
	
	 If a cursor that is not a bit field declaration is passed in, -1 is returned.
	
	## Reference
	
	[Index.h:3326](./include/clang-c/Index.h:3326:20)
	""" clang_getFieldDeclBitWidth
	export clang_getFieldDeclBitWidth
	𝐣𝐥.@cextern clang_getFieldDeclBitWidth(C::CXCursor)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getNumArguments(C::CXCursor)::𝐣𝐥.Cint
	```
	
	 Retrieve the number of non-variadic arguments associated with a given cursor.
	
	## Details
	
	 The number of arguments can be determined for calls as well as for declarations of functions or methods. For other cursors -1 is returned.
	
	## Reference
	
	[Index.h:3335](./include/clang-c/Index.h:3335:20)
	""" clang_Cursor_getNumArguments
	export clang_Cursor_getNumArguments
	𝐣𝐥.@cextern clang_Cursor_getNumArguments(C::CXCursor)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getArgument(C::CXCursor, i::𝐣𝐥.Cuint)::CXCursor
	```
	
	 Retrieve the argument cursor of a function or method.
	
	## Details
	
	 The argument cursor can be determined for calls as well as for declarations of functions or methods. For other cursors and for invalid indices, an invalid cursor is returned.
	
	## Reference
	
	[Index.h:3344](./include/clang-c/Index.h:3344:25)
	""" clang_Cursor_getArgument
	export clang_Cursor_getArgument
	𝐣𝐥.@cextern clang_Cursor_getArgument(C::CXCursor, i::𝐣𝐥.Cuint)::CXCursor
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3354](./include/clang-c/Index.h:3354:3)
	""" CXTemplateArgumentKind_Type
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3355](./include/clang-c/Index.h:3355:3)
	""" CXTemplateArgumentKind_Declaration
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3361](./include/clang-c/Index.h:3361:3)
	""" CXTemplateArgumentKind_Pack
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3360](./include/clang-c/Index.h:3360:3)
	""" CXTemplateArgumentKind_Expression
	𝐣𝐥.@doc """
	 Describes the kind of a template argument.
	
	## Details
	
	 See the definition of llvm::clang::TemplateArgument::ArgKind for full element descriptions.
	
	## Reference
	
	[Index.h:3352](./include/clang-c/Index.h:3352:6)
	""" CXTemplateArgumentKind
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3358](./include/clang-c/Index.h:3358:3)
	""" CXTemplateArgumentKind_Template
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3353](./include/clang-c/Index.h:3353:3)
	""" CXTemplateArgumentKind_Null
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3359](./include/clang-c/Index.h:3359:3)
	""" CXTemplateArgumentKind_TemplateExpansion
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3363](./include/clang-c/Index.h:3363:3)
	""" CXTemplateArgumentKind_Invalid
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3356](./include/clang-c/Index.h:3356:3)
	""" CXTemplateArgumentKind_NullPtr
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3357](./include/clang-c/Index.h:3357:3)
	""" CXTemplateArgumentKind_Integral
	export CXTemplateArgumentKind, CXTemplateArgumentKind_Declaration, CXTemplateArgumentKind_Expression, CXTemplateArgumentKind_Integral, CXTemplateArgumentKind_Invalid, CXTemplateArgumentKind_Null, CXTemplateArgumentKind_NullPtr, CXTemplateArgumentKind_Pack, CXTemplateArgumentKind_Template, CXTemplateArgumentKind_TemplateExpansion, CXTemplateArgumentKind_Type
	𝐣𝐥.@cenum CXTemplateArgumentKind {
		CXTemplateArgumentKind_Null = 𝐣𝐥.Cuint(0)
		CXTemplateArgumentKind_Type = 𝐣𝐥.Cuint(1)
		CXTemplateArgumentKind_Declaration = 𝐣𝐥.Cuint(2)
		CXTemplateArgumentKind_NullPtr = 𝐣𝐥.Cuint(3)
		CXTemplateArgumentKind_Integral = 𝐣𝐥.Cuint(4)
		CXTemplateArgumentKind_Template = 𝐣𝐥.Cuint(5)
		CXTemplateArgumentKind_TemplateExpansion = 𝐣𝐥.Cuint(6)
		CXTemplateArgumentKind_Expression = 𝐣𝐥.Cuint(7)
		CXTemplateArgumentKind_Pack = 𝐣𝐥.Cuint(8)
		CXTemplateArgumentKind_Invalid = 𝐣𝐥.Cuint(9)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getNumTemplateArguments(C::CXCursor)::𝐣𝐥.Cint
	```
	
	 Returns the number of template args of a function decl representing a template specialization.
	
	## Details
	
	 If the argument cursor cannot be converted into a template function declaration, -1 is returned.
	
	 For example, for the following declaration and specialization:   template <typename T, int kInt, bool kBool>   void foo() { ... }
	
	   template <>   void foo<float, -7, true>();
	
	 The value 3 would be returned from this call.
	
	## Reference
	
	[Index.h:3382](./include/clang-c/Index.h:3382:20)
	""" clang_Cursor_getNumTemplateArguments
	export clang_Cursor_getNumTemplateArguments
	𝐣𝐥.@cextern clang_Cursor_getNumTemplateArguments(C::CXCursor)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getTemplateArgumentKind(C::CXCursor, I::𝐣𝐥.Cuint)::𝐣𝐥.@cenum CXTemplateArgumentKind
	```
	
	 Retrieve the kind of the I'th template argument of the CXCursor C.
	
	## Details
	
	 If the argument CXCursor does not represent a FunctionDecl, an invalid template argument kind is returned.
	
	 For example, for the following declaration and specialization:   template <typename T, int kInt, bool kBool>   void foo() { ... }
	
	   template <>   void foo<float, -7, true>();
	
	 For I = 0, 1, and 2, Type, Integral, and Integral will be returned, respectively.
	
	## Reference
	
	[Index.h:3400](./include/clang-c/Index.h:3400:44)
	""" clang_Cursor_getTemplateArgumentKind
	export clang_Cursor_getTemplateArgumentKind
	𝐣𝐥.@cextern clang_Cursor_getTemplateArgumentKind(C::CXCursor, I::𝐣𝐥.Cuint)::𝐣𝐥.@cenum CXTemplateArgumentKind
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getTemplateArgumentType(C::CXCursor, I::𝐣𝐥.Cuint)::CXType
	```
	
	 Retrieve a CXType representing the type of a TemplateArgument of a  function decl representing a template specialization.
	
	## Details
	
	 If the argument CXCursor does not represent a FunctionDecl whose I'th template argument has a kind of CXTemplateArgKind_Integral, an invalid type is returned.
	
	 For example, for the following declaration and specialization:   template <typename T, int kInt, bool kBool>   void foo() { ... }
	
	   template <>   void foo<float, -7, true>();
	
	 If called with I = 0, \"float\", will be returned. Invalid types will be returned for I == 1 or 2.
	
	## Reference
	
	[Index.h:3421](./include/clang-c/Index.h:3421:23)
	""" clang_Cursor_getTemplateArgumentType
	export clang_Cursor_getTemplateArgumentType
	𝐣𝐥.@cextern clang_Cursor_getTemplateArgumentType(C::CXCursor, I::𝐣𝐥.Cuint)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getTemplateArgumentValue(C::CXCursor, I::𝐣𝐥.Cuint)::𝐣𝐥.Clonglong
	```
	
	 Retrieve the value of an Integral TemplateArgument (of a function  decl representing a template specialization) as a signed long long.
	
	## Details
	
	 It is undefined to call this function on a CXCursor that does not represent a FunctionDecl or whose I'th template argument is not an integral value.
	
	 For example, for the following declaration and specialization:   template <typename T, int kInt, bool kBool>   void foo() { ... }
	
	   template <>   void foo<float, -7, true>();
	
	 If called with I = 1 or 2, -7 or true will be returned, respectively. For I == 0, this function's behavior is undefined.
	
	## Reference
	
	[Index.h:3441](./include/clang-c/Index.h:3441:26)
	""" clang_Cursor_getTemplateArgumentValue
	export clang_Cursor_getTemplateArgumentValue
	𝐣𝐥.@cextern clang_Cursor_getTemplateArgumentValue(C::CXCursor, I::𝐣𝐥.Cuint)::𝐣𝐥.Clonglong
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getTemplateArgumentUnsignedValue(C::CXCursor, I::𝐣𝐥.Cuint)::𝐣𝐥.Culonglong
	```
	
	 Retrieve the value of an Integral TemplateArgument (of a function  decl representing a template specialization) as an unsigned long long.
	
	## Details
	
	 It is undefined to call this function on a CXCursor that does not represent a FunctionDecl or whose I'th template argument is not an integral value.
	
	 For example, for the following declaration and specialization:   template <typename T, int kInt, bool kBool>   void foo() { ... }
	
	   template <>   void foo<float, 2147483649, true>();
	
	 If called with I = 1 or 2, 2147483649 or true will be returned, respectively. For I == 0, this function's behavior is undefined.
	
	## Reference
	
	[Index.h:3461](./include/clang-c/Index.h:3461:35)
	""" clang_Cursor_getTemplateArgumentUnsignedValue
	export clang_Cursor_getTemplateArgumentUnsignedValue
	𝐣𝐥.@cextern clang_Cursor_getTemplateArgumentUnsignedValue(C::CXCursor, I::𝐣𝐥.Cuint)::𝐣𝐥.Culonglong
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_equalTypes(A::CXType, B::CXType)::𝐣𝐥.Cuint
	```
	
	 Determine whether two CXTypes represent the same type.
	
	## Returns
	
	 non-zero if the CXTypes represent the same type and          zero otherwise.
	
	## Reference
	
	[Index.h:3470](./include/clang-c/Index.h:3470:25)
	""" clang_equalTypes
	export clang_equalTypes
	𝐣𝐥.@cextern clang_equalTypes(A::CXType, B::CXType)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCanonicalType(T::CXType)::CXType
	```
	
	 Return the canonical type for a CXType.
	
	## Details
	
	 Clang's type system explicitly models typedefs and all the ways a specific type can be represented.  The canonical type is the underlying type with all the \"sugar\" removed.  For example, if 'T' is a typedef for 'int', the canonical type for 'T' would be 'int'.
	
	## Reference
	
	[Index.h:3480](./include/clang-c/Index.h:3480:23)
	""" clang_getCanonicalType
	export clang_getCanonicalType
	𝐣𝐥.@cextern clang_getCanonicalType(T::CXType)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isConstQualifiedType(T::CXType)::𝐣𝐥.Cuint
	```
	
	 Determine whether a CXType has the \"const\" qualifier set, without looking through typedefs that may have added \"const\" at a different level.
	
	## Reference
	
	[Index.h:3487](./include/clang-c/Index.h:3487:25)
	""" clang_isConstQualifiedType
	export clang_isConstQualifiedType
	𝐣𝐥.@cextern clang_isConstQualifiedType(T::CXType)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_isMacroFunctionLike(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine whether a  CXCursor that is a macro, is function like.
	
	## Reference
	
	[Index.h:3493](./include/clang-c/Index.h:3493:25)
	""" clang_Cursor_isMacroFunctionLike
	export clang_Cursor_isMacroFunctionLike
	𝐣𝐥.@cextern clang_Cursor_isMacroFunctionLike(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_isMacroBuiltin(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine whether a  CXCursor that is a macro, is a builtin one.
	
	## Reference
	
	[Index.h:3499](./include/clang-c/Index.h:3499:25)
	""" clang_Cursor_isMacroBuiltin
	export clang_Cursor_isMacroBuiltin
	𝐣𝐥.@cextern clang_Cursor_isMacroBuiltin(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_isFunctionInlined(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine whether a  CXCursor that is a function declaration, is an inline declaration.
	
	## Reference
	
	[Index.h:3505](./include/clang-c/Index.h:3505:25)
	""" clang_Cursor_isFunctionInlined
	export clang_Cursor_isFunctionInlined
	𝐣𝐥.@cextern clang_Cursor_isFunctionInlined(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isVolatileQualifiedType(T::CXType)::𝐣𝐥.Cuint
	```
	
	 Determine whether a CXType has the \"volatile\" qualifier set, without looking through typedefs that may have added \"volatile\" at a different level.
	
	## Reference
	
	[Index.h:3512](./include/clang-c/Index.h:3512:25)
	""" clang_isVolatileQualifiedType
	export clang_isVolatileQualifiedType
	𝐣𝐥.@cextern clang_isVolatileQualifiedType(T::CXType)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isRestrictQualifiedType(T::CXType)::𝐣𝐥.Cuint
	```
	
	 Determine whether a CXType has the \"restrict\" qualifier set, without looking through typedefs that may have added \"restrict\" at a different level.
	
	## Reference
	
	[Index.h:3519](./include/clang-c/Index.h:3519:25)
	""" clang_isRestrictQualifiedType
	export clang_isRestrictQualifiedType
	𝐣𝐥.@cextern clang_isRestrictQualifiedType(T::CXType)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getAddressSpace(T::CXType)::𝐣𝐥.Cuint
	```
	
	 Returns the address space of the given type.
	
	## Reference
	
	[Index.h:3524](./include/clang-c/Index.h:3524:25)
	""" clang_getAddressSpace
	export clang_getAddressSpace
	𝐣𝐥.@cextern clang_getAddressSpace(T::CXType)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTypedefName(CT::CXType)::CXString
	```
	
	 Returns the typedef name of the given type.
	
	## Reference
	
	[Index.h:3529](./include/clang-c/Index.h:3529:25)
	""" clang_getTypedefName
	export clang_getTypedefName
	𝐣𝐥.@cextern clang_getTypedefName(CT::CXType)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getPointeeType(T::CXType)::CXType
	```
	
	 For pointer types, returns the type of the pointee.
	
	## Reference
	
	[Index.h:3534](./include/clang-c/Index.h:3534:23)
	""" clang_getPointeeType
	export clang_getPointeeType
	𝐣𝐥.@cextern clang_getPointeeType(T::CXType)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTypeDeclaration(T::CXType)::CXCursor
	```
	
	 Return the cursor for the declaration of the given type.
	
	## Reference
	
	[Index.h:3539](./include/clang-c/Index.h:3539:25)
	""" clang_getTypeDeclaration
	export clang_getTypeDeclaration
	𝐣𝐥.@cextern clang_getTypeDeclaration(T::CXType)::CXCursor
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDeclObjCTypeEncoding(C::CXCursor)::CXString
	```
	
	 Returns the Objective-C type encoding for the specified declaration.
	
	## Reference
	
	[Index.h:3544](./include/clang-c/Index.h:3544:25)
	""" clang_getDeclObjCTypeEncoding
	export clang_getDeclObjCTypeEncoding
	𝐣𝐥.@cextern clang_getDeclObjCTypeEncoding(C::CXCursor)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Type_getObjCEncoding(var\"type\"::CXType)::CXString
	```
	
	 Returns the Objective-C type encoding for the specified CXType.
	
	## Reference
	
	[Index.h:3549](./include/clang-c/Index.h:3549:25)
	""" clang_Type_getObjCEncoding
	export clang_Type_getObjCEncoding
	𝐣𝐥.@cextern clang_Type_getObjCEncoding(var"type"::CXType)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTypeKindSpelling(K::𝐣𝐥.@cenum CXTypeKind)::CXString
	```
	
	 Retrieve the spelling of a given CXTypeKind.
	
	## Reference
	
	[Index.h:3554](./include/clang-c/Index.h:3554:25)
	""" clang_getTypeKindSpelling
	export clang_getTypeKindSpelling
	𝐣𝐥.@cextern clang_getTypeKindSpelling(K::𝐣𝐥.@cenum CXTypeKind)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getFunctionTypeCallingConv(T::CXType)::𝐣𝐥.@cenum CXCallingConv
	```
	
	 Retrieve the calling convention associated with a function type.
	
	## Details
	
	 If a non-function type is passed in, CXCallingConv_Invalid is returned.
	
	## Reference
	
	[Index.h:3561](./include/clang-c/Index.h:3561:35)
	""" clang_getFunctionTypeCallingConv
	export clang_getFunctionTypeCallingConv
	𝐣𝐥.@cextern clang_getFunctionTypeCallingConv(T::CXType)::𝐣𝐥.@cenum CXCallingConv
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getResultType(T::CXType)::CXType
	```
	
	 Retrieve the return type associated with a function type.
	
	## Details
	
	 If a non-function type is passed in, an invalid type is returned.
	
	## Reference
	
	[Index.h:3568](./include/clang-c/Index.h:3568:23)
	""" clang_getResultType
	export clang_getResultType
	𝐣𝐥.@cextern clang_getResultType(T::CXType)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getExceptionSpecificationType(T::CXType)::𝐣𝐥.Cint
	```
	
	 Retrieve the exception specification type associated with a function type.
	
	## Details
	
	 If a non-function type is passed in, an error code of -1 is returned.
	
	## Reference
	
	[Index.h:3575](./include/clang-c/Index.h:3575:20)
	""" clang_getExceptionSpecificationType
	export clang_getExceptionSpecificationType
	𝐣𝐥.@cextern clang_getExceptionSpecificationType(T::CXType)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getNumArgTypes(T::CXType)::𝐣𝐥.Cint
	```
	
	 Retrieve the number of non-variadic parameters associated with a function type.
	
	## Details
	
	 If a non-function type is passed in, -1 is returned.
	
	## Reference
	
	[Index.h:3583](./include/clang-c/Index.h:3583:20)
	""" clang_getNumArgTypes
	export clang_getNumArgTypes
	𝐣𝐥.@cextern clang_getNumArgTypes(T::CXType)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getArgType(T::CXType, i::𝐣𝐥.Cuint)::CXType
	```
	
	 Retrieve the type of a parameter of a function type.
	
	## Details
	
	 If a non-function type is passed in or the function does not have enough parameters, an invalid type is returned.
	
	## Reference
	
	[Index.h:3591](./include/clang-c/Index.h:3591:23)
	""" clang_getArgType
	export clang_getArgType
	𝐣𝐥.@cextern clang_getArgType(T::CXType, i::𝐣𝐥.Cuint)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isFunctionTypeVariadic(T::CXType)::𝐣𝐥.Cuint
	```
	
	 Return 1 if the CXType is a variadic function type, and 0 otherwise.
	
	## Reference
	
	[Index.h:3596](./include/clang-c/Index.h:3596:25)
	""" clang_isFunctionTypeVariadic
	export clang_isFunctionTypeVariadic
	𝐣𝐥.@cextern clang_isFunctionTypeVariadic(T::CXType)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorResultType(C::CXCursor)::CXType
	```
	
	 Retrieve the return type associated with a given cursor.
	
	## Details
	
	 This only returns a valid type if the cursor refers to a function or method.
	
	## Reference
	
	[Index.h:3603](./include/clang-c/Index.h:3603:23)
	""" clang_getCursorResultType
	export clang_getCursorResultType
	𝐣𝐥.@cextern clang_getCursorResultType(C::CXCursor)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorExceptionSpecificationType(C::CXCursor)::𝐣𝐥.Cint
	```
	
	 Retrieve the exception specification type associated with a given cursor.
	
	## Details
	
	 This only returns a valid result if the cursor refers to a function or method.
	
	## Reference
	
	[Index.h:3610](./include/clang-c/Index.h:3610:20)
	""" clang_getCursorExceptionSpecificationType
	export clang_getCursorExceptionSpecificationType
	𝐣𝐥.@cextern clang_getCursorExceptionSpecificationType(C::CXCursor)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isPODType(T::CXType)::𝐣𝐥.Cuint
	```
	
	 Return 1 if the CXType is a POD (plain old data) type, and 0  otherwise.
	
	## Reference
	
	[Index.h:3616](./include/clang-c/Index.h:3616:25)
	""" clang_isPODType
	export clang_isPODType
	𝐣𝐥.@cextern clang_isPODType(T::CXType)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getElementType(T::CXType)::CXType
	```
	
	 Return the element type of an array, complex, or vector type.
	
	## Details
	
	 If a type is passed in that is not an array, complex, or vector type, an invalid type is returned.
	
	## Reference
	
	[Index.h:3624](./include/clang-c/Index.h:3624:23)
	""" clang_getElementType
	export clang_getElementType
	𝐣𝐥.@cextern clang_getElementType(T::CXType)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getNumElements(T::CXType)::𝐣𝐥.Clonglong
	```
	
	 Return the number of elements of an array or vector type.
	
	## Details
	
	 If a type is passed in that is not an array or vector type, -1 is returned.
	
	## Reference
	
	[Index.h:3632](./include/clang-c/Index.h:3632:26)
	""" clang_getNumElements
	export clang_getNumElements
	𝐣𝐥.@cextern clang_getNumElements(T::CXType)::𝐣𝐥.Clonglong
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getArrayElementType(T::CXType)::CXType
	```
	
	 Return the element type of an array type.
	
	## Details
	
	 If a non-array type is passed in, an invalid type is returned.
	
	## Reference
	
	[Index.h:3639](./include/clang-c/Index.h:3639:23)
	""" clang_getArrayElementType
	export clang_getArrayElementType
	𝐣𝐥.@cextern clang_getArrayElementType(T::CXType)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getArraySize(T::CXType)::𝐣𝐥.Clonglong
	```
	
	 Return the array size of a constant array.
	
	## Details
	
	 If a non-array type is passed in, -1 is returned.
	
	## Reference
	
	[Index.h:3646](./include/clang-c/Index.h:3646:26)
	""" clang_getArraySize
	export clang_getArraySize
	𝐣𝐥.@cextern clang_getArraySize(T::CXType)::𝐣𝐥.Clonglong
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Type_getNamedType(T::CXType)::CXType
	```
	
	 Retrieve the type named by the qualified-id.
	
	## Details
	
	 If a non-elaborated type is passed in, an invalid type is returned.
	
	## Reference
	
	[Index.h:3653](./include/clang-c/Index.h:3653:23)
	""" clang_Type_getNamedType
	export clang_Type_getNamedType
	𝐣𝐥.@cextern clang_Type_getNamedType(T::CXType)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Type_isTransparentTagTypedef(T::CXType)::𝐣𝐥.Cuint
	```
	
	 Determine if a typedef is 'transparent' tag.
	
	## Details
	
	 A typedef is considered 'transparent' if it shares a name and spelling location with its underlying tag type, as is the case with the NS_ENUM macro.
	
	## Returns
	
	 non-zero if transparent and zero otherwise.
	
	## Reference
	
	[Index.h:3663](./include/clang-c/Index.h:3663:25)
	""" clang_Type_isTransparentTagTypedef
	export clang_Type_isTransparentTagTypedef
	𝐣𝐥.@cextern clang_Type_isTransparentTagTypedef(T::CXType)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	 The type is a dependent Type.
	
	## Reference
	
	[Index.h:3685](./include/clang-c/Index.h:3685:3)
	""" CXTypeLayoutError_Dependent
	𝐣𝐥.@doc """
	 List the possible error codes for `clang_Type_getSizeOf,`   `clang_Type_getAlignOf,` `clang_Type_getOffsetOf` and   `clang_Cursor_getOffsetOf.`
	
	## Details
	
	 A value of this enumeration type can be returned if the target type is not a valid argument to sizeof, alignof or offsetof.
	
	## Reference
	
	[Index.h:3673](./include/clang-c/Index.h:3673:6)
	""" CXTypeLayoutError
	𝐣𝐥.@doc """
	 The Field name is not valid for this record.
	
	## Reference
	
	[Index.h:3693](./include/clang-c/Index.h:3693:3)
	""" CXTypeLayoutError_InvalidFieldName
	𝐣𝐥.@doc """
	 The type is not a constant size type.
	
	## Reference
	
	[Index.h:3689](./include/clang-c/Index.h:3689:3)
	""" CXTypeLayoutError_NotConstantSize
	𝐣𝐥.@doc """
	 Type is of kind CXType_Invalid.
	
	## Reference
	
	[Index.h:3677](./include/clang-c/Index.h:3677:3)
	""" CXTypeLayoutError_Invalid
	𝐣𝐥.@doc """
	 The type is an incomplete Type.
	
	## Reference
	
	[Index.h:3681](./include/clang-c/Index.h:3681:3)
	""" CXTypeLayoutError_Incomplete
	export CXTypeLayoutError, CXTypeLayoutError_Dependent, CXTypeLayoutError_Incomplete, CXTypeLayoutError_Invalid, CXTypeLayoutError_InvalidFieldName, CXTypeLayoutError_NotConstantSize
	𝐣𝐥.@cenum CXTypeLayoutError {
		CXTypeLayoutError_Invalid = 𝐣𝐥.Cint(-1)
		CXTypeLayoutError_Incomplete = 𝐣𝐥.Cint(-2)
		CXTypeLayoutError_Dependent = 𝐣𝐥.Cint(-3)
		CXTypeLayoutError_NotConstantSize = 𝐣𝐥.Cint(-4)
		CXTypeLayoutError_InvalidFieldName = 𝐣𝐥.Cint(-5)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Type_getAlignOf(T::CXType)::𝐣𝐥.Clonglong
	```
	
	 Return the alignment of a type in bytes as per C++[expr.alignof]   standard.
	
	## Details
	
	 If the type declaration is invalid, CXTypeLayoutError_Invalid is returned. If the type declaration is an incomplete type, CXTypeLayoutError_Incomplete   is returned. If the type declaration is a dependent type, CXTypeLayoutError_Dependent is   returned. If the type declaration is not a constant size type,   CXTypeLayoutError_NotConstantSize is returned.
	
	## Reference
	
	[Index.h:3708](./include/clang-c/Index.h:3708:26)
	""" clang_Type_getAlignOf
	export clang_Type_getAlignOf
	𝐣𝐥.@cextern clang_Type_getAlignOf(T::CXType)::𝐣𝐥.Clonglong
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Type_getClassType(T::CXType)::CXType
	```
	
	 Return the class type of an member pointer type.
	
	## Details
	
	 If a non-member-pointer type is passed in, an invalid type is returned.
	
	## Reference
	
	[Index.h:3715](./include/clang-c/Index.h:3715:23)
	""" clang_Type_getClassType
	export clang_Type_getClassType
	𝐣𝐥.@cextern clang_Type_getClassType(T::CXType)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Type_getSizeOf(T::CXType)::𝐣𝐥.Clonglong
	```
	
	 Return the size of a type in bytes as per C++[expr.sizeof] standard.
	
	## Details
	
	 If the type declaration is invalid, CXTypeLayoutError_Invalid is returned. If the type declaration is an incomplete type, CXTypeLayoutError_Incomplete   is returned. If the type declaration is a dependent type, CXTypeLayoutError_Dependent is   returned.
	
	## Reference
	
	[Index.h:3726](./include/clang-c/Index.h:3726:26)
	""" clang_Type_getSizeOf
	export clang_Type_getSizeOf
	𝐣𝐥.@cextern clang_Type_getSizeOf(T::CXType)::𝐣𝐥.Clonglong
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Type_getOffsetOf(T::CXType, S::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::𝐣𝐥.Clonglong
	```
	
	 Return the offset of a field named S in a record of type T in bits   as it would be returned by __offsetof__ as per C++11[18.2p4]
	
	## Details
	
	 If the cursor is not a record field declaration, CXTypeLayoutError_Invalid   is returned. If the field's type declaration is an incomplete type,   CXTypeLayoutError_Incomplete is returned. If the field's type declaration is a dependent type,   CXTypeLayoutError_Dependent is returned. If the field's name S is not found,   CXTypeLayoutError_InvalidFieldName is returned.
	
	## Reference
	
	[Index.h:3741](./include/clang-c/Index.h:3741:26)
	""" clang_Type_getOffsetOf
	export clang_Type_getOffsetOf
	𝐣𝐥.@cextern clang_Type_getOffsetOf(T::CXType, S::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::𝐣𝐥.Clonglong
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getOffsetOfField(C::CXCursor)::𝐣𝐥.Clonglong
	```
	
	 Return the offset of the field represented by the Cursor.
	
	## Details
	
	 If the cursor is not a field declaration, -1 is returned. If the cursor semantic parent is not a record field declaration,   CXTypeLayoutError_Invalid is returned. If the field's type declaration is an incomplete type,   CXTypeLayoutError_Incomplete is returned. If the field's type declaration is a dependent type,   CXTypeLayoutError_Dependent is returned. If the field's name S is not found,   CXTypeLayoutError_InvalidFieldName is returned.
	
	## Reference
	
	[Index.h:3756](./include/clang-c/Index.h:3756:26)
	""" clang_Cursor_getOffsetOfField
	export clang_Cursor_getOffsetOfField
	𝐣𝐥.@cextern clang_Cursor_getOffsetOfField(C::CXCursor)::𝐣𝐥.Clonglong
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_isAnonymous(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine whether the given cursor represents an anonymous record declaration.
	
	## Reference
	
	[Index.h:3762](./include/clang-c/Index.h:3762:25)
	""" clang_Cursor_isAnonymous
	export clang_Cursor_isAnonymous
	𝐣𝐥.@cextern clang_Cursor_isAnonymous(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	 An rvalue ref-qualifier was provided (`&&).` 
	
	## Reference
	
	[Index.h:3770](./include/clang-c/Index.h:3770:3)
	""" CXRefQualifier_RValue
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3764](./include/clang-c/Index.h:3764:6)
	""" CXRefQualifierKind
	𝐣𝐥.@doc """
	 An lvalue ref-qualifier was provided (`&).` 
	
	## Reference
	
	[Index.h:3768](./include/clang-c/Index.h:3768:3)
	""" CXRefQualifier_LValue
	𝐣𝐥.@doc """
	 No ref-qualifier was provided. 
	
	## Reference
	
	[Index.h:3766](./include/clang-c/Index.h:3766:3)
	""" CXRefQualifier_None
	export CXRefQualifierKind, CXRefQualifier_LValue, CXRefQualifier_None, CXRefQualifier_RValue
	𝐣𝐥.@cenum CXRefQualifierKind {
		CXRefQualifier_None = 𝐣𝐥.Cuint(0)
		CXRefQualifier_LValue = 𝐣𝐥.Cuint(1)
		CXRefQualifier_RValue = 𝐣𝐥.Cuint(2)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Type_getNumTemplateArguments(T::CXType)::𝐣𝐥.Cint
	```
	
	 Returns the number of template arguments for given template specialization, or -1 if type `T` is not a template specialization.
	
	## Reference
	
	[Index.h:3777](./include/clang-c/Index.h:3777:20)
	""" clang_Type_getNumTemplateArguments
	export clang_Type_getNumTemplateArguments
	𝐣𝐥.@cextern clang_Type_getNumTemplateArguments(T::CXType)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Type_getTemplateArgumentAsType(T::CXType, i::𝐣𝐥.Cuint)::CXType
	```
	
	 Returns the type template argument of a template class specialization at given index.
	
	## Details
	
	 This function only returns template type arguments and does not handle template template arguments or variadic packs.
	
	## Reference
	
	[Index.h:3786](./include/clang-c/Index.h:3786:23)
	""" clang_Type_getTemplateArgumentAsType
	export clang_Type_getTemplateArgumentAsType
	𝐣𝐥.@cextern clang_Type_getTemplateArgumentAsType(T::CXType, i::𝐣𝐥.Cuint)::CXType
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Type_getCXXRefQualifier(T::CXType)::𝐣𝐥.@cenum CXRefQualifierKind
	```
	
	 Retrieve the ref-qualifier kind of a function or method.
	
	## Details
	
	 The ref-qualifier is returned for C++ functions or methods. For other types or non-C++ declarations, CXRefQualifier_None is returned.
	
	## Reference
	
	[Index.h:3794](./include/clang-c/Index.h:3794:40)
	""" clang_Type_getCXXRefQualifier
	export clang_Type_getCXXRefQualifier
	𝐣𝐥.@cextern clang_Type_getCXXRefQualifier(T::CXType)::𝐣𝐥.@cenum CXRefQualifierKind
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_isBitField(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Returns non-zero if the cursor specifies a Record member that is a   bitfield.
	
	## Reference
	
	[Index.h:3800](./include/clang-c/Index.h:3800:25)
	""" clang_Cursor_isBitField
	export clang_Cursor_isBitField
	𝐣𝐥.@cextern clang_Cursor_isBitField(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isVirtualBase(var\"?1?\"::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Returns 1 if the base class specified by the cursor with kind   CX_CXXBaseSpecifier is virtual.
	
	## Reference
	
	[Index.h:3806](./include/clang-c/Index.h:3806:25)
	""" clang_isVirtualBase
	export clang_isVirtualBase
	𝐣𝐥.@cextern clang_isVirtualBase(var"?1?"::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3814](./include/clang-c/Index.h:3814:3)
	""" CX_CXXPublic
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3816](./include/clang-c/Index.h:3816:3)
	""" CX_CXXPrivate
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3813](./include/clang-c/Index.h:3813:3)
	""" CX_CXXInvalidAccessSpecifier
	𝐣𝐥.@doc """
	 Represents the C++ access control level to a base class for a cursor with kind CX_CXXBaseSpecifier.
	
	## Reference
	
	[Index.h:3812](./include/clang-c/Index.h:3812:6)
	""" CX_CXXAccessSpecifier
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3815](./include/clang-c/Index.h:3815:3)
	""" CX_CXXProtected
	export CX_CXXAccessSpecifier, CX_CXXInvalidAccessSpecifier, CX_CXXPrivate, CX_CXXProtected, CX_CXXPublic
	𝐣𝐥.@cenum CX_CXXAccessSpecifier {
		CX_CXXInvalidAccessSpecifier = 𝐣𝐥.Cuint(0)
		CX_CXXPublic = 𝐣𝐥.Cuint(1)
		CX_CXXProtected = 𝐣𝐥.Cuint(2)
		CX_CXXPrivate = 𝐣𝐥.Cuint(3)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCXXAccessSpecifier(var\"?1?\"::CXCursor)::𝐣𝐥.@cenum CX_CXXAccessSpecifier
	```
	
	 Returns the access control level for the referenced object.
	
	## Details
	
	 If the cursor refers to a C++ declaration, its access control level within its parent scope is returned. Otherwise, if the cursor refers to a base specifier or access specifier, the specifier itself is returned.
	
	## Reference
	
	[Index.h:3826](./include/clang-c/Index.h:3826:43)
	""" clang_getCXXAccessSpecifier
	export clang_getCXXAccessSpecifier
	𝐣𝐥.@cextern clang_getCXXAccessSpecifier(var"?1?"::CXCursor)::𝐣𝐥.@cenum CX_CXXAccessSpecifier
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3838](./include/clang-c/Index.h:3838:3)
	""" CX_SC_OpenCLWorkGroupLocal
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3835](./include/clang-c/Index.h:3835:3)
	""" CX_SC_Extern
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3837](./include/clang-c/Index.h:3837:3)
	""" CX_SC_PrivateExtern
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3834](./include/clang-c/Index.h:3834:3)
	""" CX_SC_None
	𝐣𝐥.@doc """
	 Represents the storage classes as declared in the source. CX_SC_Invalid was added for the case that the passed cursor in not a declaration.
	
	## Reference
	
	[Index.h:3832](./include/clang-c/Index.h:3832:6)
	""" CX_StorageClass
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3840](./include/clang-c/Index.h:3840:3)
	""" CX_SC_Register
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3839](./include/clang-c/Index.h:3839:3)
	""" CX_SC_Auto
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3833](./include/clang-c/Index.h:3833:3)
	""" CX_SC_Invalid
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:3836](./include/clang-c/Index.h:3836:3)
	""" CX_SC_Static
	export CX_SC_Auto, CX_SC_Extern, CX_SC_Invalid, CX_SC_None, CX_SC_OpenCLWorkGroupLocal, CX_SC_PrivateExtern, CX_SC_Register, CX_SC_Static, CX_StorageClass
	𝐣𝐥.@cenum CX_StorageClass {
		CX_SC_Invalid = 𝐣𝐥.Cuint(0)
		CX_SC_None = 𝐣𝐥.Cuint(1)
		CX_SC_Extern = 𝐣𝐥.Cuint(2)
		CX_SC_Static = 𝐣𝐥.Cuint(3)
		CX_SC_PrivateExtern = 𝐣𝐥.Cuint(4)
		CX_SC_OpenCLWorkGroupLocal = 𝐣𝐥.Cuint(5)
		CX_SC_Auto = 𝐣𝐥.Cuint(6)
		CX_SC_Register = 𝐣𝐥.Cuint(7)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getStorageClass(var\"?1?\"::CXCursor)::𝐣𝐥.@cenum CX_StorageClass
	```
	
	 Returns the storage class for a function or variable declaration.
	
	## Details
	
	 If the passed in Cursor is not a function or variable declaration, CX_SC_Invalid is returned else the storage class.
	
	## Reference
	
	[Index.h:3849](./include/clang-c/Index.h:3849:37)
	""" clang_Cursor_getStorageClass
	export clang_Cursor_getStorageClass
	𝐣𝐥.@cextern clang_Cursor_getStorageClass(var"?1?"::CXCursor)::𝐣𝐥.@cenum CX_StorageClass
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getNumOverloadedDecls(cursor::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine the number of overloaded declarations referenced by a  `CXCursor_OverloadedDeclRef` cursor.
	
	## Parameters
	
	  * `cursor`: The cursor whose overloaded declarations are being queried.
	
	## Returns
	
	 The number of overloaded declarations referenced by `cursor.` If it is not a `CXCursor_OverloadedDeclRef` cursor, returns 0.
	
	## Reference
	
	[Index.h:3860](./include/clang-c/Index.h:3860:25)
	""" clang_getNumOverloadedDecls
	export clang_getNumOverloadedDecls
	𝐣𝐥.@cextern clang_getNumOverloadedDecls(cursor::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getOverloadedDecl(cursor::CXCursor, index::𝐣𝐥.Cuint)::CXCursor
	```
	
	 Retrieve a cursor for one of the overloaded declarations referenced by a `CXCursor_OverloadedDeclRef` cursor.
	
	## Parameters
	
	  * `cursor`: The cursor whose overloaded declarations are being queried.
	  * `index`: The zero-based index into the set of overloaded declarations in the cursor.
	
	## Returns
	
	 A cursor representing the declaration referenced by the given  `cursor` at the specified `index.` If the cursor does not have an  associated set of overloaded declarations, or if the index is out of bounds, returns `clang_getNullCursor();` 
	
	## Reference
	
	[Index.h:3876](./include/clang-c/Index.h:3876:25)
	""" clang_getOverloadedDecl
	export clang_getOverloadedDecl
	𝐣𝐥.@cextern clang_getOverloadedDecl(cursor::CXCursor, index::𝐣𝐥.Cuint)::CXCursor
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getIBOutletCollectionType(var\"?1?\"::CXCursor)::CXType
	```
	
	 For cursors representing an iboutletcollection attribute,  this function returns the collection element type.
	
	## Reference
	
	[Index.h:3894](./include/clang-c/Index.h:3894:23)
	""" clang_getIBOutletCollectionType
	export clang_getIBOutletCollectionType
	𝐣𝐥.@cextern clang_getIBOutletCollectionType(var"?1?"::CXCursor)::CXType
	
	𝐣𝐥.@doc """
	 Recursively traverse the children of this cursor, using the same visitor and client data.
	
	## Reference
	
	[Index.h:3930](./include/clang-c/Index.h:3930:3)
	""" CXChildVisit_Recurse
	𝐣𝐥.@doc """
	 Terminates the cursor traversal.
	
	## Reference
	
	[Index.h:3920](./include/clang-c/Index.h:3920:3)
	""" CXChildVisit_Break
	𝐣𝐥.@doc """
	 Continues the cursor traversal with the next sibling of the cursor just visited, without visiting its children.
	
	## Reference
	
	[Index.h:3925](./include/clang-c/Index.h:3925:3)
	""" CXChildVisit_Continue
	𝐣𝐥.@doc """
	 Describes how the traversal of the children of a particular cursor should proceed after visiting a particular child cursor.
	
	## Details
	
	 A value of this enumeration type should be returned by each `CXCursorVisitor` to indicate how clang_visitChildren() proceed.
	
	## Reference
	
	[Index.h:3916](./include/clang-c/Index.h:3916:6)
	""" CXChildVisitResult
	export CXChildVisitResult, CXChildVisit_Break, CXChildVisit_Continue, CXChildVisit_Recurse
	𝐣𝐥.@cenum CXChildVisitResult {
		CXChildVisit_Break = 𝐣𝐥.Cuint(0)
		CXChildVisit_Continue = 𝐣𝐥.Cuint(1)
		CXChildVisit_Recurse = 𝐣𝐥.Cuint(2)
	}
	
	𝐣𝐥.@doc """
	 Visitor invoked for each cursor found by a traversal.
	
	## Details
	
	 This visitor function will be invoked for each cursor found by clang_visitCursorChildren(). Its first argument is the cursor being visited, its second argument is the parent visitor for that cursor, and its third argument is the client data provided to clang_visitCursorChildren().
	
	 The visitor should return one of the `CXChildVisitResult` values to direct clang_visitCursorChildren().
	
	## Reference
	
	[Index.h:3945](./include/clang-c/Index.h:3945:35)
	""" CXCursorVisitor
	export CXCursorVisitor
	𝐣𝐥.@ctypedef CXCursorVisitor 𝐣𝐥.Ptr{𝐣𝐥.Cfunction{(𝐣𝐥.@cenum CXChildVisitResult), 𝐣𝐥.Tuple{CXCursor, CXCursor, CXClientData}, 𝐣𝐥.CDECL}}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_visitChildren(parent::CXCursor, visitor::CXCursorVisitor, client_data::CXClientData)::𝐣𝐥.Cuint
	```
	
	 Visit the children of a particular cursor.
	
	## Details
	
	 This function visits all the direct children of the given cursor, invoking the given `visitor` function with the cursors of each visited child. The traversal may be recursive, if the visitor returns `CXChildVisit_Recurse.` The traversal may also be ended prematurely, if the visitor returns `CXChildVisit_Break.`
	
	## Parameters
	
	  * `parent`: the cursor whose child may be visited. All kinds of cursors can be visited, including invalid cursors (which, by definition, have no children).
	  * `visitor`: the visitor function that will be invoked for each child of `parent.`
	  * `client_data`: pointer data supplied by the client, which will be passed to the visitor each time it is invoked.
	
	## Returns
	
	 a non-zero value if the traversal was terminated prematurely by the visitor returning `CXChildVisit_Break.` 
	
	## Reference
	
	[Index.h:3971](./include/clang-c/Index.h:3971:25)
	""" clang_visitChildren
	export clang_visitChildren
	𝐣𝐥.@cextern clang_visitChildren(parent::CXCursor, visitor::CXCursorVisitor, client_data::CXClientData)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorUSR(var\"?1?\"::CXCursor)::CXString
	```
	
	 Retrieve a Unified Symbol Resolution (USR) for the entity referenced by the given cursor.
	
	## Details
	
	 A Unified Symbol Resolution (USR) is a string that identifies a particular entity (function, class, variable, etc.) within a program. USRs can be compared across translation units to determine, e.g., when references in one translation refer to an entity defined in another translation unit.
	
	## Reference
	
	[Index.h:4022](./include/clang-c/Index.h:4022:25)
	""" clang_getCursorUSR
	export clang_getCursorUSR
	𝐣𝐥.@cextern clang_getCursorUSR(var"?1?"::CXCursor)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_constructUSR_ObjCClass(class_name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXString
	```
	
	 Construct a USR for a specified Objective-C class.
	
	## Reference
	
	[Index.h:4027](./include/clang-c/Index.h:4027:25)
	""" clang_constructUSR_ObjCClass
	export clang_constructUSR_ObjCClass
	𝐣𝐥.@cextern clang_constructUSR_ObjCClass(class_name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_constructUSR_ObjCCategory(class_name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, category_name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXString
	```
	
	 Construct a USR for a specified Objective-C category.
	
	## Reference
	
	[Index.h:4033](./include/clang-c/Index.h:4033:3)
	""" clang_constructUSR_ObjCCategory
	export clang_constructUSR_ObjCCategory
	𝐣𝐥.@cextern clang_constructUSR_ObjCCategory(class_name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, category_name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_constructUSR_ObjCProtocol(protocol_name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXString
	```
	
	 Construct a USR for a specified Objective-C protocol.
	
	## Reference
	
	[Index.h:4040](./include/clang-c/Index.h:4040:3)
	""" clang_constructUSR_ObjCProtocol
	export clang_constructUSR_ObjCProtocol
	𝐣𝐥.@cextern clang_constructUSR_ObjCProtocol(protocol_name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_constructUSR_ObjCIvar(name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, classUSR::CXString)::CXString
	```
	
	 Construct a USR for a specified Objective-C instance variable and   the USR for its containing class.
	
	## Reference
	
	[Index.h:4046](./include/clang-c/Index.h:4046:25)
	""" clang_constructUSR_ObjCIvar
	export clang_constructUSR_ObjCIvar
	𝐣𝐥.@cextern clang_constructUSR_ObjCIvar(name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, classUSR::CXString)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_constructUSR_ObjCMethod(name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, isInstanceMethod::𝐣𝐥.Cuint, classUSR::CXString)::CXString
	```
	
	 Construct a USR for a specified Objective-C method and   the USR for its containing class.
	
	## Reference
	
	[Index.h:4053](./include/clang-c/Index.h:4053:25)
	""" clang_constructUSR_ObjCMethod
	export clang_constructUSR_ObjCMethod
	𝐣𝐥.@cextern clang_constructUSR_ObjCMethod(name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, isInstanceMethod::𝐣𝐥.Cuint, classUSR::CXString)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_constructUSR_ObjCProperty(property::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, classUSR::CXString)::CXString
	```
	
	 Construct a USR for a specified Objective-C property and the USR  for its containing class.
	
	## Reference
	
	[Index.h:4061](./include/clang-c/Index.h:4061:25)
	""" clang_constructUSR_ObjCProperty
	export clang_constructUSR_ObjCProperty
	𝐣𝐥.@cextern clang_constructUSR_ObjCProperty(property::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, classUSR::CXString)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorSpelling(var\"?1?\"::CXCursor)::CXString
	```
	
	 Retrieve a name for the entity referenced by this cursor.
	
	## Reference
	
	[Index.h:4067](./include/clang-c/Index.h:4067:25)
	""" clang_getCursorSpelling
	export clang_getCursorSpelling
	𝐣𝐥.@cextern clang_getCursorSpelling(var"?1?"::CXCursor)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getSpellingNameRange(var\"?1?\"::CXCursor, pieceIndex::𝐣𝐥.Cuint, options::𝐣𝐥.Cuint)::CXSourceRange
	```
	
	 Retrieve a range for a piece that forms the cursors spelling name. Most of the times there is only one range for the complete spelling but for Objective-C methods and Objective-C message expressions, there are multiple pieces for each selector identifier.
	
	## Parameters
	
	  * `pieceIndex`: the index of the spelling name piece. If this is greater than the actual number of pieces, it will return a NULL (invalid) range.
	  * `options`: Reserved.
	
	## Reference
	
	[Index.h:4080](./include/clang-c/Index.h:4080:30)
	""" clang_Cursor_getSpellingNameRange
	export clang_Cursor_getSpellingNameRange
	𝐣𝐥.@cextern clang_Cursor_getSpellingNameRange(var"?1?"::CXCursor, pieceIndex::𝐣𝐥.Cuint, options::𝐣𝐥.Cuint)::CXSourceRange
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorDisplayName(var\"?1?\"::CXCursor)::CXString
	```
	
	 Retrieve the display name for the entity referenced by this cursor.
	
	## Details
	
	 The display name contains extra information that helps identify the cursor, such as the parameters of a function or template or the arguments of a  class template specialization.
	
	## Reference
	
	[Index.h:4091](./include/clang-c/Index.h:4091:25)
	""" clang_getCursorDisplayName
	export clang_getCursorDisplayName
	𝐣𝐥.@cextern clang_getCursorDisplayName(var"?1?"::CXCursor)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorReferenced(var\"?1?\"::CXCursor)::CXCursor
	```
	
	 For a cursor that is a reference, retrieve a cursor representing the entity that it references.
	
	## Details
	
	 Reference cursors refer to other entities in the AST. For example, an Objective-C superclass reference cursor refers to an Objective-C class. This function produces the cursor for the Objective-C class from the cursor for the superclass reference. If the input cursor is a declaration or definition, it returns that declaration or definition unchanged. Otherwise, returns the NULL cursor.
	
	## Reference
	
	[Index.h:4103](./include/clang-c/Index.h:4103:25)
	""" clang_getCursorReferenced
	export clang_getCursorReferenced
	𝐣𝐥.@cextern clang_getCursorReferenced(var"?1?"::CXCursor)::CXCursor
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorDefinition(var\"?1?\"::CXCursor)::CXCursor
	```
	
	 For a cursor that is either a reference to or a declaration  of some entity, retrieve a cursor that describes the definition of  that entity.
	
	## Details
	
	  Some entities can be declared multiple times within a translation  unit, but only one of those declarations can also be a  definition. For example, given:
	
	```
	  int f(int, int);
	  int g(int x, int y) { return f(x, y); }
	  int f(int a, int b) { return a + b; }
	  int f(int, int);
	```
	
	  there are three declarations of the function \"f\", but only the  second one is a definition. The clang_getCursorDefinition()  function will take any cursor pointing to a declaration of \"f\"  (the first or fourth lines of the example) or a cursor referenced  that uses \"f\" (the call to \"f' inside \"g\") and will return a  declaration cursor pointing to the definition (the second \"f\"  declaration).
	
	  If given a cursor for which there is no corresponding definition,  e.g., because there is no definition of that entity within this  translation unit, returns a NULL cursor.
	
	## Reference
	
	[Index.h:4133](./include/clang-c/Index.h:4133:25)
	""" clang_getCursorDefinition
	export clang_getCursorDefinition
	𝐣𝐥.@cextern clang_getCursorDefinition(var"?1?"::CXCursor)::CXCursor
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_isCursorDefinition(var\"?1?\"::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine whether the declaration pointed to by this cursor is also a definition of that entity.
	
	## Reference
	
	[Index.h:4139](./include/clang-c/Index.h:4139:25)
	""" clang_isCursorDefinition
	export clang_isCursorDefinition
	𝐣𝐥.@cextern clang_isCursorDefinition(var"?1?"::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCanonicalCursor(var\"?1?\"::CXCursor)::CXCursor
	```
	
	 Retrieve the canonical cursor corresponding to the given cursor.
	
	## Details
	
	 In the C family of languages, many kinds of entities can be declared several times within a single translation unit. For example, a structure type can be forward-declared (possibly multiple times) and later defined:
	
	```
	 struct X;
	 struct X;
	 struct X {
	   int member;
	 };
	```
	
	 The declarations and the definition of `X` are represented by three  different cursors, all of which are declarations of the same underlying  entity. One of these cursor is considered the \"canonical\" cursor, which is effectively the representative for the underlying entity. One can  determine if two cursors are declarations of the same underlying entity by comparing their canonical cursors.
	
	## Returns
	
	 The canonical cursor for the entity referred to by the given cursor.
	
	## Reference
	
	[Index.h:4165](./include/clang-c/Index.h:4165:25)
	""" clang_getCanonicalCursor
	export clang_getCanonicalCursor
	𝐣𝐥.@cextern clang_getCanonicalCursor(var"?1?"::CXCursor)::CXCursor
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getObjCSelectorIndex(var\"?1?\"::CXCursor)::𝐣𝐥.Cint
	```
	
	 If the cursor points to a selector identifier in an Objective-C method or message expression, this returns the selector index.
	
	## Details
	
	 After getting a cursor with #clang_getCursor, this can be called to determine if the location points to a selector identifier.
	
	## Returns
	
	 The selector index if the cursor is an Objective-C method or message expression and the cursor is pointing to a selector identifier, or -1 otherwise.
	
	## Reference
	
	[Index.h:4178](./include/clang-c/Index.h:4178:20)
	""" clang_Cursor_getObjCSelectorIndex
	export clang_Cursor_getObjCSelectorIndex
	𝐣𝐥.@cextern clang_Cursor_getObjCSelectorIndex(var"?1?"::CXCursor)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_isDynamicCall(C::CXCursor)::𝐣𝐥.Cint
	```
	
	 Given a cursor pointing to a C++ method call or an Objective-C message, returns non-zero if the method/message is \"dynamic\", meaning:
	
	## Details
	
	 For a C++ method: the call is virtual. For an Objective-C message: the receiver is an object instance, not 'super' or a specific class.
	
	 If the method/message is \"static\" or the cursor does not point to a method/message, it will return zero.
	
	## Reference
	
	[Index.h:4191](./include/clang-c/Index.h:4191:20)
	""" clang_Cursor_isDynamicCall
	export clang_Cursor_isDynamicCall
	𝐣𝐥.@cextern clang_Cursor_isDynamicCall(C::CXCursor)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getReceiverType(C::CXCursor)::CXType
	```
	
	 Given a cursor pointing to an Objective-C message or property reference, or C++ method call, returns the CXType of the receiver.
	
	## Reference
	
	[Index.h:4197](./include/clang-c/Index.h:4197:23)
	""" clang_Cursor_getReceiverType
	export clang_Cursor_getReceiverType
	𝐣𝐥.@cextern clang_Cursor_getReceiverType(C::CXCursor)::CXType
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4206](./include/clang-c/Index.h:4206:3)
	""" CXObjCPropertyAttr_assign
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4207](./include/clang-c/Index.h:4207:3)
	""" CXObjCPropertyAttr_readwrite
	𝐣𝐥.@doc """
	 Property attributes for a `CXCursor_ObjCPropertyDecl.` 
	
	## Reference
	
	[Index.h:4217](./include/clang-c/Index.h:4217:3)
	""" CXObjCPropertyAttrKind
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4204](./include/clang-c/Index.h:4204:3)
	""" CXObjCPropertyAttr_readonly
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4210](./include/clang-c/Index.h:4210:3)
	""" CXObjCPropertyAttr_nonatomic
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4212](./include/clang-c/Index.h:4212:3)
	""" CXObjCPropertyAttr_atomic
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4203](./include/clang-c/Index.h:4203:3)
	""" CXObjCPropertyAttr_noattr
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4205](./include/clang-c/Index.h:4205:3)
	""" CXObjCPropertyAttr_getter
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4209](./include/clang-c/Index.h:4209:3)
	""" CXObjCPropertyAttr_copy
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4214](./include/clang-c/Index.h:4214:3)
	""" CXObjCPropertyAttr_strong
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4213](./include/clang-c/Index.h:4213:3)
	""" CXObjCPropertyAttr_weak
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4211](./include/clang-c/Index.h:4211:3)
	""" CXObjCPropertyAttr_setter
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4215](./include/clang-c/Index.h:4215:3)
	""" CXObjCPropertyAttr_unsafe_unretained
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4208](./include/clang-c/Index.h:4208:3)
	""" CXObjCPropertyAttr_retain
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4216](./include/clang-c/Index.h:4216:3)
	""" CXObjCPropertyAttr_class
	export CXObjCPropertyAttrKind, CXObjCPropertyAttr_assign, CXObjCPropertyAttr_atomic, CXObjCPropertyAttr_class, CXObjCPropertyAttr_copy, CXObjCPropertyAttr_getter, CXObjCPropertyAttr_noattr, CXObjCPropertyAttr_nonatomic, CXObjCPropertyAttr_readonly, CXObjCPropertyAttr_readwrite, CXObjCPropertyAttr_retain, CXObjCPropertyAttr_setter, CXObjCPropertyAttr_strong, CXObjCPropertyAttr_unsafe_unretained, CXObjCPropertyAttr_weak
	𝐣𝐥.@ctypedef CXObjCPropertyAttrKind 𝐣𝐥.@cenum {
		CXObjCPropertyAttr_noattr = 𝐣𝐥.Cuint(0)
		CXObjCPropertyAttr_readonly = 𝐣𝐥.Cuint(1)
		CXObjCPropertyAttr_getter = 𝐣𝐥.Cuint(2)
		CXObjCPropertyAttr_assign = 𝐣𝐥.Cuint(4)
		CXObjCPropertyAttr_readwrite = 𝐣𝐥.Cuint(8)
		CXObjCPropertyAttr_retain = 𝐣𝐥.Cuint(16)
		CXObjCPropertyAttr_copy = 𝐣𝐥.Cuint(32)
		CXObjCPropertyAttr_nonatomic = 𝐣𝐥.Cuint(64)
		CXObjCPropertyAttr_setter = 𝐣𝐥.Cuint(128)
		CXObjCPropertyAttr_atomic = 𝐣𝐥.Cuint(256)
		CXObjCPropertyAttr_weak = 𝐣𝐥.Cuint(512)
		CXObjCPropertyAttr_strong = 𝐣𝐥.Cuint(1024)
		CXObjCPropertyAttr_unsafe_unretained = 𝐣𝐥.Cuint(2048)
		CXObjCPropertyAttr_class = 𝐣𝐥.Cuint(4096)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getObjCPropertyAttributes(C::CXCursor, reserved::𝐣𝐥.Cuint)::𝐣𝐥.Cuint
	```
	
	 Given a cursor that represents a property declaration, return the associated property attributes. The bits are formed from `CXObjCPropertyAttrKind.`
	
	## Parameters
	
	  * `reserved`: Reserved for future use, pass 0.
	
	## Reference
	
	[Index.h:4226](./include/clang-c/Index.h:4226:25)
	""" clang_Cursor_getObjCPropertyAttributes
	export clang_Cursor_getObjCPropertyAttributes
	𝐣𝐥.@cextern clang_Cursor_getObjCPropertyAttributes(C::CXCursor, reserved::𝐣𝐥.Cuint)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4240](./include/clang-c/Index.h:4240:3)
	""" CXObjCDeclQualifier_Oneway
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4235](./include/clang-c/Index.h:4235:3)
	""" CXObjCDeclQualifier_In
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4234](./include/clang-c/Index.h:4234:3)
	""" CXObjCDeclQualifier_None
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4236](./include/clang-c/Index.h:4236:3)
	""" CXObjCDeclQualifier_Inout
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4237](./include/clang-c/Index.h:4237:3)
	""" CXObjCDeclQualifier_Out
	𝐣𝐥.@doc """
	 'Qualifiers' written next to the return and parameter types in Objective-C method declarations.
	
	## Reference
	
	[Index.h:4241](./include/clang-c/Index.h:4241:3)
	""" CXObjCDeclQualifierKind
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4238](./include/clang-c/Index.h:4238:3)
	""" CXObjCDeclQualifier_Bycopy
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4239](./include/clang-c/Index.h:4239:3)
	""" CXObjCDeclQualifier_Byref
	export CXObjCDeclQualifierKind, CXObjCDeclQualifier_Bycopy, CXObjCDeclQualifier_Byref, CXObjCDeclQualifier_In, CXObjCDeclQualifier_Inout, CXObjCDeclQualifier_None, CXObjCDeclQualifier_Oneway, CXObjCDeclQualifier_Out
	𝐣𝐥.@ctypedef CXObjCDeclQualifierKind 𝐣𝐥.@cenum {
		CXObjCDeclQualifier_None = 𝐣𝐥.Cuint(0)
		CXObjCDeclQualifier_In = 𝐣𝐥.Cuint(1)
		CXObjCDeclQualifier_Inout = 𝐣𝐥.Cuint(2)
		CXObjCDeclQualifier_Out = 𝐣𝐥.Cuint(4)
		CXObjCDeclQualifier_Bycopy = 𝐣𝐥.Cuint(8)
		CXObjCDeclQualifier_Byref = 𝐣𝐥.Cuint(16)
		CXObjCDeclQualifier_Oneway = 𝐣𝐥.Cuint(32)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getObjCDeclQualifiers(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Given a cursor that represents an Objective-C method or parameter declaration, return the associated Objective-C qualifiers for the return type or the parameter respectively. The bits are formed from CXObjCDeclQualifierKind.
	
	## Reference
	
	[Index.h:4249](./include/clang-c/Index.h:4249:25)
	""" clang_Cursor_getObjCDeclQualifiers
	export clang_Cursor_getObjCDeclQualifiers
	𝐣𝐥.@cextern clang_Cursor_getObjCDeclQualifiers(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_isObjCOptional(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Given a cursor that represents an Objective-C method or property declaration, return non-zero if the declaration was affected by \"@optional\". Returns zero if the cursor is not such a declaration or it is \"@required\".
	
	## Reference
	
	[Index.h:4256](./include/clang-c/Index.h:4256:25)
	""" clang_Cursor_isObjCOptional
	export clang_Cursor_isObjCOptional
	𝐣𝐥.@cextern clang_Cursor_isObjCOptional(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_isVariadic(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Returns non-zero if the given cursor is a variadic function or method.
	
	## Reference
	
	[Index.h:4261](./include/clang-c/Index.h:4261:25)
	""" clang_Cursor_isVariadic
	export clang_Cursor_isVariadic
	𝐣𝐥.@cextern clang_Cursor_isVariadic(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_isExternalSymbol(C::CXCursor, language::𝐣𝐥.Ptr{CXString}, definedIn::𝐣𝐥.Ptr{CXString}, isGenerated::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cuint
	```
	
	 Returns non-zero if the given cursor points to a symbol marked with external_source_symbol attribute.
	
	## Parameters
	
	  * `language`: If non-NULL, and the attribute is present, will be set to the 'language' string from the attribute.
	  * `definedIn`: If non-NULL, and the attribute is present, will be set to the 'definedIn' string from the attribute.
	  * `isGenerated`: If non-NULL, and the attribute is present, will be set to non-zero if the 'generated_declaration' is set in the attribute.
	
	## Reference
	
	[Index.h:4276](./include/clang-c/Index.h:4276:25)
	""" clang_Cursor_isExternalSymbol
	export clang_Cursor_isExternalSymbol
	𝐣𝐥.@cextern clang_Cursor_isExternalSymbol(C::CXCursor, language::𝐣𝐥.Ptr{CXString}, definedIn::𝐣𝐥.Ptr{CXString}, isGenerated::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getCommentRange(C::CXCursor)::CXSourceRange
	```
	
	 Given a cursor that represents a declaration, return the associated comment's source range.  The range may include multiple consecutive comments with whitespace in between.
	
	## Reference
	
	[Index.h:4285](./include/clang-c/Index.h:4285:30)
	""" clang_Cursor_getCommentRange
	export clang_Cursor_getCommentRange
	𝐣𝐥.@cextern clang_Cursor_getCommentRange(C::CXCursor)::CXSourceRange
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getRawCommentText(C::CXCursor)::CXString
	```
	
	 Given a cursor that represents a declaration, return the associated comment text, including comment markers.
	
	## Reference
	
	[Index.h:4291](./include/clang-c/Index.h:4291:25)
	""" clang_Cursor_getRawCommentText
	export clang_Cursor_getRawCommentText
	𝐣𝐥.@cextern clang_Cursor_getRawCommentText(C::CXCursor)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getBriefCommentText(C::CXCursor)::CXString
	```
	
	 Given a cursor that represents a documentable entity (e.g., declaration), return the associated \\brief paragraph; otherwise return the first paragraph.
	
	## Reference
	
	[Index.h:4298](./include/clang-c/Index.h:4298:25)
	""" clang_Cursor_getBriefCommentText
	export clang_Cursor_getBriefCommentText
	𝐣𝐥.@cextern clang_Cursor_getBriefCommentText(C::CXCursor)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getMangling(var\"?1?\"::CXCursor)::CXString
	```
	
	 Retrieve the CXString representing the mangled name of the cursor.
	
	## Reference
	
	[Index.h:4312](./include/clang-c/Index.h:4312:25)
	""" clang_Cursor_getMangling
	export clang_Cursor_getMangling
	𝐣𝐥.@cextern clang_Cursor_getMangling(var"?1?"::CXCursor)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getCXXManglings(var\"?1?\"::CXCursor)::𝐣𝐥.Ptr{CXStringSet}
	```
	
	 Retrieve the CXStrings representing the mangled symbols of the C++ constructor or destructor at the cursor.
	
	## Reference
	
	[Index.h:4318](./include/clang-c/Index.h:4318:29)
	""" clang_Cursor_getCXXManglings
	export clang_Cursor_getCXXManglings
	𝐣𝐥.@cextern clang_Cursor_getCXXManglings(var"?1?"::CXCursor)::𝐣𝐥.Ptr{CXStringSet}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getObjCManglings(var\"?1?\"::CXCursor)::𝐣𝐥.Ptr{CXStringSet}
	```
	
	 Retrieve the CXStrings representing the mangled symbols of the ObjC class interface or implementation at the cursor.
	
	## Reference
	
	[Index.h:4324](./include/clang-c/Index.h:4324:29)
	""" clang_Cursor_getObjCManglings
	export clang_Cursor_getObjCManglings
	𝐣𝐥.@cextern clang_Cursor_getObjCManglings(var"?1?"::CXCursor)::𝐣𝐥.Ptr{CXStringSet}
	
	𝐣𝐥.@doc """
	 CINDEX_MODULE Module introspection
	
	## Details
	
	 The functions in this group provide access to information about modules.
	
	 @{
	
	## Reference
	
	[Index.h:4338](./include/clang-c/Index.h:4338:15)
	""" CXModule
	export CXModule
	𝐣𝐥.@ctypedef CXModule 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getModule(C::CXCursor)::CXModule
	```
	
	 Given a CXCursor_ModuleImportDecl cursor, return the associated module.
	
	## Reference
	
	[Index.h:4343](./include/clang-c/Index.h:4343:25)
	""" clang_Cursor_getModule
	export clang_Cursor_getModule
	𝐣𝐥.@cextern clang_Cursor_getModule(C::CXCursor)::CXModule
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getModuleForFile(var\"?1?\"::CXTranslationUnit, var\"?2?\"::CXFile)::CXModule
	```
	
	 Given a CXFile header file, return the module that contains it, if one exists.
	
	## Reference
	
	[Index.h:4349](./include/clang-c/Index.h:4349:25)
	""" clang_getModuleForFile
	export clang_getModuleForFile
	𝐣𝐥.@cextern clang_getModuleForFile(var"?1?"::CXTranslationUnit, var"?2?"::CXFile)::CXModule
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Module_getASTFile(Module::CXModule)::CXFile
	```
	
	## Parameters
	
	  * `Module`: a module object.
	
	## Returns
	
	 the module file where the provided module object came from.
	
	## Reference
	
	[Index.h:4356](./include/clang-c/Index.h:4356:23)
	""" clang_Module_getASTFile
	export clang_Module_getASTFile
	𝐣𝐥.@cextern clang_Module_getASTFile(Module::CXModule)::CXFile
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Module_getParent(Module::CXModule)::CXModule
	```
	
	## Parameters
	
	  * `Module`: a module object.
	
	## Returns
	
	 the parent of a sub-module or NULL if the given module is top-level, e.g. for 'std.vector' it will return the 'std' module.
	
	## Reference
	
	[Index.h:4364](./include/clang-c/Index.h:4364:25)
	""" clang_Module_getParent
	export clang_Module_getParent
	𝐣𝐥.@cextern clang_Module_getParent(Module::CXModule)::CXModule
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Module_getName(Module::CXModule)::CXString
	```
	
	## Parameters
	
	  * `Module`: a module object.
	
	## Returns
	
	 the name of the module, e.g. for the 'std.vector' sub-module it will return \"vector\".
	
	## Reference
	
	[Index.h:4372](./include/clang-c/Index.h:4372:25)
	""" clang_Module_getName
	export clang_Module_getName
	𝐣𝐥.@cextern clang_Module_getName(Module::CXModule)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Module_getFullName(Module::CXModule)::CXString
	```
	
	## Parameters
	
	  * `Module`: a module object.
	
	## Returns
	
	 the full name of the module, e.g. \"std.vector\".
	
	## Reference
	
	[Index.h:4379](./include/clang-c/Index.h:4379:25)
	""" clang_Module_getFullName
	export clang_Module_getFullName
	𝐣𝐥.@cextern clang_Module_getFullName(Module::CXModule)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Module_isSystem(Module::CXModule)::𝐣𝐥.Cint
	```
	
	## Parameters
	
	  * `Module`: a module object.
	
	## Returns
	
	 non-zero if the module is a system one.
	
	## Reference
	
	[Index.h:4386](./include/clang-c/Index.h:4386:20)
	""" clang_Module_isSystem
	export clang_Module_isSystem
	𝐣𝐥.@cextern clang_Module_isSystem(Module::CXModule)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Module_getNumTopLevelHeaders(var\"?1?\"::CXTranslationUnit, Module::CXModule)::𝐣𝐥.Cuint
	```
	
	## Parameters
	
	  * `Module`: a module object.
	
	## Returns
	
	 the number of top level headers associated with this module.
	
	## Reference
	
	[Index.h:4393](./include/clang-c/Index.h:4393:25)
	""" clang_Module_getNumTopLevelHeaders
	export clang_Module_getNumTopLevelHeaders
	𝐣𝐥.@cextern clang_Module_getNumTopLevelHeaders(var"?1?"::CXTranslationUnit, Module::CXModule)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Module_getTopLevelHeader(var\"?1?\"::CXTranslationUnit, Module::CXModule, Index::𝐣𝐥.Cuint)::CXFile
	```
	
	## Parameters
	
	  * `Module`: a module object.
	
	## Details
	
	  * `Index`: top level header index (zero-based).
	
	## Returns
	
	 the specified top level header associated with the module.
	
	## Reference
	
	[Index.h:4404](./include/clang-c/Index.h:4404:8)
	""" clang_Module_getTopLevelHeader
	export clang_Module_getTopLevelHeader
	𝐣𝐥.@cextern clang_Module_getTopLevelHeader(var"?1?"::CXTranslationUnit, Module::CXModule, Index::𝐣𝐥.Cuint)::CXFile
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXXConstructor_isConvertingConstructor(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine if a C++ constructor is a converting constructor.
	
	## Reference
	
	[Index.h:4423](./include/clang-c/Index.h:4423:25)
	""" clang_CXXConstructor_isConvertingConstructor
	export clang_CXXConstructor_isConvertingConstructor
	𝐣𝐥.@cextern clang_CXXConstructor_isConvertingConstructor(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXXConstructor_isCopyConstructor(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine if a C++ constructor is a copy constructor.
	
	## Reference
	
	[Index.h:4428](./include/clang-c/Index.h:4428:25)
	""" clang_CXXConstructor_isCopyConstructor
	export clang_CXXConstructor_isCopyConstructor
	𝐣𝐥.@cextern clang_CXXConstructor_isCopyConstructor(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXXConstructor_isDefaultConstructor(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine if a C++ constructor is the default constructor.
	
	## Reference
	
	[Index.h:4433](./include/clang-c/Index.h:4433:25)
	""" clang_CXXConstructor_isDefaultConstructor
	export clang_CXXConstructor_isDefaultConstructor
	𝐣𝐥.@cextern clang_CXXConstructor_isDefaultConstructor(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXXConstructor_isMoveConstructor(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine if a C++ constructor is a move constructor.
	
	## Reference
	
	[Index.h:4438](./include/clang-c/Index.h:4438:25)
	""" clang_CXXConstructor_isMoveConstructor
	export clang_CXXConstructor_isMoveConstructor
	𝐣𝐥.@cextern clang_CXXConstructor_isMoveConstructor(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXXField_isMutable(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine if a C++ field is declared 'mutable'.
	
	## Reference
	
	[Index.h:4443](./include/clang-c/Index.h:4443:25)
	""" clang_CXXField_isMutable
	export clang_CXXField_isMutable
	𝐣𝐥.@cextern clang_CXXField_isMutable(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXXMethod_isDefaulted(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine if a C++ method is declared '= default'.
	
	## Reference
	
	[Index.h:4448](./include/clang-c/Index.h:4448:25)
	""" clang_CXXMethod_isDefaulted
	export clang_CXXMethod_isDefaulted
	𝐣𝐥.@cextern clang_CXXMethod_isDefaulted(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXXMethod_isPureVirtual(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine if a C++ member function or member function template is pure virtual.
	
	## Reference
	
	[Index.h:4454](./include/clang-c/Index.h:4454:25)
	""" clang_CXXMethod_isPureVirtual
	export clang_CXXMethod_isPureVirtual
	𝐣𝐥.@cextern clang_CXXMethod_isPureVirtual(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXXMethod_isStatic(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine if a C++ member function or member function template is  declared 'static'.
	
	## Reference
	
	[Index.h:4460](./include/clang-c/Index.h:4460:25)
	""" clang_CXXMethod_isStatic
	export clang_CXXMethod_isStatic
	𝐣𝐥.@cextern clang_CXXMethod_isStatic(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXXMethod_isVirtual(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine if a C++ member function or member function template is explicitly declared 'virtual' or if it overrides a virtual method from one of the base classes.
	
	## Reference
	
	[Index.h:4467](./include/clang-c/Index.h:4467:25)
	""" clang_CXXMethod_isVirtual
	export clang_CXXMethod_isVirtual
	𝐣𝐥.@cextern clang_CXXMethod_isVirtual(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXXRecord_isAbstract(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine if a C++ record is abstract, i.e. whether a class or struct has a pure virtual member function.
	
	## Reference
	
	[Index.h:4473](./include/clang-c/Index.h:4473:25)
	""" clang_CXXRecord_isAbstract
	export clang_CXXRecord_isAbstract
	𝐣𝐥.@cextern clang_CXXRecord_isAbstract(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_EnumDecl_isScoped(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine if an enum declaration refers to a scoped enum.
	
	## Reference
	
	[Index.h:4478](./include/clang-c/Index.h:4478:25)
	""" clang_EnumDecl_isScoped
	export clang_EnumDecl_isScoped
	𝐣𝐥.@cextern clang_EnumDecl_isScoped(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_CXXMethod_isConst(C::CXCursor)::𝐣𝐥.Cuint
	```
	
	 Determine if a C++ member function or member function template is declared 'const'.
	
	## Reference
	
	[Index.h:4484](./include/clang-c/Index.h:4484:25)
	""" clang_CXXMethod_isConst
	export clang_CXXMethod_isConst
	𝐣𝐥.@cextern clang_CXXMethod_isConst(C::CXCursor)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTemplateCursorKind(C::CXCursor)::𝐣𝐥.@cenum CXCursorKind
	```
	
	 Given a cursor that represents a template, determine the cursor kind of the specializations would be generated by instantiating the template.
	
	## Details
	
	 This routine can be used to determine what flavor of function template, class template, or class template partial specialization is stored in the cursor. For example, it can describe whether a class template cursor is declared with \"struct\", \"class\" or \"union\".
	
	## Parameters
	
	  * `C`: The cursor to query. This cursor should represent a template declaration.
	
	## Returns
	
	 The cursor kind of the specializations that would be generated by instantiating the template `C.` If `C` is not a template, returns `CXCursor_NoDeclFound.` 
	
	## Reference
	
	[Index.h:4503](./include/clang-c/Index.h:4503:34)
	""" clang_getTemplateCursorKind
	export clang_getTemplateCursorKind
	𝐣𝐥.@cextern clang_getTemplateCursorKind(C::CXCursor)::𝐣𝐥.@cenum CXCursorKind
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getSpecializedCursorTemplate(C::CXCursor)::CXCursor
	```
	
	 Given a cursor that may represent a specialization or instantiation of a template, retrieve the cursor that represents the template that it specializes or from which it was instantiated.
	
	## Details
	
	 This routine determines the template involved both for explicit  specializations of templates and for implicit instantiations of the template, both of which are referred to as \"specializations\". For a class template specialization (e.g., `std::vector<bool>),` this routine will return  either the primary template (`std::vector)` or, if the specialization was instantiated from a class template partial specialization, the class template partial specialization. For a class template partial specialization and a function template specialization (including instantiations), this this routine will return the specialized template.
	
	 For members of a class template (e.g., member functions, member classes, or static data members), returns the specialized or instantiated member.  Although not strictly \"templates\" in the C++ language, members of class templates have the same notions of specializations and instantiations that templates do, so this routine treats them similarly.
	
	## Parameters
	
	  * `C`: A cursor that may be a specialization of a template or a member of a template.
	
	## Returns
	
	 If the given cursor is a specialization or instantiation of a  template or a member thereof, the template or member that it specializes or from which it was instantiated. Otherwise, returns a NULL cursor.
	
	## Reference
	
	[Index.h:4533](./include/clang-c/Index.h:4533:25)
	""" clang_getSpecializedCursorTemplate
	export clang_getSpecializedCursorTemplate
	𝐣𝐥.@cextern clang_getSpecializedCursorTemplate(C::CXCursor)::CXCursor
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorReferenceNameRange(C::CXCursor, NameFlags::𝐣𝐥.Cuint, PieceIndex::𝐣𝐥.Cuint)::CXSourceRange
	```
	
	 Given a cursor that references something else, return the source range covering that reference.
	
	## Parameters
	
	  * `C`: A cursor pointing to a member reference, a declaration reference, or an operator call.
	  * `NameFlags`: A bitset with three independent flags:  CXNameRange_WantQualifier, CXNameRange_WantTemplateArgs, and CXNameRange_WantSinglePiece.
	  * `PieceIndex`: For contiguous names or when passing the flag  CXNameRange_WantSinglePiece, only one piece with index 0 is  available. When the CXNameRange_WantSinglePiece flag is not passed for a non-contiguous names, this index can be used to retrieve the individual pieces of the name. See also CXNameRange_WantSinglePiece.
	
	## Returns
	
	 The piece of the name pointed to by the given cursor. If there is no name, or if the PieceIndex is out-of-range, a null-cursor will be returned.
	
	## Reference
	
	[Index.h:4553](./include/clang-c/Index.h:4553:30)
	""" clang_getCursorReferenceNameRange
	export clang_getCursorReferenceNameRange
	𝐣𝐥.@cextern clang_getCursorReferenceNameRange(C::CXCursor, NameFlags::𝐣𝐥.Cuint, PieceIndex::𝐣𝐥.Cuint)::CXSourceRange
	
	𝐣𝐥.@doc """
	 Include the nested-name-specifier, e.g. Foo:: in x.Foo::y, in the range.
	
	## Reference
	
	[Index.h:4562](./include/clang-c/Index.h:4562:3)
	""" CXNameRange_WantQualifier
	𝐣𝐥.@doc """
	 If the name is non-contiguous, return the full spanning range.
	
	## Details
	
	 Non-contiguous names occur in Objective-C when a selector with two or more parameters is used, or in C++ when using an operator: 
	
	```
	 [object doSomething:here withValue:there]; // Objective-C
	 return some_vector[1]; // C++
	```
	
	## Reference
	
	[Index.h:4580](./include/clang-c/Index.h:4580:3)
	""" CXNameRange_WantSinglePiece
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:4557](./include/clang-c/Index.h:4557:6)
	""" CXNameRefFlags
	𝐣𝐥.@doc """
	 Include the explicit template arguments, e.g. <int> in x.f<int>, in the range.
	
	## Reference
	
	[Index.h:4568](./include/clang-c/Index.h:4568:3)
	""" CXNameRange_WantTemplateArgs
	export CXNameRange_WantQualifier, CXNameRange_WantSinglePiece, CXNameRange_WantTemplateArgs, CXNameRefFlags
	𝐣𝐥.@cenum CXNameRefFlags {
		CXNameRange_WantQualifier = 𝐣𝐥.Cuint(1)
		CXNameRange_WantTemplateArgs = 𝐣𝐥.Cuint(2)
		CXNameRange_WantSinglePiece = 𝐣𝐥.Cuint(4)
	}
	
	𝐣𝐥.@doc """
	 Describes a kind of token.
	
	---
	
	 Describes a kind of token.
	
	## References
	
	[Index.h:4600](./include/clang-c/Index.h:4600:14)
	
	[Index.h:4625](./include/clang-c/Index.h:4625:3)
	""" CXTokenKind
	𝐣𝐥.@doc """
	 A comment.
	
	## Reference
	
	[Index.h:4624](./include/clang-c/Index.h:4624:3)
	""" CXToken_Comment
	𝐣𝐥.@doc """
	 An identifier (that is not a keyword).
	
	## Reference
	
	[Index.h:4614](./include/clang-c/Index.h:4614:3)
	""" CXToken_Identifier
	𝐣𝐥.@doc """
	 A language keyword.
	
	## Reference
	
	[Index.h:4609](./include/clang-c/Index.h:4609:3)
	""" CXToken_Keyword
	𝐣𝐥.@doc """
	 A numeric, string, or character literal.
	
	## Reference
	
	[Index.h:4619](./include/clang-c/Index.h:4619:3)
	""" CXToken_Literal
	𝐣𝐥.@doc """
	 A token that contains some kind of punctuation.
	
	## Reference
	
	[Index.h:4604](./include/clang-c/Index.h:4604:3)
	""" CXToken_Punctuation
	export CXTokenKind, CXToken_Comment, CXToken_Identifier, CXToken_Keyword, CXToken_Literal, CXToken_Punctuation
	𝐣𝐥.@ctypedef CXTokenKind 𝐣𝐥.@cenum CXTokenKind {
		CXToken_Punctuation = 𝐣𝐥.Cuint(0)
		CXToken_Keyword = 𝐣𝐥.Cuint(1)
		CXToken_Identifier = 𝐣𝐥.Cuint(2)
		CXToken_Literal = 𝐣𝐥.Cuint(3)
		CXToken_Comment = 𝐣𝐥.Cuint(4)
	}
	
	𝐣𝐥.@doc """
	 Describes a single preprocessing token.
	
	## Reference
	
	[Index.h:4633](./include/clang-c/Index.h:4633:3)
	""" CXToken
	export CXToken
	𝐣𝐥.@ctypedef CXToken 𝐣𝐥.@cstruct {
		int_data::𝐣𝐥.Cuint[4]
		ptr_data::𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTokenKind(var\"?1?\"::CXToken)::CXTokenKind
	```
	
	 Determine the kind of the given token.
	
	## Reference
	
	[Index.h:4638](./include/clang-c/Index.h:4638:28)
	""" clang_getTokenKind
	export clang_getTokenKind
	𝐣𝐥.@cextern clang_getTokenKind(var"?1?"::CXToken)::CXTokenKind
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTokenSpelling(var\"?1?\"::CXTranslationUnit, var\"?2?\"::CXToken)::CXString
	```
	
	 Determine the spelling of the given token.
	
	## Details
	
	 The spelling of a token is the textual representation of that token, e.g., the text of an identifier or keyword.
	
	## Reference
	
	[Index.h:4646](./include/clang-c/Index.h:4646:25)
	""" clang_getTokenSpelling
	export clang_getTokenSpelling
	𝐣𝐥.@cextern clang_getTokenSpelling(var"?1?"::CXTranslationUnit, var"?2?"::CXToken)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTokenLocation(var\"?1?\"::CXTranslationUnit, var\"?2?\"::CXToken)::CXSourceLocation
	```
	
	 Retrieve the source location of the given token.
	
	## Reference
	
	[Index.h:4651](./include/clang-c/Index.h:4651:33)
	""" clang_getTokenLocation
	export clang_getTokenLocation
	𝐣𝐥.@cextern clang_getTokenLocation(var"?1?"::CXTranslationUnit, var"?2?"::CXToken)::CXSourceLocation
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getTokenExtent(var\"?1?\"::CXTranslationUnit, var\"?2?\"::CXToken)::CXSourceRange
	```
	
	 Retrieve a source range that covers the given token.
	
	## Reference
	
	[Index.h:4657](./include/clang-c/Index.h:4657:30)
	""" clang_getTokenExtent
	export clang_getTokenExtent
	𝐣𝐥.@cextern clang_getTokenExtent(var"?1?"::CXTranslationUnit, var"?2?"::CXToken)::CXSourceRange
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_tokenize(TU::CXTranslationUnit, Range::CXSourceRange, Tokens::𝐣𝐥.Ptr{𝐣𝐥.Ptr{CXToken}}, NumTokens::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	```
	
	 Tokenize the source code described by the given range into raw lexical tokens.
	
	## Parameters
	
	  * `TU`: the translation unit whose text is being tokenized.
	  * `Range`: the source range in which text should be tokenized. All of the tokens produced by tokenization will fall within this source range,
	  * `Tokens`: this pointer will be set to point to the array of tokens that occur within the given source range. The returned pointer must be freed with clang_disposeTokens() before the translation unit is destroyed.
	  * `NumTokens`: will be set to the number of tokens in the `*Tokens` array.
	
	## Reference
	
	[Index.h:4676](./include/clang-c/Index.h:4676:21)
	""" clang_tokenize
	export clang_tokenize
	𝐣𝐥.@cextern clang_tokenize(TU::CXTranslationUnit, Range::CXSourceRange, Tokens::𝐣𝐥.Ptr{𝐣𝐥.Ptr{CXToken}}, NumTokens::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_annotateTokens(TU::CXTranslationUnit, Tokens::𝐣𝐥.Ptr{CXToken}, NumTokens::𝐣𝐥.Cuint, Cursors::𝐣𝐥.Ptr{CXCursor})::𝐣𝐥.Cvoid
	```
	
	 Annotate the given set of tokens by providing cursors for each token that can be mapped to a specific entity within the abstract syntax tree.
	
	## Details
	
	 This token-annotation routine is equivalent to invoking clang_getCursor() for the source locations of each of the tokens. The cursors provided are filtered, so that only those cursors that have a direct correspondence to the token are accepted. For example, given a function call `f(x),` clang_getCursor() would provide the following cursors:
	
	   * when the cursor is over the 'f', a DeclRefExpr cursor referring to 'f'.   * when the cursor is over the '(' or the ')', a CallExpr referring to 'f'.   * when the cursor is over the 'x', a DeclRefExpr cursor referring to 'x'.
	
	 Only the first and last of these cursors will occur within the annotate, since the tokens \"f\" and \"x' directly refer to a function and a variable, respectively, but the parentheses are just a small part of the full syntax of the function call expression, which is not provided as an annotation.
	
	## Parameters
	
	  * `TU`: the translation unit that owns the given tokens.
	  * `Tokens`: the set of tokens to annotate.
	  * `NumTokens`: the number of tokens in `Tokens.`
	  * `Cursors`: an array of `NumTokens` cursors, whose contents will be replaced with the cursors corresponding to each token.
	
	## Reference
	
	[Index.h:4709](./include/clang-c/Index.h:4709:21)
	""" clang_annotateTokens
	export clang_annotateTokens
	𝐣𝐥.@cextern clang_annotateTokens(TU::CXTranslationUnit, Tokens::𝐣𝐥.Ptr{CXToken}, NumTokens::𝐣𝐥.Cuint, Cursors::𝐣𝐥.Ptr{CXCursor})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_disposeTokens(TU::CXTranslationUnit, Tokens::𝐣𝐥.Ptr{CXToken}, NumTokens::𝐣𝐥.Cuint)::𝐣𝐥.Cvoid
	```
	
	 Free the given set of tokens.
	
	## Reference
	
	[Index.h:4716](./include/clang-c/Index.h:4716:21)
	""" clang_disposeTokens
	export clang_disposeTokens
	𝐣𝐥.@cextern clang_disposeTokens(TU::CXTranslationUnit, Tokens::𝐣𝐥.Ptr{CXToken}, NumTokens::𝐣𝐥.Cuint)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorKindSpelling(Kind::𝐣𝐥.@cenum CXCursorKind)::CXString
	```
	
	 CINDEX_DEBUG Debugging facilities
	
	## Details
	
	 These routines are used for testing and debugging, only, and should not be relied upon.
	
	 @{
	
	## Reference
	
	[Index.h:4733](./include/clang-c/Index.h:4733:25)
	""" clang_getCursorKindSpelling
	export clang_getCursorKindSpelling
	𝐣𝐥.@cextern clang_getCursorKindSpelling(Kind::𝐣𝐥.@cenum CXCursorKind)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getDefinitionSpellingAndExtent(var\"?1?\"::CXCursor, startBuf::𝐣𝐥.Ptr{𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}}, endBuf::𝐣𝐥.Ptr{𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}}, startLine::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, startColumn::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, endLine::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, endColumn::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	```
	
	## Reference
	
	[Index.h:4734](./include/clang-c/Index.h:4734:21)
	""" clang_getDefinitionSpellingAndExtent
	export clang_getDefinitionSpellingAndExtent
	𝐣𝐥.@cextern clang_getDefinitionSpellingAndExtent(var"?1?"::CXCursor, startBuf::𝐣𝐥.Ptr{𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}}, endBuf::𝐣𝐥.Ptr{𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}}, startLine::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, startColumn::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, endLine::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, endColumn::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_enableStackTraces()::𝐣𝐥.Cvoid
	```
	
	## Reference
	
	[Index.h:4741](./include/clang-c/Index.h:4741:21)
	""" clang_enableStackTraces
	export clang_enableStackTraces
	𝐣𝐥.@cextern clang_enableStackTraces()::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_executeOnThread(fn::𝐣𝐥.Ptr{𝐣𝐥.Cfunction{𝐣𝐥.Cvoid, 𝐣𝐥.Tuple{𝐣𝐥.Ptr{𝐣𝐥.Cvoid}}, 𝐣𝐥.CDECL}}, user_data::𝐣𝐥.Ptr{𝐣𝐥.Cvoid}, stack_size::𝐣𝐥.Cuint)::𝐣𝐥.Cvoid
	```
	
	## Reference
	
	[Index.h:4742](./include/clang-c/Index.h:4742:21)
	""" clang_executeOnThread
	export clang_executeOnThread
	𝐣𝐥.@cextern clang_executeOnThread(fn::𝐣𝐥.Ptr{𝐣𝐥.Cfunction{𝐣𝐥.Cvoid, 𝐣𝐥.Tuple{𝐣𝐥.Ptr{𝐣𝐥.Cvoid}}, 𝐣𝐥.CDECL}}, user_data::𝐣𝐥.Ptr{𝐣𝐥.Cvoid}, stack_size::𝐣𝐥.Cuint)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	 A semantic string that describes a code-completion result.
	
	## Details
	
	 A semantic string that describes the formatting of a code-completion result as a single \"template\" of text that should be inserted into the source buffer when a particular code-completion result is selected. Each semantic string is made up of some number of \"chunks\", each of which contains some text along with a description of what that text means, e.g., the name of the entity being referenced, whether the text chunk is part of the template, or whether it is a \"placeholder\" that the user should replace with actual code,of a specific kind. See `CXCompletionChunkKind` for a description of the different kinds of chunks.
	
	## Reference
	
	[Index.h:4774](./include/clang-c/Index.h:4774:15)
	""" CXCompletionString
	export CXCompletionString
	𝐣𝐥.@ctypedef CXCompletionString 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	 A single result of code completion.
	
	## Reference
	
	[Index.h:4797](./include/clang-c/Index.h:4797:3)
	""" CXCompletionResult
	export CXCompletionResult
	𝐣𝐥.@ctypedef CXCompletionResult 𝐣𝐥.@cstruct {
		CursorKind::𝐣𝐥.@cenum CXCursorKind
		CompletionString::CXCompletionString
	}
	
	𝐣𝐥.@doc """
	 A semicolon (';').
	
	## Reference
	
	[Index.h:4954](./include/clang-c/Index.h:4954:3)
	""" CXCompletionChunk_SemiColon
	𝐣𝐥.@doc """
	 A comma separator (',').
	
	## Reference
	
	[Index.h:4938](./include/clang-c/Index.h:4938:3)
	""" CXCompletionChunk_Comma
	𝐣𝐥.@doc """
	 A code-completion string that describes \"optional\" text that could be a part of the template (but is not required).
	
	## Details
	
	 The Optional chunk is the only kind of chunk that has a code-completion string for its representation, which is accessible via `clang_getCompletionChunkCompletionString().` The code-completion string describes an additional part of the template that is completely optional. For example, optional chunks can be used to describe the placeholders for arguments that match up with defaulted function parameters, e.g. given:
	
	```
	 void f(int x, float y = 3.14, double z = 2.71828);
	```
	
	 The code-completion string for this function would contain:   - a TypedText chunk for \"f\".   - a LeftParen chunk for \"(\".   - a Placeholder chunk for \"int x\"   - an Optional chunk containing the remaining defaulted arguments, e.g.,       - a Comma chunk for \",\"       - a Placeholder chunk for \"float y\"       - an Optional chunk containing the last defaulted argument:           - a Comma chunk for \",\"           - a Placeholder chunk for \"double z\"   - a RightParen chunk for \")\"
	
	 There are many ways to handle Optional chunks. Two simple approaches are:   - Completely ignore optional chunks, in which case the template for the     function \"f\" would only include the first parameter (\"int x\").   - Fully expand all optional chunks, in which case the template for the     function \"f\" would have all of the parameters.
	
	## Reference
	
	[Index.h:4840](./include/clang-c/Index.h:4840:3)
	""" CXCompletionChunk_Optional
	𝐣𝐥.@doc """
	 An '=' sign.
	
	## Reference
	
	[Index.h:4958](./include/clang-c/Index.h:4958:3)
	""" CXCompletionChunk_Equal
	𝐣𝐥.@doc """
	 Text that a user would be expected to type to get this code-completion result.
	
	## Details
	
	 There will be exactly one \"typed text\" chunk in a semantic string, which will typically provide the spelling of a keyword or the name of a declaration that could be used at the current code point. Clients are expected to filter the code-completion results based on the text in this chunk.
	
	## Reference
	
	[Index.h:4851](./include/clang-c/Index.h:4851:3)
	""" CXCompletionChunk_TypedText
	𝐣𝐥.@doc """
	 Text that describes the current parameter when code-completion is referring to function call, message send, or template specialization.
	
	## Details
	
	 A \"current parameter\" chunk occurs when code-completion is providing information about a parameter corresponding to the argument at the code-completion point. For example, given a function
	
	```
	 int add(int x, int y);
	```
	
	 and the source code `add(,` where the code-completion point is after the \"(\", the code-completion string will contain a \"current parameter\" chunk for \"int x\", indicating that the current argument will initialize that parameter. After typing further, to `add(17,` (where the code-completion point is after the \",\"), the code-completion string will contain a \"current paremeter\" chunk to \"int y\".
	
	## Reference
	
	[Index.h:4900](./include/clang-c/Index.h:4900:3)
	""" CXCompletionChunk_CurrentParameter
	𝐣𝐥.@doc """
	 A left parenthesis ('('), used to initiate a function call or signal the beginning of a function parameter list.
	
	## Reference
	
	[Index.h:4905](./include/clang-c/Index.h:4905:3)
	""" CXCompletionChunk_LeftParen
	𝐣𝐥.@doc """
	 A right bracket (']').
	
	## Reference
	
	[Index.h:4918](./include/clang-c/Index.h:4918:3)
	""" CXCompletionChunk_RightBracket
	𝐣𝐥.@doc """
	 Vertical space ('\\n'), after which it is generally a good idea to perform indentation.
	
	## Reference
	
	[Index.h:4967](./include/clang-c/Index.h:4967:3)
	""" CXCompletionChunk_VerticalSpace
	𝐣𝐥.@doc """
	 A right brace ('}').
	
	## Reference
	
	[Index.h:4926](./include/clang-c/Index.h:4926:3)
	""" CXCompletionChunk_RightBrace
	𝐣𝐥.@doc """
	 A left bracket ('[').
	
	## Reference
	
	[Index.h:4914](./include/clang-c/Index.h:4914:3)
	""" CXCompletionChunk_LeftBracket
	𝐣𝐥.@doc """
	 A right parenthesis (')'), used to finish a function call or signal the end of a function parameter list.
	
	## Reference
	
	[Index.h:4910](./include/clang-c/Index.h:4910:3)
	""" CXCompletionChunk_RightParen
	𝐣𝐥.@doc """
	 Text that specifies the result type of a given result.
	
	## Details
	
	 This special kind of informative chunk is not meant to be inserted into the text buffer. Rather, it is meant to illustrate the type that an expression using the given completion string would have.
	
	## Reference
	
	[Index.h:4946](./include/clang-c/Index.h:4946:3)
	""" CXCompletionChunk_ResultType
	𝐣𝐥.@doc """
	 Horizontal space (' ').
	
	## Reference
	
	[Index.h:4962](./include/clang-c/Index.h:4962:3)
	""" CXCompletionChunk_HorizontalSpace
	𝐣𝐥.@doc """
	 A colon (':').
	
	## Reference
	
	[Index.h:4950](./include/clang-c/Index.h:4950:3)
	""" CXCompletionChunk_Colon
	𝐣𝐥.@doc """
	 Text that should be inserted as part of a code-completion result.
	
	## Details
	
	 A \"text\" chunk represents text that is part of the template to be inserted into user code should this particular code-completion result be selected.
	
	## Reference
	
	[Index.h:4859](./include/clang-c/Index.h:4859:3)
	""" CXCompletionChunk_Text
	𝐣𝐥.@doc """
	 Placeholder text that should be replaced by the user.
	
	## Details
	
	 A \"placeholder\" chunk marks a place where the user should insert text into the code-completion template. For example, placeholders might mark the function parameters for a function declaration, to indicate that the user should provide arguments for each of those parameters. The actual text in a placeholder is a suggestion for the text to display before the user replaces the placeholder with real code.
	
	## Reference
	
	[Index.h:4870](./include/clang-c/Index.h:4870:3)
	""" CXCompletionChunk_Placeholder
	𝐣𝐥.@doc """
	 A left brace ('{').
	
	## Reference
	
	[Index.h:4922](./include/clang-c/Index.h:4922:3)
	""" CXCompletionChunk_LeftBrace
	𝐣𝐥.@doc """
	 A left angle bracket ('<').
	
	## Reference
	
	[Index.h:4930](./include/clang-c/Index.h:4930:3)
	""" CXCompletionChunk_LeftAngle
	𝐣𝐥.@doc """
	 Describes a single piece of text within a code-completion string.
	
	## Details
	
	 Each \"chunk\" within a code-completion string (`CXCompletionString)` is either a piece of text with a specific \"kind\" that describes how that text should be interpreted by the client or is another completion string.
	
	## Reference
	
	[Index.h:4806](./include/clang-c/Index.h:4806:6)
	""" CXCompletionChunkKind
	𝐣𝐥.@doc """
	 Informative text that should be displayed but never inserted as part of the template.
	
	## Details
	
	 An \"informative\" chunk contains annotations that can be displayed to help the user decide whether a particular code-completion result is the right option, but which is not part of the actual template to be inserted by code completion.
	
	## Reference
	
	[Index.h:4880](./include/clang-c/Index.h:4880:3)
	""" CXCompletionChunk_Informative
	𝐣𝐥.@doc """
	 A right angle bracket ('>').
	
	## Reference
	
	[Index.h:4934](./include/clang-c/Index.h:4934:3)
	""" CXCompletionChunk_RightAngle
	export CXCompletionChunkKind, CXCompletionChunk_Colon, CXCompletionChunk_Comma, CXCompletionChunk_CurrentParameter, CXCompletionChunk_Equal, CXCompletionChunk_HorizontalSpace, CXCompletionChunk_Informative, CXCompletionChunk_LeftAngle, CXCompletionChunk_LeftBrace, CXCompletionChunk_LeftBracket, CXCompletionChunk_LeftParen, CXCompletionChunk_Optional, CXCompletionChunk_Placeholder, CXCompletionChunk_ResultType, CXCompletionChunk_RightAngle, CXCompletionChunk_RightBrace, CXCompletionChunk_RightBracket, CXCompletionChunk_RightParen, CXCompletionChunk_SemiColon, CXCompletionChunk_Text, CXCompletionChunk_TypedText, CXCompletionChunk_VerticalSpace
	𝐣𝐥.@cenum CXCompletionChunkKind {
		CXCompletionChunk_Optional = 𝐣𝐥.Cuint(0)
		CXCompletionChunk_TypedText = 𝐣𝐥.Cuint(1)
		CXCompletionChunk_Text = 𝐣𝐥.Cuint(2)
		CXCompletionChunk_Placeholder = 𝐣𝐥.Cuint(3)
		CXCompletionChunk_Informative = 𝐣𝐥.Cuint(4)
		CXCompletionChunk_CurrentParameter = 𝐣𝐥.Cuint(5)
		CXCompletionChunk_LeftParen = 𝐣𝐥.Cuint(6)
		CXCompletionChunk_RightParen = 𝐣𝐥.Cuint(7)
		CXCompletionChunk_LeftBracket = 𝐣𝐥.Cuint(8)
		CXCompletionChunk_RightBracket = 𝐣𝐥.Cuint(9)
		CXCompletionChunk_LeftBrace = 𝐣𝐥.Cuint(10)
		CXCompletionChunk_RightBrace = 𝐣𝐥.Cuint(11)
		CXCompletionChunk_LeftAngle = 𝐣𝐥.Cuint(12)
		CXCompletionChunk_RightAngle = 𝐣𝐥.Cuint(13)
		CXCompletionChunk_Comma = 𝐣𝐥.Cuint(14)
		CXCompletionChunk_ResultType = 𝐣𝐥.Cuint(15)
		CXCompletionChunk_Colon = 𝐣𝐥.Cuint(16)
		CXCompletionChunk_SemiColon = 𝐣𝐥.Cuint(17)
		CXCompletionChunk_Equal = 𝐣𝐥.Cuint(18)
		CXCompletionChunk_HorizontalSpace = 𝐣𝐥.Cuint(19)
		CXCompletionChunk_VerticalSpace = 𝐣𝐥.Cuint(20)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCompletionChunkKind(completion_string::CXCompletionString, chunk_number::𝐣𝐥.Cuint)::𝐣𝐥.@cenum CXCompletionChunkKind
	```
	
	 Determine the kind of a particular chunk within a completion string.
	
	## Parameters
	
	  * `completion_string`: the completion string to query.
	  * `chunk_number`: the 0-based index of the chunk in the completion string.
	
	## Returns
	
	 the kind of the chunk at the index `chunk_number.` 
	
	## Reference
	
	[Index.h:4980](./include/clang-c/Index.h:4980:1)
	""" clang_getCompletionChunkKind
	export clang_getCompletionChunkKind
	𝐣𝐥.@cextern clang_getCompletionChunkKind(completion_string::CXCompletionString, chunk_number::𝐣𝐥.Cuint)::𝐣𝐥.@cenum CXCompletionChunkKind
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCompletionChunkText(completion_string::CXCompletionString, chunk_number::𝐣𝐥.Cuint)::CXString
	```
	
	 Retrieve the text associated with a particular chunk within a completion string.
	
	## Parameters
	
	  * `completion_string`: the completion string to query.
	  * `chunk_number`: the 0-based index of the chunk in the completion string.
	
	## Returns
	
	 the text associated with the chunk at index `chunk_number.` 
	
	## Reference
	
	[Index.h:4994](./include/clang-c/Index.h:4994:1)
	""" clang_getCompletionChunkText
	export clang_getCompletionChunkText
	𝐣𝐥.@cextern clang_getCompletionChunkText(completion_string::CXCompletionString, chunk_number::𝐣𝐥.Cuint)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCompletionChunkCompletionString(completion_string::CXCompletionString, chunk_number::𝐣𝐥.Cuint)::CXCompletionString
	```
	
	 Retrieve the completion string associated with a particular chunk within a completion string.
	
	## Parameters
	
	  * `completion_string`: the completion string to query.
	  * `chunk_number`: the 0-based index of the chunk in the completion string.
	
	## Returns
	
	 the completion string associated with the chunk at index `chunk_number.` 
	
	## Reference
	
	[Index.h:5009](./include/clang-c/Index.h:5009:1)
	""" clang_getCompletionChunkCompletionString
	export clang_getCompletionChunkCompletionString
	𝐣𝐥.@cextern clang_getCompletionChunkCompletionString(completion_string::CXCompletionString, chunk_number::𝐣𝐥.Cuint)::CXCompletionString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getNumCompletionChunks(completion_string::CXCompletionString)::𝐣𝐥.Cuint
	```
	
	 Retrieve the number of chunks in the given code-completion string.
	
	## Reference
	
	[Index.h:5016](./include/clang-c/Index.h:5016:1)
	""" clang_getNumCompletionChunks
	export clang_getNumCompletionChunks
	𝐣𝐥.@cextern clang_getNumCompletionChunks(completion_string::CXCompletionString)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCompletionPriority(completion_string::CXCompletionString)::𝐣𝐥.Cuint
	```
	
	 Determine the priority of this code completion.
	
	## Details
	
	 The priority of a code completion indicates how likely it is that this  particular completion is the completion that the user will select. The priority is selected by various internal heuristics.
	
	## Parameters
	
	  * `completion_string`: The completion string to query.
	
	## Returns
	
	 The priority of this completion string. Smaller values indicate higher-priority (more likely) completions.
	
	## Reference
	
	[Index.h:5031](./include/clang-c/Index.h:5031:1)
	""" clang_getCompletionPriority
	export clang_getCompletionPriority
	𝐣𝐥.@cextern clang_getCompletionPriority(completion_string::CXCompletionString)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCompletionAvailability(completion_string::CXCompletionString)::𝐣𝐥.@cenum CXAvailabilityKind
	```
	
	 Determine the availability of the entity that this code-completion string refers to.
	
	## Parameters
	
	  * `completion_string`: The completion string to query.
	
	## Returns
	
	 The availability of the completion string.
	
	## Reference
	
	[Index.h:5042](./include/clang-c/Index.h:5042:1)
	""" clang_getCompletionAvailability
	export clang_getCompletionAvailability
	𝐣𝐥.@cextern clang_getCompletionAvailability(completion_string::CXCompletionString)::𝐣𝐥.@cenum CXAvailabilityKind
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCompletionNumAnnotations(completion_string::CXCompletionString)::𝐣𝐥.Cuint
	```
	
	 Retrieve the number of annotations associated with the given completion string.
	
	## Parameters
	
	  * `completion_string`: the completion string to query.
	
	## Returns
	
	 the number of annotations associated with the given completion string.
	
	## Reference
	
	[Index.h:5054](./include/clang-c/Index.h:5054:1)
	""" clang_getCompletionNumAnnotations
	export clang_getCompletionNumAnnotations
	𝐣𝐥.@cextern clang_getCompletionNumAnnotations(completion_string::CXCompletionString)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCompletionAnnotation(completion_string::CXCompletionString, annotation_number::𝐣𝐥.Cuint)::CXString
	```
	
	 Retrieve the annotation associated with the given completion string.
	
	## Parameters
	
	  * `completion_string`: the completion string to query.
	  * `annotation_number`: the 0-based index of the annotation of the completion string.
	
	## Returns
	
	 annotation string associated with the completion at index `annotation_number,` or a NULL string if that annotation is not available.
	
	## Reference
	
	[Index.h:5068](./include/clang-c/Index.h:5068:1)
	""" clang_getCompletionAnnotation
	export clang_getCompletionAnnotation
	𝐣𝐥.@cextern clang_getCompletionAnnotation(completion_string::CXCompletionString, annotation_number::𝐣𝐥.Cuint)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCompletionParent(completion_string::CXCompletionString, kind::𝐣𝐥.Ptr{𝐣𝐥.@cenum CXCursorKind})::CXString
	```
	
	 Retrieve the parent context of the given completion string.
	
	## Details
	
	 The parent context of a completion string is the semantic parent of  the declaration (if any) that the code completion represents. For example, a code completion for an Objective-C method would have the method's class or protocol as its context.
	
	## Parameters
	
	  * `completion_string`: The code completion string whose parent is being queried.
	  * `kind`: DEPRECATED: always set to CXCursor_NotImplemented if non-NULL.
	
	## Returns
	
	 The name of the completion parent, e.g., \"NSObject\" if the completion string represents a method in the NSObject class.
	
	## Reference
	
	[Index.h:5088](./include/clang-c/Index.h:5088:1)
	""" clang_getCompletionParent
	export clang_getCompletionParent
	𝐣𝐥.@cextern clang_getCompletionParent(completion_string::CXCompletionString, kind::𝐣𝐥.Ptr{𝐣𝐥.@cenum CXCursorKind})::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCompletionBriefComment(completion_string::CXCompletionString)::CXString
	```
	
	 Retrieve the brief documentation comment attached to the declaration that corresponds to the given completion string.
	
	## Reference
	
	[Index.h:5096](./include/clang-c/Index.h:5096:1)
	""" clang_getCompletionBriefComment
	export clang_getCompletionBriefComment
	𝐣𝐥.@cextern clang_getCompletionBriefComment(completion_string::CXCompletionString)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getCursorCompletionString(cursor::CXCursor)::CXCompletionString
	```
	
	 Retrieve a completion string for an arbitrary declaration or macro definition cursor.
	
	## Parameters
	
	  * `cursor`: The cursor to query.
	
	## Returns
	
	 A non-context-sensitive completion string for declaration and macro definition cursors, or NULL for other kinds of cursors.
	
	## Reference
	
	[Index.h:5108](./include/clang-c/Index.h:5108:1)
	""" clang_getCursorCompletionString
	export clang_getCursorCompletionString
	𝐣𝐥.@cextern clang_getCursorCompletionString(cursor::CXCursor)::CXCompletionString
	
	𝐣𝐥.@doc """
	 Contains the results of code-completion.
	
	## Details
	
	 This data structure contains the results of code completion, as produced by `clang_codeCompleteAt().` Its contents must be freed by `clang_disposeCodeCompleteResults.` 
	
	## Reference
	
	[Index.h:5128](./include/clang-c/Index.h:5128:3)
	""" CXCodeCompleteResults
	export CXCodeCompleteResults
	𝐣𝐥.@ctypedef CXCodeCompleteResults 𝐣𝐥.@cstruct {
		Results::𝐣𝐥.Ptr{CXCompletionResult}
		NumResults::𝐣𝐥.Cuint
	}
	
	𝐣𝐥.@doc """
	 Flags that can be passed to `clang_codeCompleteAt()` to modify its behavior.
	
	## Details
	
	 The enumerators in this enumeration can be bitwise-OR'd together to provide multiple options to `clang_codeCompleteAt().` 
	
	## Reference
	
	[Index.h:5137](./include/clang-c/Index.h:5137:6)
	""" CXCodeComplete_Flags
	𝐣𝐥.@doc """
	 Whether to include macros within the set of code completions returned.
	
	## Reference
	
	[Index.h:5142](./include/clang-c/Index.h:5142:3)
	""" CXCodeComplete_IncludeMacros
	𝐣𝐥.@doc """
	 Whether to include brief documentation within the set of code completions returned.
	
	## Reference
	
	[Index.h:5154](./include/clang-c/Index.h:5154:3)
	""" CXCodeComplete_IncludeBriefComments
	𝐣𝐥.@doc """
	 Whether to include code patterns for language constructs within the set of code completions, e.g., for loops.
	
	## Reference
	
	[Index.h:5148](./include/clang-c/Index.h:5148:3)
	""" CXCodeComplete_IncludeCodePatterns
	export CXCodeComplete_Flags, CXCodeComplete_IncludeBriefComments, CXCodeComplete_IncludeCodePatterns, CXCodeComplete_IncludeMacros
	𝐣𝐥.@cenum CXCodeComplete_Flags {
		CXCodeComplete_IncludeMacros = 𝐣𝐥.Cuint(1)
		CXCodeComplete_IncludeCodePatterns = 𝐣𝐥.Cuint(2)
		CXCodeComplete_IncludeBriefComments = 𝐣𝐥.Cuint(4)
	}
	
	𝐣𝐥.@doc """
	 Completions for Objective-C class messages should be included in the results.
	
	## Reference
	
	[Index.h:5264](./include/clang-c/Index.h:5264:3)
	""" CXCompletionContext_ObjCClassMessage
	𝐣𝐥.@doc """
	 Completions for any possible value (variables, function calls, etc.) should be included in the results.
	
	## Reference
	
	[Index.h:5179](./include/clang-c/Index.h:5179:3)
	""" CXCompletionContext_AnyValue
	𝐣𝐥.@doc """
	 Bits that represent the context under which completion is occurring.
	
	## Details
	
	 The enumerators in this enumeration may be bitwise-OR'd together if multiple contexts are occurring simultaneously.
	
	## Reference
	
	[Index.h:5163](./include/clang-c/Index.h:5163:6)
	""" CXCompletionContext
	𝐣𝐥.@doc """
	 Natural language completions should be included in the results.
	
	## Reference
	
	[Index.h:5280](./include/clang-c/Index.h:5280:3)
	""" CXCompletionContext_NaturalLanguage
	𝐣𝐥.@doc """
	 Completions for fields of the member being accessed using the arrow operator should be included in the results.
	
	## Reference
	
	[Index.h:5205](./include/clang-c/Index.h:5205:3)
	""" CXCompletionContext_ArrowMemberAccess
	𝐣𝐥.@doc """
	 Completions for Objective-C instance messages should be included in the results.
	
	## Reference
	
	[Index.h:5259](./include/clang-c/Index.h:5259:3)
	""" CXCompletionContext_ObjCInstanceMessage
	𝐣𝐥.@doc """
	 Completions for values that resolve to an Objective-C object should be included in the results.
	
	## Reference
	
	[Index.h:5184](./include/clang-c/Index.h:5184:3)
	""" CXCompletionContext_ObjCObjectValue
	𝐣𝐥.@doc """
	 Completions for any possible type should be included in the results.
	
	## Reference
	
	[Index.h:5173](./include/clang-c/Index.h:5173:3)
	""" CXCompletionContext_AnyType
	𝐣𝐥.@doc """
	 Completions for values that resolve to a C++ class type should be included in the results.
	
	## Reference
	
	[Index.h:5194](./include/clang-c/Index.h:5194:3)
	""" CXCompletionContext_CXXClassTypeValue
	𝐣𝐥.@doc """
	 Completions for enum tags should be included in the results.
	
	## Reference
	
	[Index.h:5215](./include/clang-c/Index.h:5215:3)
	""" CXCompletionContext_EnumTag
	𝐣𝐥.@doc """
	 Completions for C++ namespaces and namespace aliases should be included in the results.
	
	## Reference
	
	[Index.h:5233](./include/clang-c/Index.h:5233:3)
	""" CXCompletionContext_Namespace
	𝐣𝐥.@doc """
	 Completions for Objective-C selector names should be included in the results.
	
	## Reference
	
	[Index.h:5269](./include/clang-c/Index.h:5269:3)
	""" CXCompletionContext_ObjCSelectorName
	𝐣𝐥.@doc """
	 Completions for C++ class names should be included in the results.
	
	## Reference
	
	[Index.h:5228](./include/clang-c/Index.h:5228:3)
	""" CXCompletionContext_ClassTag
	𝐣𝐥.@doc """
	 Completions for fields of the member being accessed using the dot operator should be included in the results.
	
	## Reference
	
	[Index.h:5200](./include/clang-c/Index.h:5200:3)
	""" CXCompletionContext_DotMemberAccess
	𝐣𝐥.@doc """
	 Completions for Objective-C interfaces (classes) should be included in the results.
	
	## Reference
	
	[Index.h:5244](./include/clang-c/Index.h:5244:3)
	""" CXCompletionContext_ObjCInterface
	𝐣𝐥.@doc """
	 Completions for preprocessor macro names should be included in the results.
	
	## Reference
	
	[Index.h:5275](./include/clang-c/Index.h:5275:3)
	""" CXCompletionContext_MacroName
	𝐣𝐥.@doc """
	 The current context is unknown, so set all contexts.
	
	## Reference
	
	[Index.h:5285](./include/clang-c/Index.h:5285:3)
	""" CXCompletionContext_Unknown
	𝐣𝐥.@doc """
	 Completions for C++ nested name specifiers should be included in the results.
	
	## Reference
	
	[Index.h:5238](./include/clang-c/Index.h:5238:3)
	""" CXCompletionContext_NestedNameSpecifier
	𝐣𝐥.@doc """
	 Completions for Objective-C protocols should be included in the results.
	
	## Reference
	
	[Index.h:5249](./include/clang-c/Index.h:5249:3)
	""" CXCompletionContext_ObjCProtocol
	𝐣𝐥.@doc """
	 Completions for struct tags should be included in the results.
	
	## Reference
	
	[Index.h:5223](./include/clang-c/Index.h:5223:3)
	""" CXCompletionContext_StructTag
	𝐣𝐥.@doc """
	 The context for completions is unexposed, as only Clang results should be included. (This is equivalent to having no context bits set.)
	
	## Reference
	
	[Index.h:5168](./include/clang-c/Index.h:5168:3)
	""" CXCompletionContext_Unexposed
	𝐣𝐥.@doc """
	 Completions for values that resolve to an Objective-C selector should be included in the results.
	
	## Reference
	
	[Index.h:5189](./include/clang-c/Index.h:5189:3)
	""" CXCompletionContext_ObjCSelectorValue
	𝐣𝐥.@doc """
	 Completions for properties of the Objective-C object being accessed using the dot operator should be included in the results.
	
	## Reference
	
	[Index.h:5210](./include/clang-c/Index.h:5210:3)
	""" CXCompletionContext_ObjCPropertyAccess
	𝐣𝐥.@doc """
	 Completions for Objective-C categories should be included in the results.
	
	## Reference
	
	[Index.h:5254](./include/clang-c/Index.h:5254:3)
	""" CXCompletionContext_ObjCCategory
	𝐣𝐥.@doc """
	 Completions for union tags should be included in the results.
	
	## Reference
	
	[Index.h:5219](./include/clang-c/Index.h:5219:3)
	""" CXCompletionContext_UnionTag
	export CXCompletionContext, CXCompletionContext_AnyType, CXCompletionContext_AnyValue, CXCompletionContext_ArrowMemberAccess, CXCompletionContext_CXXClassTypeValue, CXCompletionContext_ClassTag, CXCompletionContext_DotMemberAccess, CXCompletionContext_EnumTag, CXCompletionContext_MacroName, CXCompletionContext_Namespace, CXCompletionContext_NaturalLanguage, CXCompletionContext_NestedNameSpecifier, CXCompletionContext_ObjCCategory, CXCompletionContext_ObjCClassMessage, CXCompletionContext_ObjCInstanceMessage, CXCompletionContext_ObjCInterface, CXCompletionContext_ObjCObjectValue, CXCompletionContext_ObjCPropertyAccess, CXCompletionContext_ObjCProtocol, CXCompletionContext_ObjCSelectorName, CXCompletionContext_ObjCSelectorValue, CXCompletionContext_StructTag, CXCompletionContext_Unexposed, CXCompletionContext_UnionTag, CXCompletionContext_Unknown
	𝐣𝐥.@cenum CXCompletionContext {
		CXCompletionContext_Unexposed = 𝐣𝐥.Cuint(0)
		CXCompletionContext_AnyType = 𝐣𝐥.Cuint(1)
		CXCompletionContext_AnyValue = 𝐣𝐥.Cuint(2)
		CXCompletionContext_ObjCObjectValue = 𝐣𝐥.Cuint(4)
		CXCompletionContext_ObjCSelectorValue = 𝐣𝐥.Cuint(8)
		CXCompletionContext_CXXClassTypeValue = 𝐣𝐥.Cuint(16)
		CXCompletionContext_DotMemberAccess = 𝐣𝐥.Cuint(32)
		CXCompletionContext_ArrowMemberAccess = 𝐣𝐥.Cuint(64)
		CXCompletionContext_ObjCPropertyAccess = 𝐣𝐥.Cuint(128)
		CXCompletionContext_EnumTag = 𝐣𝐥.Cuint(256)
		CXCompletionContext_UnionTag = 𝐣𝐥.Cuint(512)
		CXCompletionContext_StructTag = 𝐣𝐥.Cuint(1024)
		CXCompletionContext_ClassTag = 𝐣𝐥.Cuint(2048)
		CXCompletionContext_Namespace = 𝐣𝐥.Cuint(4096)
		CXCompletionContext_NestedNameSpecifier = 𝐣𝐥.Cuint(8192)
		CXCompletionContext_ObjCInterface = 𝐣𝐥.Cuint(16384)
		CXCompletionContext_ObjCProtocol = 𝐣𝐥.Cuint(32768)
		CXCompletionContext_ObjCCategory = 𝐣𝐥.Cuint(65536)
		CXCompletionContext_ObjCInstanceMessage = 𝐣𝐥.Cuint(131072)
		CXCompletionContext_ObjCClassMessage = 𝐣𝐥.Cuint(262144)
		CXCompletionContext_ObjCSelectorName = 𝐣𝐥.Cuint(524288)
		CXCompletionContext_MacroName = 𝐣𝐥.Cuint(1048576)
		CXCompletionContext_NaturalLanguage = 𝐣𝐥.Cuint(2097152)
		CXCompletionContext_Unknown = 𝐣𝐥.Cuint(4194303)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_defaultCodeCompleteOptions()::𝐣𝐥.Cuint
	```
	
	 Returns a default set of code-completion options that can be passed to`clang_codeCompleteAt().` 
	
	## Reference
	
	[Index.h:5292](./include/clang-c/Index.h:5292:25)
	""" clang_defaultCodeCompleteOptions
	export clang_defaultCodeCompleteOptions
	𝐣𝐥.@cextern clang_defaultCodeCompleteOptions()::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_codeCompleteAt(TU::CXTranslationUnit, complete_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, complete_line::𝐣𝐥.Cuint, complete_column::𝐣𝐥.Cuint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, num_unsaved_files::𝐣𝐥.Cuint, options::𝐣𝐥.Cuint)::𝐣𝐥.Ptr{CXCodeCompleteResults}
	```
	
	 Perform code completion at a given location in a translation unit.
	
	## Details
	
	 This function performs code completion at a particular file, line, and column within source code, providing results that suggest potential code snippets based on the context of the completion. The basic model for code completion is that Clang will parse a complete source file, performing syntax checking up to the location where code-completion has been requested. At that point, a special code-completion token is passed to the parser, which recognizes this token and determines, based on the current location in the C/Objective-C/C++ grammar and the state of semantic analysis, what completions to provide. These completions are returned via a new `CXCodeCompleteResults` structure.
	
	 Code completion itself is meant to be triggered by the client when the user types punctuation characters or whitespace, at which point the code-completion location will coincide with the cursor. For example, if `p` is a pointer, code-completion might be triggered after the \"-\" and then after the \">\" in `p->.` When the code-completion location is afer the \">\", the completion results will provide, e.g., the members of the struct that \"p\" points to. The client is responsible for placing the cursor at the beginning of the token currently being typed, then filtering the results based on the contents of the token. For example, when code-completing for the expression `p->get,` the client should provide the location just after the \">\" (e.g., pointing at the \"g\") to this code-completion hook. Then, the client can filter the results based on the current token text (\"get\"), only showing those results that start with \"get\". The intent of this interface is to separate the relatively high-latency acquisition of code-completion results from the filtering of results on a per-character basis, which must have a lower latency.
	
	## Parameters
	
	  * `TU`: The translation unit in which code-completion should occur. The source files for this translation unit need not be completely up-to-date (and the contents of those source files may be overridden via `unsaved_files).` Cursors referring into the translation unit may be invalidated by this invocation.
	  * `complete_filename`: The name of the source file where code completion should be performed. This filename may be any file included in the translation unit.
	  * `complete_line`: The line at which code-completion should occur.
	  * `complete_column`: The column at which code-completion should occur. Note that the column should point just after the syntactic construct that initiated code completion, and not in the middle of a lexical token.
	  * `unsaved_files`: the Files that have not yet been saved to disk but may be required for parsing or code completion, including the contents of those files.  The contents and name of these files (as specified by CXUnsavedFile) are copied when necessary, so the client only needs to guarantee their validity until the call to this function returns.
	  * `num_unsaved_files`: The number of unsaved file entries in `unsaved_files.`
	  * `options`: Extra options that control the behavior of code completion, expressed as a bitwise OR of the enumerators of the CXCodeComplete_Flags enumeration. The  `clang_defaultCodeCompleteOptions()` function returns a default set of code-completion options.
	
	## Returns
	
	 If successful, a new `CXCodeCompleteResults` structure containing code-completion results, which should eventually be freed with `clang_disposeCodeCompleteResults().` If code completion fails, returns NULL.
	
	## Reference
	
	[Index.h:5363](./include/clang-c/Index.h:5363:24)
	""" clang_codeCompleteAt
	export clang_codeCompleteAt
	𝐣𝐥.@cextern clang_codeCompleteAt(TU::CXTranslationUnit, complete_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, complete_line::𝐣𝐥.Cuint, complete_column::𝐣𝐥.Cuint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, num_unsaved_files::𝐣𝐥.Cuint, options::𝐣𝐥.Cuint)::𝐣𝐥.Ptr{CXCodeCompleteResults}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_sortCodeCompletionResults(Results::𝐣𝐥.Ptr{CXCompletionResult}, NumResults::𝐣𝐥.Cuint)::𝐣𝐥.Cvoid
	```
	
	 Sort the code-completion results in case-insensitive alphabetical  order.
	
	## Parameters
	
	  * `Results`: The set of results to sort.
	  * `NumResults`: The number of results in `Results.`
	
	## Reference
	
	[Index.h:5379](./include/clang-c/Index.h:5379:6)
	""" clang_sortCodeCompletionResults
	export clang_sortCodeCompletionResults
	𝐣𝐥.@cextern clang_sortCodeCompletionResults(Results::𝐣𝐥.Ptr{CXCompletionResult}, NumResults::𝐣𝐥.Cuint)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_disposeCodeCompleteResults(Results::𝐣𝐥.Ptr{CXCodeCompleteResults})::𝐣𝐥.Cvoid
	```
	
	 Free the given set of code-completion results.
	
	## Reference
	
	[Index.h:5386](./include/clang-c/Index.h:5386:6)
	""" clang_disposeCodeCompleteResults
	export clang_disposeCodeCompleteResults
	𝐣𝐥.@cextern clang_disposeCodeCompleteResults(Results::𝐣𝐥.Ptr{CXCodeCompleteResults})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_codeCompleteGetNumDiagnostics(Results::𝐣𝐥.Ptr{CXCodeCompleteResults})::𝐣𝐥.Cuint
	```
	
	 Determine the number of diagnostics produced prior to the location where code completion was performed.
	
	## Reference
	
	[Index.h:5393](./include/clang-c/Index.h:5393:10)
	""" clang_codeCompleteGetNumDiagnostics
	export clang_codeCompleteGetNumDiagnostics
	𝐣𝐥.@cextern clang_codeCompleteGetNumDiagnostics(Results::𝐣𝐥.Ptr{CXCodeCompleteResults})::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_codeCompleteGetDiagnostic(Results::𝐣𝐥.Ptr{CXCodeCompleteResults}, Index::𝐣𝐥.Cuint)::CXDiagnostic
	```
	
	 Retrieve a diagnostic associated with the given code completion.
	
	## Parameters
	
	  * `Results`: the code completion results to query.
	  * `Index`: the zero-based diagnostic number to retrieve.
	
	## Returns
	
	 the requested diagnostic. This diagnostic must be freed via a call to `clang_disposeDiagnostic().` 
	
	## Reference
	
	[Index.h:5405](./include/clang-c/Index.h:5405:14)
	""" clang_codeCompleteGetDiagnostic
	export clang_codeCompleteGetDiagnostic
	𝐣𝐥.@cextern clang_codeCompleteGetDiagnostic(Results::𝐣𝐥.Ptr{CXCodeCompleteResults}, Index::𝐣𝐥.Cuint)::CXDiagnostic
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_codeCompleteGetContexts(Results::𝐣𝐥.Ptr{CXCodeCompleteResults})::𝐣𝐥.Culonglong
	```
	
	 Determines what completions are appropriate for the context the given code completion.
	
	## Parameters
	
	  * `Results`: the code completion results to query
	
	## Returns
	
	 the kinds of completions that are appropriate for use along with the given code completion results.
	
	## Reference
	
	[Index.h:5418](./include/clang-c/Index.h:5418:20)
	""" clang_codeCompleteGetContexts
	export clang_codeCompleteGetContexts
	𝐣𝐥.@cextern clang_codeCompleteGetContexts(Results::𝐣𝐥.Ptr{CXCodeCompleteResults})::𝐣𝐥.Culonglong
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_codeCompleteGetContainerKind(Results::𝐣𝐥.Ptr{CXCodeCompleteResults}, IsIncomplete::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.@cenum CXCursorKind
	```
	
	 Returns the cursor kind for the container for the current code completion context. The container is only guaranteed to be set for contexts where a container exists (i.e. member accesses or Objective-C message sends); if there is not a container, this function will return CXCursor_InvalidCode.
	
	## Parameters
	
	  * `Results`: the code completion results to query
	  * `IsIncomplete`: on return, this value will be false if Clang has complete information about the container. If Clang does not have complete information, this value will be true.
	
	## Returns
	
	 the container kind, or CXCursor_InvalidCode if there is not a container
	
	## Reference
	
	[Index.h:5438](./include/clang-c/Index.h:5438:19)
	""" clang_codeCompleteGetContainerKind
	export clang_codeCompleteGetContainerKind
	𝐣𝐥.@cextern clang_codeCompleteGetContainerKind(Results::𝐣𝐥.Ptr{CXCodeCompleteResults}, IsIncomplete::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.@cenum CXCursorKind
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_codeCompleteGetContainerUSR(Results::𝐣𝐥.Ptr{CXCodeCompleteResults})::CXString
	```
	
	 Returns the USR for the container for the current code completion context. If there is not a container for the current context, this function will return the empty string.
	
	## Parameters
	
	  * `Results`: the code completion results to query
	
	## Returns
	
	 the USR for the container
	
	## Reference
	
	[Index.h:5452](./include/clang-c/Index.h:5452:10)
	""" clang_codeCompleteGetContainerUSR
	export clang_codeCompleteGetContainerUSR
	𝐣𝐥.@cextern clang_codeCompleteGetContainerUSR(Results::𝐣𝐥.Ptr{CXCodeCompleteResults})::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_codeCompleteGetObjCSelector(Results::𝐣𝐥.Ptr{CXCodeCompleteResults})::CXString
	```
	
	 Returns the currently-entered selector for an Objective-C message send, formatted like \"initWithFoo:bar:\". Only guaranteed to return a non-empty string for CXCompletionContext_ObjCInstanceMessage and CXCompletionContext_ObjCClassMessage.
	
	## Parameters
	
	  * `Results`: the code completion results to query
	
	## Returns
	
	 the selector (or partial selector) that has been entered thus far for an Objective-C message send.
	
	## Reference
	
	[Index.h:5466](./include/clang-c/Index.h:5466:10)
	""" clang_codeCompleteGetObjCSelector
	export clang_codeCompleteGetObjCSelector
	𝐣𝐥.@cextern clang_codeCompleteGetObjCSelector(Results::𝐣𝐥.Ptr{CXCodeCompleteResults})::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getClangVersion()::CXString
	```
	
	 Return a version string, suitable for showing to a user, but not        intended to be parsed (the format is not guaranteed to be stable).
	
	## Reference
	
	[Index.h:5482](./include/clang-c/Index.h:5482:25)
	""" clang_getClangVersion
	export clang_getClangVersion
	𝐣𝐥.@cextern clang_getClangVersion()::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_toggleCrashRecovery(isEnabled::𝐣𝐥.Cuint)::𝐣𝐥.Cvoid
	```
	
	 Enable/disable crash recovery.
	
	## Parameters
	
	  * `isEnabled`: Flag to indicate if crash recovery is enabled.  A non-zero        value enables crash recovery, while 0 disables it.
	
	## Reference
	
	[Index.h:5490](./include/clang-c/Index.h:5490:21)
	""" clang_toggleCrashRecovery
	export clang_toggleCrashRecovery
	𝐣𝐥.@cextern clang_toggleCrashRecovery(isEnabled::𝐣𝐥.Cuint)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	 Visitor invoked for each file in a translation unit        (used with clang_getInclusions()).
	
	## Details
	
	 This visitor function will be invoked by clang_getInclusions() for each file included (either at the top-level or by #include directives) within a translation unit.  The first argument is the file being included, and the second and third arguments provide the inclusion stack.  The array is sorted in order of immediate inclusion.  For example, the first element refers to the location that included 'included_file'.
	
	## Reference
	
	[Index.h:5503](./include/clang-c/Index.h:5503:16)
	""" CXInclusionVisitor
	export CXInclusionVisitor
	𝐣𝐥.@ctypedef CXInclusionVisitor 𝐣𝐥.Ptr{𝐣𝐥.Cfunction{𝐣𝐥.Cvoid, 𝐣𝐥.Tuple{CXFile, 𝐣𝐥.Ptr{CXSourceLocation}, 𝐣𝐥.Cuint, CXClientData}, 𝐣𝐥.CDECL}}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getInclusions(tu::CXTranslationUnit, visitor::CXInclusionVisitor, client_data::CXClientData)::𝐣𝐥.Cvoid
	```
	
	 Visit the set of preprocessor inclusions in a translation unit.   The visitor function is called with the provided data for every included   file.  This does not include headers included by the PCH file (unless one   is inspecting the inclusions in the PCH file itself).
	
	## Reference
	
	[Index.h:5514](./include/clang-c/Index.h:5514:21)
	""" clang_getInclusions
	export clang_getInclusions
	𝐣𝐥.@cextern clang_getInclusions(tu::CXTranslationUnit, visitor::CXInclusionVisitor, client_data::CXClientData)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5524](./include/clang-c/Index.h:5524:3)
	""" CXEval_Other
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5521](./include/clang-c/Index.h:5521:3)
	""" CXEval_ObjCStrLiteral
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5522](./include/clang-c/Index.h:5522:3)
	""" CXEval_StrLiteral
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5528](./include/clang-c/Index.h:5528:3)
	""" CXEvalResultKind
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5519](./include/clang-c/Index.h:5519:3)
	""" CXEval_Int
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5526](./include/clang-c/Index.h:5526:3)
	""" CXEval_UnExposed
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5523](./include/clang-c/Index.h:5523:3)
	""" CXEval_CFStr
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5520](./include/clang-c/Index.h:5520:3)
	""" CXEval_Float
	export CXEvalResultKind, CXEval_CFStr, CXEval_Float, CXEval_Int, CXEval_ObjCStrLiteral, CXEval_Other, CXEval_StrLiteral, CXEval_UnExposed
	𝐣𝐥.@ctypedef CXEvalResultKind 𝐣𝐥.@cenum {
		CXEval_Int = 𝐣𝐥.Cuint(1)
		CXEval_Float = 𝐣𝐥.Cuint(2)
		CXEval_ObjCStrLiteral = 𝐣𝐥.Cuint(3)
		CXEval_StrLiteral = 𝐣𝐥.Cuint(4)
		CXEval_CFStr = 𝐣𝐥.Cuint(5)
		CXEval_Other = 𝐣𝐥.Cuint(6)
		CXEval_UnExposed = 𝐣𝐥.Cuint(0)
	}
	
	𝐣𝐥.@doc """
	 Evaluation result of a cursor
	
	## Reference
	
	[Index.h:5533](./include/clang-c/Index.h:5533:16)
	""" CXEvalResult
	export CXEvalResult
	𝐣𝐥.@ctypedef CXEvalResult 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_Evaluate(C::CXCursor)::CXEvalResult
	```
	
	 If cursor is a statement declaration tries to evaluate the  statement and if its variable, tries to evaluate its initializer, into its corresponding type.
	
	## Reference
	
	[Index.h:5540](./include/clang-c/Index.h:5540:29)
	""" clang_Cursor_Evaluate
	export clang_Cursor_Evaluate
	𝐣𝐥.@cextern clang_Cursor_Evaluate(C::CXCursor)::CXEvalResult
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_EvalResult_getKind(E::CXEvalResult)::CXEvalResultKind
	```
	
	 Returns the kind of the evaluated result.
	
	## Reference
	
	[Index.h:5545](./include/clang-c/Index.h:5545:33)
	""" clang_EvalResult_getKind
	export clang_EvalResult_getKind
	𝐣𝐥.@cextern clang_EvalResult_getKind(E::CXEvalResult)::CXEvalResultKind
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_EvalResult_getAsInt(E::CXEvalResult)::𝐣𝐥.Cint
	```
	
	 Returns the evaluation result as integer if the kind is Int.
	
	## Reference
	
	[Index.h:5551](./include/clang-c/Index.h:5551:20)
	""" clang_EvalResult_getAsInt
	export clang_EvalResult_getAsInt
	𝐣𝐥.@cextern clang_EvalResult_getAsInt(E::CXEvalResult)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_EvalResult_getAsLongLong(E::CXEvalResult)::𝐣𝐥.Clonglong
	```
	
	 Returns the evaluation result as a long long integer if the kind is Int. This prevents overflows that may happen if the result is returned with clang_EvalResult_getAsInt.
	
	## Reference
	
	[Index.h:5558](./include/clang-c/Index.h:5558:26)
	""" clang_EvalResult_getAsLongLong
	export clang_EvalResult_getAsLongLong
	𝐣𝐥.@cextern clang_EvalResult_getAsLongLong(E::CXEvalResult)::𝐣𝐥.Clonglong
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_EvalResult_isUnsignedInt(E::CXEvalResult)::𝐣𝐥.Cuint
	```
	
	 Returns a non-zero value if the kind is Int and the evaluation result resulted in an unsigned integer.
	
	## Reference
	
	[Index.h:5564](./include/clang-c/Index.h:5564:25)
	""" clang_EvalResult_isUnsignedInt
	export clang_EvalResult_isUnsignedInt
	𝐣𝐥.@cextern clang_EvalResult_isUnsignedInt(E::CXEvalResult)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_EvalResult_getAsUnsigned(E::CXEvalResult)::𝐣𝐥.Culonglong
	```
	
	 Returns the evaluation result as an unsigned integer if the kind is Int and clang_EvalResult_isUnsignedInt is non-zero.
	
	## Reference
	
	[Index.h:5570](./include/clang-c/Index.h:5570:35)
	""" clang_EvalResult_getAsUnsigned
	export clang_EvalResult_getAsUnsigned
	𝐣𝐥.@cextern clang_EvalResult_getAsUnsigned(E::CXEvalResult)::𝐣𝐥.Culonglong
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_EvalResult_getAsDouble(E::CXEvalResult)::𝐣𝐥.Cdouble
	```
	
	 Returns the evaluation result as double if the kind is double.
	
	## Reference
	
	[Index.h:5576](./include/clang-c/Index.h:5576:23)
	""" clang_EvalResult_getAsDouble
	export clang_EvalResult_getAsDouble
	𝐣𝐥.@cextern clang_EvalResult_getAsDouble(E::CXEvalResult)::𝐣𝐥.Cdouble
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_EvalResult_getAsStr(E::CXEvalResult)::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}
	```
	
	 Returns the evaluation result as a constant string if the kind is other than Int or float. User must not free this pointer, instead call clang_EvalResult_dispose on the CXEvalResult returned by clang_Cursor_Evaluate.
	
	## Reference
	
	[Index.h:5584](./include/clang-c/Index.h:5584:28)
	""" clang_EvalResult_getAsStr
	export clang_EvalResult_getAsStr
	𝐣𝐥.@cextern clang_EvalResult_getAsStr(E::CXEvalResult)::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_EvalResult_dispose(E::CXEvalResult)::𝐣𝐥.Cvoid
	```
	
	 Disposes the created Eval memory.
	
	## Reference
	
	[Index.h:5589](./include/clang-c/Index.h:5589:21)
	""" clang_EvalResult_dispose
	export clang_EvalResult_dispose
	𝐣𝐥.@cextern clang_EvalResult_dispose(E::CXEvalResult)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	 A remapping of original source files and their translated files.
	
	## Reference
	
	[Index.h:5602](./include/clang-c/Index.h:5602:15)
	""" CXRemapping
	export CXRemapping
	𝐣𝐥.@ctypedef CXRemapping 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getRemappings(path::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXRemapping
	```
	
	 Retrieve a remapping.
	
	## Parameters
	
	  * `path`: the path that contains metadata about remappings.
	
	## Returns
	
	 the requested remapping. This remapping must be freed via a call to `clang_remap_dispose().` Can return NULL if an error occurred.
	
	## Reference
	
	[Index.h:5612](./include/clang-c/Index.h:5612:28)
	""" clang_getRemappings
	export clang_getRemappings
	𝐣𝐥.@cextern clang_getRemappings(path::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})::CXRemapping
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_getRemappingsFromFileList(filePaths::𝐣𝐥.Ptr{𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}}, numFiles::𝐣𝐥.Cuint)::CXRemapping
	```
	
	 Retrieve a remapping.
	
	## Parameters
	
	  * `filePaths`: pointer to an array of file paths containing remapping info.
	  * `numFiles`: number of file paths.
	
	## Returns
	
	 the requested remapping. This remapping must be freed via a call to `clang_remap_dispose().` Can return NULL if an error occurred.
	
	## Reference
	
	[Index.h:5625](./include/clang-c/Index.h:5625:13)
	""" clang_getRemappingsFromFileList
	export clang_getRemappingsFromFileList
	𝐣𝐥.@cextern clang_getRemappingsFromFileList(filePaths::𝐣𝐥.Ptr{𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}}, numFiles::𝐣𝐥.Cuint)::CXRemapping
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_remap_getNumFiles(var\"?1?\"::CXRemapping)::𝐣𝐥.Cuint
	```
	
	 Determine the number of remappings.
	
	## Reference
	
	[Index.h:5631](./include/clang-c/Index.h:5631:25)
	""" clang_remap_getNumFiles
	export clang_remap_getNumFiles
	𝐣𝐥.@cextern clang_remap_getNumFiles(var"?1?"::CXRemapping)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_remap_getFilenames(var\"?1?\"::CXRemapping, index::𝐣𝐥.Cuint, original::𝐣𝐥.Ptr{CXString}, transformed::𝐣𝐥.Ptr{CXString})::𝐣𝐥.Cvoid
	```
	
	 Get the original and the associated filename from the remapping.
	
	## Parameters
	
	  * `original`: If non-NULL, will be set to the original filename.
	  * `transformed`: If non-NULL, will be set to the filename that the original is associated with.
	
	## Reference
	
	[Index.h:5641](./include/clang-c/Index.h:5641:21)
	""" clang_remap_getFilenames
	export clang_remap_getFilenames
	𝐣𝐥.@cextern clang_remap_getFilenames(var"?1?"::CXRemapping, index::𝐣𝐥.Cuint, original::𝐣𝐥.Ptr{CXString}, transformed::𝐣𝐥.Ptr{CXString})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_remap_dispose(var\"?1?\"::CXRemapping)::𝐣𝐥.Cvoid
	```
	
	 Dispose the remapping.
	
	## Reference
	
	[Index.h:5647](./include/clang-c/Index.h:5647:21)
	""" clang_remap_dispose
	export clang_remap_dispose
	𝐣𝐥.@cextern clang_remap_dispose(var"?1?"::CXRemapping)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5660](./include/clang-c/Index.h:5660:3)
	""" CXVisit_Continue
	𝐣𝐥.@doc """
	 CINDEX_HIGH Higher level API functions
	
	## Details
	
	 @{
	
	## Reference
	
	[Index.h:5658](./include/clang-c/Index.h:5658:6)
	""" CXVisitorResult
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5659](./include/clang-c/Index.h:5659:3)
	""" CXVisit_Break
	export CXVisit_Break, CXVisit_Continue, CXVisitorResult
	𝐣𝐥.@cenum CXVisitorResult {
		CXVisit_Break = 𝐣𝐥.Cuint(0)
		CXVisit_Continue = 𝐣𝐥.Cuint(1)
	}
	
	𝐣𝐥.@doc """
	## References
	
	[Index.h:5663](./include/clang-c/Index.h:5663:16)
	
	[Index.h:5666](./include/clang-c/Index.h:5666:3)
	""" CXCursorAndRangeVisitor
	export CXCursorAndRangeVisitor
	𝐣𝐥.@ctypedef CXCursorAndRangeVisitor 𝐣𝐥.@cstruct CXCursorAndRangeVisitor {
		context::𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
		visit::𝐣𝐥.Ptr{𝐣𝐥.Cfunction{(𝐣𝐥.@cenum CXVisitorResult), 𝐣𝐥.Tuple{𝐣𝐥.Ptr{𝐣𝐥.Cvoid}, CXCursor, CXSourceRange}, 𝐣𝐥.CDECL}}
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5683](./include/clang-c/Index.h:5683:3)
	""" CXResult
	𝐣𝐥.@doc """
	 Function returned successfully.
	
	## Reference
	
	[Index.h:5672](./include/clang-c/Index.h:5672:3)
	""" CXResult_Success
	𝐣𝐥.@doc """
	 One of the parameters was invalid for the function.
	
	## Reference
	
	[Index.h:5676](./include/clang-c/Index.h:5676:3)
	""" CXResult_Invalid
	𝐣𝐥.@doc """
	 The function was terminated by a callback (e.g. it returned CXVisit_Break)
	
	## Reference
	
	[Index.h:5681](./include/clang-c/Index.h:5681:3)
	""" CXResult_VisitBreak
	export CXResult, CXResult_Invalid, CXResult_Success, CXResult_VisitBreak
	𝐣𝐥.@ctypedef CXResult 𝐣𝐥.@cenum {
		CXResult_Success = 𝐣𝐥.Cuint(0)
		CXResult_Invalid = 𝐣𝐥.Cuint(1)
		CXResult_VisitBreak = 𝐣𝐥.Cuint(2)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_findReferencesInFile(cursor::CXCursor, file::CXFile, visitor::CXCursorAndRangeVisitor)::CXResult
	```
	
	 Find references of a declaration in a specific file.
	
	## Parameters
	
	  * `cursor`: pointing to a declaration or a reference of one.
	  * `file`: to search for references.
	  * `visitor`: callback that will receive pairs of CXCursor/CXSourceRange for each reference found. The CXSourceRange will point inside the file; if the reference is inside a macro (and not a macro argument) the CXSourceRange will be invalid.
	
	## Returns
	
	 one of the CXResult enumerators.
	
	## Reference
	
	[Index.h:5699](./include/clang-c/Index.h:5699:25)
	""" clang_findReferencesInFile
	export clang_findReferencesInFile
	𝐣𝐥.@cextern clang_findReferencesInFile(cursor::CXCursor, file::CXFile, visitor::CXCursorAndRangeVisitor)::CXResult
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_findIncludesInFile(TU::CXTranslationUnit, file::CXFile, visitor::CXCursorAndRangeVisitor)::CXResult
	```
	
	 Find #import/#include directives in a specific file.
	
	## Parameters
	
	  * `TU`: translation unit containing the file to query.
	  * `file`: to search for #import/#include directives.
	  * `visitor`: callback that will receive pairs of CXCursor/CXSourceRange for each directive found.
	
	## Returns
	
	 one of the CXResult enumerators.
	
	## Reference
	
	[Index.h:5714](./include/clang-c/Index.h:5714:25)
	""" clang_findIncludesInFile
	export clang_findIncludesInFile
	𝐣𝐥.@cextern clang_findIncludesInFile(TU::CXTranslationUnit, file::CXFile, visitor::CXCursorAndRangeVisitor)::CXResult
	
	𝐣𝐥.@doc """
	 The client's data object that is associated with a CXFile.
	
	## Reference
	
	[Index.h:5738](./include/clang-c/Index.h:5738:15)
	""" CXIdxClientFile
	export CXIdxClientFile
	𝐣𝐥.@ctypedef CXIdxClientFile 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	 The client's data object that is associated with a semantic entity.
	
	## Reference
	
	[Index.h:5743](./include/clang-c/Index.h:5743:15)
	""" CXIdxClientEntity
	export CXIdxClientEntity
	𝐣𝐥.@ctypedef CXIdxClientEntity 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	 The client's data object that is associated with a semantic container of entities.
	
	## Reference
	
	[Index.h:5749](./include/clang-c/Index.h:5749:15)
	""" CXIdxClientContainer
	export CXIdxClientContainer
	𝐣𝐥.@ctypedef CXIdxClientContainer 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	 The client's data object that is associated with an AST file (PCH or module).
	
	## Reference
	
	[Index.h:5755](./include/clang-c/Index.h:5755:15)
	""" CXIdxClientASTFile
	export CXIdxClientASTFile
	𝐣𝐥.@ctypedef CXIdxClientASTFile 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	 Source location passed to index callbacks.
	
	## Reference
	
	[Index.h:5763](./include/clang-c/Index.h:5763:3)
	""" CXIdxLoc
	export CXIdxLoc
	𝐣𝐥.@ctypedef CXIdxLoc 𝐣𝐥.@cstruct {
		ptr_data::𝐣𝐥.Ptr{𝐣𝐥.Cvoid}[2]
		int_data::𝐣𝐥.Cuint
	}
	
	𝐣𝐥.@doc """
	 Data for ppIncludedFile callback.
	
	## Reference
	
	[Index.h:5788](./include/clang-c/Index.h:5788:3)
	""" CXIdxIncludedFileInfo
	export CXIdxIncludedFileInfo
	𝐣𝐥.@ctypedef CXIdxIncludedFileInfo 𝐣𝐥.@cstruct {
		hashLoc::CXIdxLoc
		filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}
		file::CXFile
		isImport::𝐣𝐥.Cint
		isAngled::𝐣𝐥.Cint
		isModuleImport::𝐣𝐥.Cint
	}
	
	𝐣𝐥.@doc """
	 Data for IndexerCallbacks#importedASTFile.
	
	## Reference
	
	[Index.h:5812](./include/clang-c/Index.h:5812:3)
	""" CXIdxImportedASTFileInfo
	export CXIdxImportedASTFileInfo
	𝐣𝐥.@ctypedef CXIdxImportedASTFileInfo 𝐣𝐥.@cstruct {
		file::CXFile
		var"module"::CXModule
		loc::CXIdxLoc
		isImplicit::𝐣𝐥.Cint
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5823](./include/clang-c/Index.h:5823:3)
	""" CXIdxEntity_ObjCProtocol
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5841](./include/clang-c/Index.h:5841:3)
	""" CXIdxEntity_CXXConstructor
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5839](./include/clang-c/Index.h:5839:3)
	""" CXIdxEntity_CXXStaticMethod
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5842](./include/clang-c/Index.h:5842:3)
	""" CXIdxEntity_CXXDestructor
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5822](./include/clang-c/Index.h:5822:3)
	""" CXIdxEntity_ObjCClass
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5826](./include/clang-c/Index.h:5826:3)
	""" CXIdxEntity_ObjCInstanceMethod
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5833](./include/clang-c/Index.h:5833:3)
	""" CXIdxEntity_Union
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5818](./include/clang-c/Index.h:5818:3)
	""" CXIdxEntity_Variable
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5815](./include/clang-c/Index.h:5815:3)
	""" CXIdxEntity_Unexposed
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5832](./include/clang-c/Index.h:5832:3)
	""" CXIdxEntity_Struct
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5824](./include/clang-c/Index.h:5824:3)
	""" CXIdxEntity_ObjCCategory
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5844](./include/clang-c/Index.h:5844:3)
	""" CXIdxEntity_CXXTypeAlias
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5837](./include/clang-c/Index.h:5837:3)
	""" CXIdxEntity_CXXNamespaceAlias
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5831](./include/clang-c/Index.h:5831:3)
	""" CXIdxEntity_Enum
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5819](./include/clang-c/Index.h:5819:3)
	""" CXIdxEntity_Field
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5838](./include/clang-c/Index.h:5838:3)
	""" CXIdxEntity_CXXStaticVariable
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5816](./include/clang-c/Index.h:5816:3)
	""" CXIdxEntity_Typedef
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5817](./include/clang-c/Index.h:5817:3)
	""" CXIdxEntity_Function
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5840](./include/clang-c/Index.h:5840:3)
	""" CXIdxEntity_CXXInstanceMethod
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5843](./include/clang-c/Index.h:5843:3)
	""" CXIdxEntity_CXXConversionFunction
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5820](./include/clang-c/Index.h:5820:3)
	""" CXIdxEntity_EnumConstant
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5829](./include/clang-c/Index.h:5829:3)
	""" CXIdxEntity_ObjCIvar
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5828](./include/clang-c/Index.h:5828:3)
	""" CXIdxEntity_ObjCProperty
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5835](./include/clang-c/Index.h:5835:3)
	""" CXIdxEntity_CXXClass
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5845](./include/clang-c/Index.h:5845:3)
	""" CXIdxEntity_CXXInterface
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5827](./include/clang-c/Index.h:5827:3)
	""" CXIdxEntity_ObjCClassMethod
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5836](./include/clang-c/Index.h:5836:3)
	""" CXIdxEntity_CXXNamespace
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5847](./include/clang-c/Index.h:5847:3)
	""" CXIdxEntityKind
	export CXIdxEntityKind, CXIdxEntity_CXXClass, CXIdxEntity_CXXConstructor, CXIdxEntity_CXXConversionFunction, CXIdxEntity_CXXDestructor, CXIdxEntity_CXXInstanceMethod, CXIdxEntity_CXXInterface, CXIdxEntity_CXXNamespace, CXIdxEntity_CXXNamespaceAlias, CXIdxEntity_CXXStaticMethod, CXIdxEntity_CXXStaticVariable, CXIdxEntity_CXXTypeAlias, CXIdxEntity_Enum, CXIdxEntity_EnumConstant, CXIdxEntity_Field, CXIdxEntity_Function, CXIdxEntity_ObjCCategory, CXIdxEntity_ObjCClass, CXIdxEntity_ObjCClassMethod, CXIdxEntity_ObjCInstanceMethod, CXIdxEntity_ObjCIvar, CXIdxEntity_ObjCProperty, CXIdxEntity_ObjCProtocol, CXIdxEntity_Struct, CXIdxEntity_Typedef, CXIdxEntity_Unexposed, CXIdxEntity_Union, CXIdxEntity_Variable
	𝐣𝐥.@ctypedef CXIdxEntityKind 𝐣𝐥.@cenum {
		CXIdxEntity_Unexposed = 𝐣𝐥.Cuint(0)
		CXIdxEntity_Typedef = 𝐣𝐥.Cuint(1)
		CXIdxEntity_Function = 𝐣𝐥.Cuint(2)
		CXIdxEntity_Variable = 𝐣𝐥.Cuint(3)
		CXIdxEntity_Field = 𝐣𝐥.Cuint(4)
		CXIdxEntity_EnumConstant = 𝐣𝐥.Cuint(5)
		CXIdxEntity_ObjCClass = 𝐣𝐥.Cuint(6)
		CXIdxEntity_ObjCProtocol = 𝐣𝐥.Cuint(7)
		CXIdxEntity_ObjCCategory = 𝐣𝐥.Cuint(8)
		CXIdxEntity_ObjCInstanceMethod = 𝐣𝐥.Cuint(9)
		CXIdxEntity_ObjCClassMethod = 𝐣𝐥.Cuint(10)
		CXIdxEntity_ObjCProperty = 𝐣𝐥.Cuint(11)
		CXIdxEntity_ObjCIvar = 𝐣𝐥.Cuint(12)
		CXIdxEntity_Enum = 𝐣𝐥.Cuint(13)
		CXIdxEntity_Struct = 𝐣𝐥.Cuint(14)
		CXIdxEntity_Union = 𝐣𝐥.Cuint(15)
		CXIdxEntity_CXXClass = 𝐣𝐥.Cuint(16)
		CXIdxEntity_CXXNamespace = 𝐣𝐥.Cuint(17)
		CXIdxEntity_CXXNamespaceAlias = 𝐣𝐥.Cuint(18)
		CXIdxEntity_CXXStaticVariable = 𝐣𝐥.Cuint(19)
		CXIdxEntity_CXXStaticMethod = 𝐣𝐥.Cuint(20)
		CXIdxEntity_CXXInstanceMethod = 𝐣𝐥.Cuint(21)
		CXIdxEntity_CXXConstructor = 𝐣𝐥.Cuint(22)
		CXIdxEntity_CXXDestructor = 𝐣𝐥.Cuint(23)
		CXIdxEntity_CXXConversionFunction = 𝐣𝐥.Cuint(24)
		CXIdxEntity_CXXTypeAlias = 𝐣𝐥.Cuint(25)
		CXIdxEntity_CXXInterface = 𝐣𝐥.Cuint(26)
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5854](./include/clang-c/Index.h:5854:3)
	""" CXIdxEntityLang_Swift
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5852](./include/clang-c/Index.h:5852:3)
	""" CXIdxEntityLang_ObjC
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5851](./include/clang-c/Index.h:5851:3)
	""" CXIdxEntityLang_C
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5853](./include/clang-c/Index.h:5853:3)
	""" CXIdxEntityLang_CXX
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5850](./include/clang-c/Index.h:5850:3)
	""" CXIdxEntityLang_None
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5855](./include/clang-c/Index.h:5855:3)
	""" CXIdxEntityLanguage
	export CXIdxEntityLang_C, CXIdxEntityLang_CXX, CXIdxEntityLang_None, CXIdxEntityLang_ObjC, CXIdxEntityLang_Swift, CXIdxEntityLanguage
	𝐣𝐥.@ctypedef CXIdxEntityLanguage 𝐣𝐥.@cenum {
		CXIdxEntityLang_None = 𝐣𝐥.Cuint(0)
		CXIdxEntityLang_C = 𝐣𝐥.Cuint(1)
		CXIdxEntityLang_ObjC = 𝐣𝐥.Cuint(2)
		CXIdxEntityLang_CXX = 𝐣𝐥.Cuint(3)
		CXIdxEntityLang_Swift = 𝐣𝐥.Cuint(4)
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5868](./include/clang-c/Index.h:5868:3)
	""" CXIdxEntity_NonTemplate
	𝐣𝐥.@doc """
	 Extra C++ template information for an entity. This can apply to: CXIdxEntity_Function CXIdxEntity_CXXClass CXIdxEntity_CXXStaticMethod CXIdxEntity_CXXInstanceMethod CXIdxEntity_CXXConstructor CXIdxEntity_CXXConversionFunction CXIdxEntity_CXXTypeAlias
	
	## Reference
	
	[Index.h:5872](./include/clang-c/Index.h:5872:3)
	""" CXIdxEntityCXXTemplateKind
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5870](./include/clang-c/Index.h:5870:3)
	""" CXIdxEntity_TemplatePartialSpecialization
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5869](./include/clang-c/Index.h:5869:3)
	""" CXIdxEntity_Template
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5871](./include/clang-c/Index.h:5871:3)
	""" CXIdxEntity_TemplateSpecialization
	export CXIdxEntityCXXTemplateKind, CXIdxEntity_NonTemplate, CXIdxEntity_Template, CXIdxEntity_TemplatePartialSpecialization, CXIdxEntity_TemplateSpecialization
	𝐣𝐥.@ctypedef CXIdxEntityCXXTemplateKind 𝐣𝐥.@cenum {
		CXIdxEntity_NonTemplate = 𝐣𝐥.Cuint(0)
		CXIdxEntity_Template = 𝐣𝐥.Cuint(1)
		CXIdxEntity_TemplatePartialSpecialization = 𝐣𝐥.Cuint(2)
		CXIdxEntity_TemplateSpecialization = 𝐣𝐥.Cuint(3)
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5878](./include/clang-c/Index.h:5878:3)
	""" CXIdxAttr_IBOutletCollection
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5875](./include/clang-c/Index.h:5875:3)
	""" CXIdxAttr_Unexposed
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5879](./include/clang-c/Index.h:5879:3)
	""" CXIdxAttrKind
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5876](./include/clang-c/Index.h:5876:3)
	""" CXIdxAttr_IBAction
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5877](./include/clang-c/Index.h:5877:3)
	""" CXIdxAttr_IBOutlet
	export CXIdxAttrKind, CXIdxAttr_IBAction, CXIdxAttr_IBOutlet, CXIdxAttr_IBOutletCollection, CXIdxAttr_Unexposed
	𝐣𝐥.@ctypedef CXIdxAttrKind 𝐣𝐥.@cenum {
		CXIdxAttr_Unexposed = 𝐣𝐥.Cuint(0)
		CXIdxAttr_IBAction = 𝐣𝐥.Cuint(1)
		CXIdxAttr_IBOutlet = 𝐣𝐥.Cuint(2)
		CXIdxAttr_IBOutletCollection = 𝐣𝐥.Cuint(3)
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5885](./include/clang-c/Index.h:5885:3)
	""" CXIdxAttrInfo
	export CXIdxAttrInfo
	𝐣𝐥.@ctypedef CXIdxAttrInfo 𝐣𝐥.@cstruct {
		kind::CXIdxAttrKind
		cursor::CXCursor
		loc::CXIdxLoc
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5896](./include/clang-c/Index.h:5896:3)
	""" CXIdxEntityInfo
	export CXIdxEntityInfo
	𝐣𝐥.@ctypedef CXIdxEntityInfo 𝐣𝐥.@cstruct {
		kind::CXIdxEntityKind
		templateKind::CXIdxEntityCXXTemplateKind
		lang::CXIdxEntityLanguage
		name::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}
		USR::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}
		cursor::CXCursor
		attributes::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxAttrInfo)})}
		numAttributes::𝐣𝐥.Cuint
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5900](./include/clang-c/Index.h:5900:3)
	""" CXIdxContainerInfo
	export CXIdxContainerInfo
	𝐣𝐥.@ctypedef CXIdxContainerInfo 𝐣𝐥.@cstruct {
		cursor::CXCursor
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5907](./include/clang-c/Index.h:5907:3)
	""" CXIdxIBOutletCollectionAttrInfo
	export CXIdxIBOutletCollectionAttrInfo
	𝐣𝐥.@ctypedef CXIdxIBOutletCollectionAttrInfo 𝐣𝐥.@cstruct {
		attrInfo::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxAttrInfo)}
		objcClass::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityInfo)}
		classCursor::CXCursor
		classLoc::CXIdxLoc
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5910](./include/clang-c/Index.h:5910:3)
	""" CXIdxDeclFlag_Skipped
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5911](./include/clang-c/Index.h:5911:3)
	""" CXIdxDeclInfoFlags
	export CXIdxDeclFlag_Skipped, CXIdxDeclInfoFlags
	𝐣𝐥.@ctypedef CXIdxDeclInfoFlags 𝐣𝐥.@cenum {
		CXIdxDeclFlag_Skipped = 𝐣𝐥.Cuint(1)
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5937](./include/clang-c/Index.h:5937:3)
	""" CXIdxDeclInfo
	export CXIdxDeclInfo
	𝐣𝐥.@ctypedef CXIdxDeclInfo 𝐣𝐥.@cstruct {
		entityInfo::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityInfo)}
		cursor::CXCursor
		loc::CXIdxLoc
		semanticContainer::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxContainerInfo)}
		lexicalContainer::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxContainerInfo)}
		isRedeclaration::𝐣𝐥.Cint
		isDefinition::𝐣𝐥.Cint
		isContainer::𝐣𝐥.Cint
		declAsContainer::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxContainerInfo)}
		isImplicit::𝐣𝐥.Cint
		attributes::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxAttrInfo)})}
		numAttributes::𝐣𝐥.Cuint
		flags::𝐣𝐥.Cuint
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5941](./include/clang-c/Index.h:5941:3)
	""" CXIdxObjCContainer_Interface
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5940](./include/clang-c/Index.h:5940:3)
	""" CXIdxObjCContainer_ForwardRef
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5942](./include/clang-c/Index.h:5942:3)
	""" CXIdxObjCContainer_Implementation
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5943](./include/clang-c/Index.h:5943:3)
	""" CXIdxObjCContainerKind
	export CXIdxObjCContainerKind, CXIdxObjCContainer_ForwardRef, CXIdxObjCContainer_Implementation, CXIdxObjCContainer_Interface
	𝐣𝐥.@ctypedef CXIdxObjCContainerKind 𝐣𝐥.@cenum {
		CXIdxObjCContainer_ForwardRef = 𝐣𝐥.Cuint(0)
		CXIdxObjCContainer_Interface = 𝐣𝐥.Cuint(1)
		CXIdxObjCContainer_Implementation = 𝐣𝐥.Cuint(2)
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5948](./include/clang-c/Index.h:5948:3)
	""" CXIdxObjCContainerDeclInfo
	export CXIdxObjCContainerDeclInfo
	𝐣𝐥.@ctypedef CXIdxObjCContainerDeclInfo 𝐣𝐥.@cstruct {
		declInfo::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)}
		kind::CXIdxObjCContainerKind
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5954](./include/clang-c/Index.h:5954:3)
	""" CXIdxBaseClassInfo
	export CXIdxBaseClassInfo
	𝐣𝐥.@ctypedef CXIdxBaseClassInfo 𝐣𝐥.@cstruct {
		base::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityInfo)}
		cursor::CXCursor
		loc::CXIdxLoc
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5960](./include/clang-c/Index.h:5960:3)
	""" CXIdxObjCProtocolRefInfo
	export CXIdxObjCProtocolRefInfo
	𝐣𝐥.@ctypedef CXIdxObjCProtocolRefInfo 𝐣𝐥.@cstruct {
		protocol::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityInfo)}
		cursor::CXCursor
		loc::CXIdxLoc
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5965](./include/clang-c/Index.h:5965:3)
	""" CXIdxObjCProtocolRefListInfo
	export CXIdxObjCProtocolRefListInfo
	𝐣𝐥.@ctypedef CXIdxObjCProtocolRefListInfo 𝐣𝐥.@cstruct {
		protocols::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCProtocolRefInfo)})}
		numProtocols::𝐣𝐥.Cuint
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5971](./include/clang-c/Index.h:5971:3)
	""" CXIdxObjCInterfaceDeclInfo
	export CXIdxObjCInterfaceDeclInfo
	𝐣𝐥.@ctypedef CXIdxObjCInterfaceDeclInfo 𝐣𝐥.@cstruct {
		containerInfo::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCContainerDeclInfo)}
		superInfo::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxBaseClassInfo)}
		protocols::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCProtocolRefListInfo)}
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5979](./include/clang-c/Index.h:5979:3)
	""" CXIdxObjCCategoryDeclInfo
	export CXIdxObjCCategoryDeclInfo
	𝐣𝐥.@ctypedef CXIdxObjCCategoryDeclInfo 𝐣𝐥.@cstruct {
		containerInfo::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCContainerDeclInfo)}
		objcClass::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityInfo)}
		classCursor::CXCursor
		classLoc::CXIdxLoc
		protocols::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCProtocolRefListInfo)}
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5985](./include/clang-c/Index.h:5985:3)
	""" CXIdxObjCPropertyDeclInfo
	export CXIdxObjCPropertyDeclInfo
	𝐣𝐥.@ctypedef CXIdxObjCPropertyDeclInfo 𝐣𝐥.@cstruct {
		declInfo::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)}
		getter::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityInfo)}
		setter::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityInfo)}
	}
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:5991](./include/clang-c/Index.h:5991:3)
	""" CXIdxCXXClassDeclInfo
	export CXIdxCXXClassDeclInfo
	𝐣𝐥.@ctypedef CXIdxCXXClassDeclInfo 𝐣𝐥.@cstruct {
		declInfo::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)}
		bases::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxBaseClassInfo)})}
		numBases::𝐣𝐥.Cuint
	}
	
	𝐣𝐥.@doc """
	 An implicit reference, e.g. a reference of an Objective-C method via the dot syntax.
	
	## Reference
	
	[Index.h:6005](./include/clang-c/Index.h:6005:3)
	""" CXIdxEntityRef_Implicit
	𝐣𝐥.@doc """
	 The entity is referenced directly in user's code.
	
	## Reference
	
	[Index.h:6000](./include/clang-c/Index.h:6000:3)
	""" CXIdxEntityRef_Direct
	𝐣𝐥.@doc """
	 Data for IndexerCallbacks#indexEntityReference.
	
	## Reference
	
	[Index.h:6006](./include/clang-c/Index.h:6006:3)
	""" CXIdxEntityRefKind
	export CXIdxEntityRefKind, CXIdxEntityRef_Direct, CXIdxEntityRef_Implicit
	𝐣𝐥.@ctypedef CXIdxEntityRefKind 𝐣𝐥.@cenum {
		CXIdxEntityRef_Direct = 𝐣𝐥.Cuint(1)
		CXIdxEntityRef_Implicit = 𝐣𝐥.Cuint(2)
	}
	
	𝐣𝐥.@doc """
	 Data for IndexerCallbacks#indexEntityReference.
	
	## Reference
	
	[Index.h:6038](./include/clang-c/Index.h:6038:3)
	""" CXIdxEntityRefInfo
	export CXIdxEntityRefInfo
	𝐣𝐥.@ctypedef CXIdxEntityRefInfo 𝐣𝐥.@cstruct {
		kind::CXIdxEntityRefKind
		cursor::CXCursor
		loc::CXIdxLoc
		referencedEntity::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityInfo)}
		parentEntity::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityInfo)}
		container::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxContainerInfo)}
	}
	
	𝐣𝐥.@doc """
	 A group of callbacks used by #clang_indexSourceFile and #clang_indexTranslationUnit.
	
	## Reference
	
	[Index.h:6092](./include/clang-c/Index.h:6092:3)
	""" IndexerCallbacks
	export IndexerCallbacks
	𝐣𝐥.@ctypedef IndexerCallbacks 𝐣𝐥.@cstruct {
		abortQuery::𝐣𝐥.Ptr{𝐣𝐥.Cfunction{𝐣𝐥.Cint, 𝐣𝐥.Tuple{CXClientData, 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}}, 𝐣𝐥.CDECL}}
		diagnostic::𝐣𝐥.Ptr{𝐣𝐥.Cfunction{𝐣𝐥.Cvoid, 𝐣𝐥.Tuple{CXClientData, CXDiagnosticSet, 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}}, 𝐣𝐥.CDECL}}
		enteredMainFile::𝐣𝐥.Ptr{𝐣𝐥.Cfunction{CXIdxClientFile, 𝐣𝐥.Tuple{CXClientData, CXFile, 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}}, 𝐣𝐥.CDECL}}
		ppIncludedFile::𝐣𝐥.Ptr{𝐣𝐥.Cfunction{CXIdxClientFile, 𝐣𝐥.Tuple{CXClientData, 𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxIncludedFileInfo)}}, 𝐣𝐥.CDECL}}
		importedASTFile::𝐣𝐥.Ptr{𝐣𝐥.Cfunction{CXIdxClientASTFile, 𝐣𝐥.Tuple{CXClientData, 𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxImportedASTFileInfo)}}, 𝐣𝐥.CDECL}}
		startedTranslationUnit::𝐣𝐥.Ptr{𝐣𝐥.Cfunction{CXIdxClientContainer, 𝐣𝐥.Tuple{CXClientData, 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}}, 𝐣𝐥.CDECL}}
		indexDeclaration::𝐣𝐥.Ptr{𝐣𝐥.Cfunction{𝐣𝐥.Cvoid, 𝐣𝐥.Tuple{CXClientData, 𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)}}, 𝐣𝐥.CDECL}}
		indexEntityReference::𝐣𝐥.Ptr{𝐣𝐥.Cfunction{𝐣𝐥.Cvoid, 𝐣𝐥.Tuple{CXClientData, 𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityRefInfo)}}, 𝐣𝐥.CDECL}}
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_index_isEntityObjCContainerKind(var\"?1?\"::CXIdxEntityKind)::𝐣𝐥.Cint
	```
	
	## Reference
	
	[Index.h:6094](./include/clang-c/Index.h:6094:20)
	""" clang_index_isEntityObjCContainerKind
	export clang_index_isEntityObjCContainerKind
	𝐣𝐥.@cextern clang_index_isEntityObjCContainerKind(var"?1?"::CXIdxEntityKind)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_index_getObjCContainerDeclInfo(var\"?1?\"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCContainerDeclInfo)}
	```
	
	## Reference
	
	[Index.h:6096](./include/clang-c/Index.h:6096:1)
	""" clang_index_getObjCContainerDeclInfo
	export clang_index_getObjCContainerDeclInfo
	𝐣𝐥.@cextern clang_index_getObjCContainerDeclInfo(var"?1?"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCContainerDeclInfo)}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_index_getObjCInterfaceDeclInfo(var\"?1?\"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCInterfaceDeclInfo)}
	```
	
	## Reference
	
	[Index.h:6099](./include/clang-c/Index.h:6099:1)
	""" clang_index_getObjCInterfaceDeclInfo
	export clang_index_getObjCInterfaceDeclInfo
	𝐣𝐥.@cextern clang_index_getObjCInterfaceDeclInfo(var"?1?"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCInterfaceDeclInfo)}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_index_getObjCCategoryDeclInfo(var\"?1?\"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCCategoryDeclInfo)}
	```
	
	## Reference
	
	[Index.h:6103](./include/clang-c/Index.h:6103:1)
	""" clang_index_getObjCCategoryDeclInfo
	export clang_index_getObjCCategoryDeclInfo
	𝐣𝐥.@cextern clang_index_getObjCCategoryDeclInfo(var"?1?"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCCategoryDeclInfo)}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_index_getObjCProtocolRefListInfo(var\"?1?\"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCProtocolRefListInfo)}
	```
	
	## Reference
	
	[Index.h:6106](./include/clang-c/Index.h:6106:1)
	""" clang_index_getObjCProtocolRefListInfo
	export clang_index_getObjCProtocolRefListInfo
	𝐣𝐥.@cextern clang_index_getObjCProtocolRefListInfo(var"?1?"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCProtocolRefListInfo)}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_index_getObjCPropertyDeclInfo(var\"?1?\"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCPropertyDeclInfo)}
	```
	
	## Reference
	
	[Index.h:6109](./include/clang-c/Index.h:6109:1)
	""" clang_index_getObjCPropertyDeclInfo
	export clang_index_getObjCPropertyDeclInfo
	𝐣𝐥.@cextern clang_index_getObjCPropertyDeclInfo(var"?1?"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxObjCPropertyDeclInfo)}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_index_getIBOutletCollectionAttrInfo(var\"?1?\"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxAttrInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxIBOutletCollectionAttrInfo)}
	```
	
	## Reference
	
	[Index.h:6112](./include/clang-c/Index.h:6112:1)
	""" clang_index_getIBOutletCollectionAttrInfo
	export clang_index_getIBOutletCollectionAttrInfo
	𝐣𝐥.@cextern clang_index_getIBOutletCollectionAttrInfo(var"?1?"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxAttrInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxIBOutletCollectionAttrInfo)}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_index_getCXXClassDeclInfo(var\"?1?\"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxCXXClassDeclInfo)}
	```
	
	## Reference
	
	[Index.h:6115](./include/clang-c/Index.h:6115:1)
	""" clang_index_getCXXClassDeclInfo
	export clang_index_getCXXClassDeclInfo
	𝐣𝐥.@cextern clang_index_getCXXClassDeclInfo(var"?1?"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxDeclInfo)})::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxCXXClassDeclInfo)}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_index_getClientContainer(var\"?1?\"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxContainerInfo)})::CXIdxClientContainer
	```
	
	 For retrieving a custom CXIdxClientContainer attached to a container.
	
	## Reference
	
	[Index.h:6122](./include/clang-c/Index.h:6122:1)
	""" clang_index_getClientContainer
	export clang_index_getClientContainer
	𝐣𝐥.@cextern clang_index_getClientContainer(var"?1?"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxContainerInfo)})::CXIdxClientContainer
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_index_setClientContainer(var\"?1?\"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxContainerInfo)}, var\"?2?\"::CXIdxClientContainer)::𝐣𝐥.Cvoid
	```
	
	 For setting a custom CXIdxClientContainer attached to a container.
	
	## Reference
	
	[Index.h:6129](./include/clang-c/Index.h:6129:1)
	""" clang_index_setClientContainer
	export clang_index_setClientContainer
	𝐣𝐥.@cextern clang_index_setClientContainer(var"?1?"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxContainerInfo)}, var"?2?"::CXIdxClientContainer)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_index_getClientEntity(var\"?1?\"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityInfo)})::CXIdxClientEntity
	```
	
	 For retrieving a custom CXIdxClientEntity attached to an entity.
	
	## Reference
	
	[Index.h:6135](./include/clang-c/Index.h:6135:1)
	""" clang_index_getClientEntity
	export clang_index_getClientEntity
	𝐣𝐥.@cextern clang_index_getClientEntity(var"?1?"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityInfo)})::CXIdxClientEntity
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_index_setClientEntity(var\"?1?\"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityInfo)}, var\"?2?\"::CXIdxClientEntity)::𝐣𝐥.Cvoid
	```
	
	 For setting a custom CXIdxClientEntity attached to an entity.
	
	## Reference
	
	[Index.h:6141](./include/clang-c/Index.h:6141:1)
	""" clang_index_setClientEntity
	export clang_index_setClientEntity
	𝐣𝐥.@cextern clang_index_setClientEntity(var"?1?"::𝐣𝐥.Ptr{𝐣𝐥.Cconst(CXIdxEntityInfo)}, var"?2?"::CXIdxClientEntity)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	 An indexing action/session, to be applied to one or multiple translation units.
	
	## Reference
	
	[Index.h:6147](./include/clang-c/Index.h:6147:15)
	""" CXIndexAction
	export CXIndexAction
	𝐣𝐥.@ctypedef CXIndexAction 𝐣𝐥.Ptr{𝐣𝐥.Cvoid}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_IndexAction_create(CIdx::CXIndex)::CXIndexAction
	```
	
	 An indexing action/session, to be applied to one or multiple translation units.
	
	## Parameters
	
	  * `CIdx`: The index object with which the index action will be associated.
	
	## Reference
	
	[Index.h:6155](./include/clang-c/Index.h:6155:30)
	""" clang_IndexAction_create
	export clang_IndexAction_create
	𝐣𝐥.@cextern clang_IndexAction_create(CIdx::CXIndex)::CXIndexAction
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_IndexAction_dispose(var\"?1?\"::CXIndexAction)::𝐣𝐥.Cvoid
	```
	
	 Destroy the given index action.
	
	## Details
	
	 The index action must not be destroyed until all of the translation units created within that index action have been destroyed.
	
	## Reference
	
	[Index.h:6163](./include/clang-c/Index.h:6163:21)
	""" clang_IndexAction_dispose
	export clang_IndexAction_dispose
	𝐣𝐥.@cextern clang_IndexAction_dispose(var"?1?"::CXIndexAction)::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	 Skip a function/method body that was already parsed during an indexing session associated with a `CXIndexAction` object. Bodies in system headers are always skipped.
	
	## Reference
	
	[Index.h:6200](./include/clang-c/Index.h:6200:3)
	""" CXIndexOpt_SkipParsedBodiesInSession
	𝐣𝐥.@doc """
	 Implicit function/class template instantiations should be indexed. If this is not set, implicit instantiations will be ignored.
	
	## Reference
	
	[Index.h:6188](./include/clang-c/Index.h:6188:3)
	""" CXIndexOpt_IndexImplicitTemplateInstantiations
	𝐣𝐥.@doc """
	 Used to indicate that no special indexing options are needed.
	
	## Reference
	
	[Index.h:6169](./include/clang-c/Index.h:6169:3)
	""" CXIndexOpt_None
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:6202](./include/clang-c/Index.h:6202:3)
	""" CXIndexOptFlags
	𝐣𝐥.@doc """
	 Suppress all compiler warnings when parsing for indexing.
	
	## Reference
	
	[Index.h:6193](./include/clang-c/Index.h:6193:3)
	""" CXIndexOpt_SuppressWarnings
	𝐣𝐥.@doc """
	 Used to indicate that IndexerCallbacks#indexEntityReference should be invoked for only one reference of an entity per source file that does not also include a declaration/definition of the entity.
	
	## Reference
	
	[Index.h:6176](./include/clang-c/Index.h:6176:3)
	""" CXIndexOpt_SuppressRedundantRefs
	𝐣𝐥.@doc """
	 Function-local symbols should be indexed. If this is not set function-local symbols will be ignored.
	
	## Reference
	
	[Index.h:6182](./include/clang-c/Index.h:6182:3)
	""" CXIndexOpt_IndexFunctionLocalSymbols
	export CXIndexOptFlags, CXIndexOpt_IndexFunctionLocalSymbols, CXIndexOpt_IndexImplicitTemplateInstantiations, CXIndexOpt_None, CXIndexOpt_SkipParsedBodiesInSession, CXIndexOpt_SuppressRedundantRefs, CXIndexOpt_SuppressWarnings
	𝐣𝐥.@ctypedef CXIndexOptFlags 𝐣𝐥.@cenum {
		CXIndexOpt_None = 𝐣𝐥.Cuint(0)
		CXIndexOpt_SuppressRedundantRefs = 𝐣𝐥.Cuint(1)
		CXIndexOpt_IndexFunctionLocalSymbols = 𝐣𝐥.Cuint(2)
		CXIndexOpt_IndexImplicitTemplateInstantiations = 𝐣𝐥.Cuint(4)
		CXIndexOpt_SuppressWarnings = 𝐣𝐥.Cuint(8)
		CXIndexOpt_SkipParsedBodiesInSession = 𝐣𝐥.Cuint(16)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_indexSourceFile(var\"?1?\"::CXIndexAction, client_data::CXClientData, index_callbacks::𝐣𝐥.Ptr{IndexerCallbacks}, index_callbacks_size::𝐣𝐥.Cuint, index_options::𝐣𝐥.Cuint, source_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, command_line_args::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})}, num_command_line_args::𝐣𝐥.Cint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, num_unsaved_files::𝐣𝐥.Cuint, out_TU::𝐣𝐥.Ptr{CXTranslationUnit}, TU_options::𝐣𝐥.Cuint)::𝐣𝐥.Cint
	```
	
	 Index the given source file and the translation unit corresponding to that file via callbacks implemented through #IndexerCallbacks.
	
	## Parameters
	
	  * `client_data`: pointer data supplied by the client, which will be passed to the invoked callbacks.
	  * `index_callbacks`: Pointer to indexing callbacks that the client implements.
	  * `index_callbacks_size`: Size of #IndexerCallbacks structure that gets passed in index_callbacks.
	  * `index_options`: A bitmask of options that affects how indexing is performed. This should be a bitwise OR of the CXIndexOpt_XXX flags.
	  * `out_TU`: pointer to store a `CXTranslationUnit` that can be reused after indexing is finished. Set to `NULL` if you do not require it.
	
	## Returns
	
	 0 on success or if there were errors from which the compiler could recover.  If there is a failure from which there is no recovery, returns a non-zero `CXErrorCode.`
	
	 The rest of the parameters are the same as #clang_parseTranslationUnit.
	
	## Reference
	
	[Index.h:6229](./include/clang-c/Index.h:6229:20)
	""" clang_indexSourceFile
	export clang_indexSourceFile
	𝐣𝐥.@cextern clang_indexSourceFile(var"?1?"::CXIndexAction, client_data::CXClientData, index_callbacks::𝐣𝐥.Ptr{IndexerCallbacks}, index_callbacks_size::𝐣𝐥.Cuint, index_options::𝐣𝐥.Cuint, source_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, command_line_args::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})}, num_command_line_args::𝐣𝐥.Cint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, num_unsaved_files::𝐣𝐥.Cuint, out_TU::𝐣𝐥.Ptr{CXTranslationUnit}, TU_options::𝐣𝐥.Cuint)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_indexSourceFileFullArgv(var\"?1?\"::CXIndexAction, client_data::CXClientData, index_callbacks::𝐣𝐥.Ptr{IndexerCallbacks}, index_callbacks_size::𝐣𝐥.Cuint, index_options::𝐣𝐥.Cuint, source_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, command_line_args::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})}, num_command_line_args::𝐣𝐥.Cint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, num_unsaved_files::𝐣𝐥.Cuint, out_TU::𝐣𝐥.Ptr{CXTranslationUnit}, TU_options::𝐣𝐥.Cuint)::𝐣𝐥.Cint
	```
	
	 Same as clang_indexSourceFile but requires a full command line for `command_line_args` including argv[0]. This is useful if the standard library paths are relative to the binary.
	
	## Reference
	
	[Index.h:6247](./include/clang-c/Index.h:6247:20)
	""" clang_indexSourceFileFullArgv
	export clang_indexSourceFileFullArgv
	𝐣𝐥.@cextern clang_indexSourceFileFullArgv(var"?1?"::CXIndexAction, client_data::CXClientData, index_callbacks::𝐣𝐥.Ptr{IndexerCallbacks}, index_callbacks_size::𝐣𝐥.Cuint, index_options::𝐣𝐥.Cuint, source_filename::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)}, command_line_args::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cchar)})}, num_command_line_args::𝐣𝐥.Cint, unsaved_files::𝐣𝐥.Ptr{𝐣𝐥.@cstruct CXUnsavedFile}, num_unsaved_files::𝐣𝐥.Cuint, out_TU::𝐣𝐥.Ptr{CXTranslationUnit}, TU_options::𝐣𝐥.Cuint)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_indexTranslationUnit(var\"?1?\"::CXIndexAction, client_data::CXClientData, index_callbacks::𝐣𝐥.Ptr{IndexerCallbacks}, index_callbacks_size::𝐣𝐥.Cuint, index_options::𝐣𝐥.Cuint, var\"?6?\"::CXTranslationUnit)::𝐣𝐥.Cint
	```
	
	 Index the given translation unit via callbacks implemented through #IndexerCallbacks.
	
	## Details
	
	 The order of callback invocations is not guaranteed to be the same as when indexing a source file. The high level order will be:
	
	   -Preprocessor callbacks invocations   -Declaration/reference callbacks invocations   -Diagnostic callback invocations
	
	 The parameters are the same as #clang_indexSourceFile.
	
	## Returns
	
	 If there is a failure from which there is no recovery, returns non-zero, otherwise returns 0.
	
	## Reference
	
	[Index.h:6270](./include/clang-c/Index.h:6270:20)
	""" clang_indexTranslationUnit
	export clang_indexTranslationUnit
	𝐣𝐥.@cextern clang_indexTranslationUnit(var"?1?"::CXIndexAction, client_data::CXClientData, index_callbacks::𝐣𝐥.Ptr{IndexerCallbacks}, index_callbacks_size::𝐣𝐥.Cuint, index_options::𝐣𝐥.Cuint, var"?6?"::CXTranslationUnit)::𝐣𝐥.Cint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_indexLoc_getFileLocation(loc::CXIdxLoc, indexFile::𝐣𝐥.Ptr{CXIdxClientFile}, file::𝐣𝐥.Ptr{CXFile}, line::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, column::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, offset::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	```
	
	 Retrieve the CXIdxFile, file, line, column, and offset represented by the given CXIdxLoc.
	
	## Details
	
	 If the location refers into a macro expansion, retrieves the location of the macro expansion and if it refers into a macro argument retrieves the location of the argument.
	
	## Reference
	
	[Index.h:6285](./include/clang-c/Index.h:6285:21)
	""" clang_indexLoc_getFileLocation
	export clang_indexLoc_getFileLocation
	𝐣𝐥.@cextern clang_indexLoc_getFileLocation(loc::CXIdxLoc, indexFile::𝐣𝐥.Ptr{CXIdxClientFile}, file::𝐣𝐥.Ptr{CXFile}, line::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, column::𝐣𝐥.Ptr{𝐣𝐥.Cuint}, offset::𝐣𝐥.Ptr{𝐣𝐥.Cuint})::𝐣𝐥.Cvoid
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_indexLoc_getCXSourceLocation(loc::CXIdxLoc)::CXSourceLocation
	```
	
	 Retrieve the CXSourceLocation represented by the given CXIdxLoc.
	
	## Reference
	
	[Index.h:6296](./include/clang-c/Index.h:6296:18)
	""" clang_indexLoc_getCXSourceLocation
	export clang_indexLoc_getCXSourceLocation
	𝐣𝐥.@cextern clang_indexLoc_getCXSourceLocation(loc::CXIdxLoc)::CXSourceLocation
	
	𝐣𝐥.@doc """
	 Visitor invoked for each field found by a traversal.
	
	## Details
	
	 This visitor function will be invoked for each field found by `clang_Type_visitFields.` Its first argument is the cursor being visited, its second argument is the client data provided to `clang_Type_visitFields.`
	
	 The visitor should return one of the `CXVisitorResult` values to direct `clang_Type_visitFields.` 
	
	## Reference
	
	[Index.h:6309](./include/clang-c/Index.h:6309:32)
	""" CXFieldVisitor
	export CXFieldVisitor
	𝐣𝐥.@ctypedef CXFieldVisitor 𝐣𝐥.Ptr{𝐣𝐥.Cfunction{(𝐣𝐥.@cenum CXVisitorResult), 𝐣𝐥.Tuple{CXCursor, CXClientData}, 𝐣𝐥.CDECL}}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Type_visitFields(T::CXType, visitor::CXFieldVisitor, client_data::CXClientData)::𝐣𝐥.Cuint
	```
	
	 Visit the fields of a particular type.
	
	## Details
	
	 This function visits all the direct fields of the given cursor, invoking the given `visitor` function with the cursors of each visited field. The traversal may be ended prematurely, if the visitor returns `CXFieldVisit_Break.`
	
	## Parameters
	
	  * `T`: the record type whose field may be visited.
	  * `visitor`: the visitor function that will be invoked for each field of `T.`
	  * `client_data`: pointer data supplied by the client, which will be passed to the visitor each time it is invoked.
	
	## Returns
	
	 a non-zero value if the traversal was terminated prematurely by the visitor returning `CXFieldVisit_Break.` 
	
	## Reference
	
	[Index.h:6331](./include/clang-c/Index.h:6331:25)
	""" clang_Type_visitFields
	export clang_Type_visitFields
	𝐣𝐥.@cextern clang_Type_visitFields(T::CXType, visitor::CXFieldVisitor, client_data::CXClientData)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	 A parsed comment.
	
	## Reference
	
	[Documentation.h:40](./include/clang-c/Documentation.h:40:3)
	""" CXComment
	export CXComment
	𝐣𝐥.@ctypedef CXComment 𝐣𝐥.@cstruct {
		ASTNode::𝐣𝐥.Ptr{𝐣𝐥.Cconst(𝐣𝐥.Cvoid)}
		TranslationUnit::CXTranslationUnit
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Cursor_getParsedComment(C::CXCursor)::CXComment
	```
	
	 Given a cursor that represents a documentable entity (e.g., declaration), return the associated parsed comment as a `CXComment_FullComment` AST node.
	
	## Reference
	
	[Documentation.h:47](./include/clang-c/Documentation.h:47:26)
	""" clang_Cursor_getParsedComment
	export clang_Cursor_getParsedComment
	𝐣𝐥.@cextern clang_Cursor_getParsedComment(C::CXCursor)::CXComment
	
	𝐣𝐥.@doc """
	 HTML end tag.  Considered inline content.
	
	## Details
	
	 For example: 
	
	```
	 </a>
	```
	
	## Reference
	
	[Documentation.h:92](./include/clang-c/Documentation.h:92:3)
	""" CXComment_HTMLEndTag
	𝐣𝐥.@doc """
	 Plain text.  Inline content.
	
	## Reference
	
	[Documentation.h:64](./include/clang-c/Documentation.h:64:3)
	""" CXComment_Text
	𝐣𝐥.@doc """
	 Describes the type of the comment AST node (`CXComment).`  A comment node can be considered block content (e. g., paragraph), inline content (plain text) or neither (the root AST node).
	
	## Reference
	
	[Documentation.h:54](./include/clang-c/Documentation.h:54:6)
	""" CXCommentKind
	𝐣𝐥.@doc """
	 A verbatim line command.  Verbatim line has an opening command, a single line of text (up to the newline after the opening command) and has no closing command.
	
	## Reference
	
	[Documentation.h:153](./include/clang-c/Documentation.h:153:3)
	""" CXComment_VerbatimLine
	𝐣𝐥.@doc """
	 A paragraph, contains inline comment.  The paragraph itself is block content.
	
	## Reference
	
	[Documentation.h:98](./include/clang-c/Documentation.h:98:3)
	""" CXComment_Paragraph
	𝐣𝐥.@doc """
	 A full comment attached to a declaration, contains block content.
	
	## Reference
	
	[Documentation.h:158](./include/clang-c/Documentation.h:158:3)
	""" CXComment_FullComment
	𝐣𝐥.@doc """
	 A \\tparam command that describes a template parameter (name and description).
	
	## Details
	
	 For example: \\tparam T description.
	
	## Reference
	
	[Documentation.h:128](./include/clang-c/Documentation.h:128:3)
	""" CXComment_TParamCommand
	𝐣𝐥.@doc """
	 A verbatim block command (e. g., preformatted code).  Verbatim block has an opening and a closing command and contains multiple lines of text (`CXComment_VerbatimBlockLine` child nodes).
	
	## Details
	
	 For example: \\verbatim aaa \\endverbatim
	
	## Reference
	
	[Documentation.h:140](./include/clang-c/Documentation.h:140:3)
	""" CXComment_VerbatimBlockCommand
	𝐣𝐥.@doc """
	 HTML start tag with attributes (name-value pairs).  Considered inline content.
	
	## Details
	
	 For example: 
	
	```
	 <br> <br /> <a href=\"http://example.org/\">
	```
	
	## Reference
	
	[Documentation.h:82](./include/clang-c/Documentation.h:82:3)
	""" CXComment_HTMLStartTag
	𝐣𝐥.@doc """
	 A command that has zero or more word-like arguments (number of word-like arguments depends on command name) and a paragraph as an argument.  Block command is block content.
	
	## Details
	
	 Paragraph argument is also a child of the block command.
	
	 For example: \\brief has 0 word-like arguments and a paragraph argument.
	
	 AST nodes of special kinds that parser knows about (e. g., \\param command) have their own node kinds.
	
	## Reference
	
	[Documentation.h:112](./include/clang-c/Documentation.h:112:3)
	""" CXComment_BlockCommand
	𝐣𝐥.@doc """
	 A command with word-like arguments that is considered inline content.
	
	## Details
	
	 For example: \\c command.
	
	## Reference
	
	[Documentation.h:71](./include/clang-c/Documentation.h:71:3)
	""" CXComment_InlineCommand
	𝐣𝐥.@doc """
	 A line of text that is contained within a CXComment_VerbatimBlockCommand node.
	
	## Reference
	
	[Documentation.h:146](./include/clang-c/Documentation.h:146:3)
	""" CXComment_VerbatimBlockLine
	𝐣𝐥.@doc """
	 A \\param or \\arg command that describes the function parameter (name, passing direction, description).
	
	## Details
	
	 For example: \\param [in] ParamName description.
	
	## Reference
	
	[Documentation.h:120](./include/clang-c/Documentation.h:120:3)
	""" CXComment_ParamCommand
	𝐣𝐥.@doc """
	 Null comment.  No AST node is constructed at the requested location because there is no text or a syntax error.
	
	## Reference
	
	[Documentation.h:59](./include/clang-c/Documentation.h:59:3)
	""" CXComment_Null
	export CXCommentKind, CXComment_BlockCommand, CXComment_FullComment, CXComment_HTMLEndTag, CXComment_HTMLStartTag, CXComment_InlineCommand, CXComment_Null, CXComment_Paragraph, CXComment_ParamCommand, CXComment_TParamCommand, CXComment_Text, CXComment_VerbatimBlockCommand, CXComment_VerbatimBlockLine, CXComment_VerbatimLine
	𝐣𝐥.@cenum CXCommentKind {
		CXComment_Null = 𝐣𝐥.Cuint(0)
		CXComment_Text = 𝐣𝐥.Cuint(1)
		CXComment_InlineCommand = 𝐣𝐥.Cuint(2)
		CXComment_HTMLStartTag = 𝐣𝐥.Cuint(3)
		CXComment_HTMLEndTag = 𝐣𝐥.Cuint(4)
		CXComment_Paragraph = 𝐣𝐥.Cuint(5)
		CXComment_BlockCommand = 𝐣𝐥.Cuint(6)
		CXComment_ParamCommand = 𝐣𝐥.Cuint(7)
		CXComment_TParamCommand = 𝐣𝐥.Cuint(8)
		CXComment_VerbatimBlockCommand = 𝐣𝐥.Cuint(9)
		CXComment_VerbatimBlockLine = 𝐣𝐥.Cuint(10)
		CXComment_VerbatimLine = 𝐣𝐥.Cuint(11)
		CXComment_FullComment = 𝐣𝐥.Cuint(12)
	}
	
	𝐣𝐥.@doc """
	 Command argument should be rendered in a monospaced font.
	
	## Reference
	
	[Documentation.h:179](./include/clang-c/Documentation.h:179:3)
	""" CXCommentInlineCommandRenderKind_Monospaced
	𝐣𝐥.@doc """
	 Command argument should be rendered in a bold font.
	
	## Reference
	
	[Documentation.h:174](./include/clang-c/Documentation.h:174:3)
	""" CXCommentInlineCommandRenderKind_Bold
	𝐣𝐥.@doc """
	 Command argument should be rendered emphasized (typically italic font).
	
	## Reference
	
	[Documentation.h:185](./include/clang-c/Documentation.h:185:3)
	""" CXCommentInlineCommandRenderKind_Emphasized
	𝐣𝐥.@doc """
	 The most appropriate rendering mode for an inline command, chosen on command semantics in Doxygen.
	
	## Reference
	
	[Documentation.h:165](./include/clang-c/Documentation.h:165:6)
	""" CXCommentInlineCommandRenderKind
	𝐣𝐥.@doc """
	 Command argument should be rendered in a normal font.
	
	## Reference
	
	[Documentation.h:169](./include/clang-c/Documentation.h:169:3)
	""" CXCommentInlineCommandRenderKind_Normal
	export CXCommentInlineCommandRenderKind, CXCommentInlineCommandRenderKind_Bold, CXCommentInlineCommandRenderKind_Emphasized, CXCommentInlineCommandRenderKind_Monospaced, CXCommentInlineCommandRenderKind_Normal
	𝐣𝐥.@cenum CXCommentInlineCommandRenderKind {
		CXCommentInlineCommandRenderKind_Normal = 𝐣𝐥.Cuint(0)
		CXCommentInlineCommandRenderKind_Bold = 𝐣𝐥.Cuint(1)
		CXCommentInlineCommandRenderKind_Monospaced = 𝐣𝐥.Cuint(2)
		CXCommentInlineCommandRenderKind_Emphasized = 𝐣𝐥.Cuint(3)
	}
	
	𝐣𝐥.@doc """
	 The parameter is an input parameter.
	
	## Reference
	
	[Documentation.h:195](./include/clang-c/Documentation.h:195:3)
	""" CXCommentParamPassDirection_In
	𝐣𝐥.@doc """
	 The parameter is an output parameter.
	
	## Reference
	
	[Documentation.h:200](./include/clang-c/Documentation.h:200:3)
	""" CXCommentParamPassDirection_Out
	𝐣𝐥.@doc """
	 Describes parameter passing direction for \\param or \\arg command.
	
	## Reference
	
	[Documentation.h:191](./include/clang-c/Documentation.h:191:6)
	""" CXCommentParamPassDirection
	𝐣𝐥.@doc """
	 The parameter is an input and output parameter.
	
	## Reference
	
	[Documentation.h:205](./include/clang-c/Documentation.h:205:3)
	""" CXCommentParamPassDirection_InOut
	export CXCommentParamPassDirection, CXCommentParamPassDirection_In, CXCommentParamPassDirection_InOut, CXCommentParamPassDirection_Out
	𝐣𝐥.@cenum CXCommentParamPassDirection {
		CXCommentParamPassDirection_In = 𝐣𝐥.Cuint(0)
		CXCommentParamPassDirection_Out = 𝐣𝐥.Cuint(1)
		CXCommentParamPassDirection_InOut = 𝐣𝐥.Cuint(2)
	}
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Comment_getKind(Comment::CXComment)::𝐣𝐥.@cenum CXCommentKind
	```
	
	## Parameters
	
	  * `Comment`: AST node of any kind.
	
	## Returns
	
	 the type of the AST node.
	
	## Reference
	
	[Documentation.h:213](./include/clang-c/Documentation.h:213:35)
	""" clang_Comment_getKind
	export clang_Comment_getKind
	𝐣𝐥.@cextern clang_Comment_getKind(Comment::CXComment)::𝐣𝐥.@cenum CXCommentKind
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Comment_getNumChildren(Comment::CXComment)::𝐣𝐥.Cuint
	```
	
	## Parameters
	
	  * `Comment`: AST node of any kind.
	
	## Returns
	
	 number of children of the AST node.
	
	## Reference
	
	[Documentation.h:220](./include/clang-c/Documentation.h:220:25)
	""" clang_Comment_getNumChildren
	export clang_Comment_getNumChildren
	𝐣𝐥.@cextern clang_Comment_getNumChildren(Comment::CXComment)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Comment_getChild(Comment::CXComment, ChildIdx::𝐣𝐥.Cuint)::CXComment
	```
	
	## Parameters
	
	  * `Comment`: AST node of any kind.
	
	## Details
	
	  * `ChildIdx`: child index (zero-based).
	
	## Returns
	
	 the specified child of the AST node.
	
	## Reference
	
	[Documentation.h:230](./include/clang-c/Documentation.h:230:11)
	""" clang_Comment_getChild
	export clang_Comment_getChild
	𝐣𝐥.@cextern clang_Comment_getChild(Comment::CXComment, ChildIdx::𝐣𝐥.Cuint)::CXComment
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_Comment_isWhitespace(Comment::CXComment)::𝐣𝐥.Cuint
	```
	
	 A `CXComment_Paragraph` node is considered whitespace if it contains only `CXComment_Text` nodes that are empty or whitespace.
	
	## Details
	
	 Other AST nodes (except `CXComment_Paragraph` and `CXComment_Text)` are never considered whitespace.
	
	## Returns
	
	 non-zero if `Comment` is whitespace.
	
	## Reference
	
	[Documentation.h:241](./include/clang-c/Documentation.h:241:25)
	""" clang_Comment_isWhitespace
	export clang_Comment_isWhitespace
	𝐣𝐥.@cextern clang_Comment_isWhitespace(Comment::CXComment)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_InlineContentComment_hasTrailingNewline(Comment::CXComment)::𝐣𝐥.Cuint
	```
	
	## Returns
	
	 non-zero if `Comment` is inline content and has a newline immediately following it in the comment text.  Newlines between paragraphs do not count.
	
	## Reference
	
	[Documentation.h:249](./include/clang-c/Documentation.h:249:10)
	""" clang_InlineContentComment_hasTrailingNewline
	export clang_InlineContentComment_hasTrailingNewline
	𝐣𝐥.@cextern clang_InlineContentComment_hasTrailingNewline(Comment::CXComment)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_TextComment_getText(Comment::CXComment)::CXString
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_Text` AST node.
	
	## Returns
	
	 text contained in the AST node.
	
	## Reference
	
	[Documentation.h:256](./include/clang-c/Documentation.h:256:25)
	""" clang_TextComment_getText
	export clang_TextComment_getText
	𝐣𝐥.@cextern clang_TextComment_getText(Comment::CXComment)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_InlineCommandComment_getCommandName(Comment::CXComment)::CXString
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_InlineCommand` AST node.
	
	## Returns
	
	 name of the inline command.
	
	## Reference
	
	[Documentation.h:264](./include/clang-c/Documentation.h:264:10)
	""" clang_InlineCommandComment_getCommandName
	export clang_InlineCommandComment_getCommandName
	𝐣𝐥.@cextern clang_InlineCommandComment_getCommandName(Comment::CXComment)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_InlineCommandComment_getRenderKind(Comment::CXComment)::𝐣𝐥.@cenum CXCommentInlineCommandRenderKind
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_InlineCommand` AST node.
	
	## Returns
	
	 the most appropriate rendering mode, chosen on command semantics in Doxygen.
	
	## Reference
	
	[Documentation.h:273](./include/clang-c/Documentation.h:273:1)
	""" clang_InlineCommandComment_getRenderKind
	export clang_InlineCommandComment_getRenderKind
	𝐣𝐥.@cextern clang_InlineCommandComment_getRenderKind(Comment::CXComment)::𝐣𝐥.@cenum CXCommentInlineCommandRenderKind
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_InlineCommandComment_getNumArgs(Comment::CXComment)::𝐣𝐥.Cuint
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_InlineCommand` AST node.
	
	## Returns
	
	 number of command arguments.
	
	## Reference
	
	[Documentation.h:281](./include/clang-c/Documentation.h:281:10)
	""" clang_InlineCommandComment_getNumArgs
	export clang_InlineCommandComment_getNumArgs
	𝐣𝐥.@cextern clang_InlineCommandComment_getNumArgs(Comment::CXComment)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_InlineCommandComment_getArgText(Comment::CXComment, ArgIdx::𝐣𝐥.Cuint)::CXString
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_InlineCommand` AST node.
	
	## Details
	
	  * `ArgIdx`: argument index (zero-based).
	
	## Returns
	
	 text of the specified argument.
	
	## Reference
	
	[Documentation.h:291](./include/clang-c/Documentation.h:291:10)
	""" clang_InlineCommandComment_getArgText
	export clang_InlineCommandComment_getArgText
	𝐣𝐥.@cextern clang_InlineCommandComment_getArgText(Comment::CXComment, ArgIdx::𝐣𝐥.Cuint)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_HTMLTagComment_getTagName(Comment::CXComment)::CXString
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_HTMLStartTag` or `CXComment_HTMLEndTag` AST node.
	
	## Returns
	
	 HTML tag name.
	
	## Reference
	
	[Documentation.h:300](./include/clang-c/Documentation.h:300:25)
	""" clang_HTMLTagComment_getTagName
	export clang_HTMLTagComment_getTagName
	𝐣𝐥.@cextern clang_HTMLTagComment_getTagName(Comment::CXComment)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_HTMLStartTagComment_isSelfClosing(Comment::CXComment)::𝐣𝐥.Cuint
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_HTMLStartTag` AST node.
	
	## Returns
	
	 non-zero if tag is self-closing (for example, <br />).
	
	## Reference
	
	[Documentation.h:308](./include/clang-c/Documentation.h:308:10)
	""" clang_HTMLStartTagComment_isSelfClosing
	export clang_HTMLStartTagComment_isSelfClosing
	𝐣𝐥.@cextern clang_HTMLStartTagComment_isSelfClosing(Comment::CXComment)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_HTMLStartTag_getNumAttrs(Comment::CXComment)::𝐣𝐥.Cuint
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_HTMLStartTag` AST node.
	
	## Returns
	
	 number of attributes (name-value pairs) attached to the start tag.
	
	## Reference
	
	[Documentation.h:315](./include/clang-c/Documentation.h:315:25)
	""" clang_HTMLStartTag_getNumAttrs
	export clang_HTMLStartTag_getNumAttrs
	𝐣𝐥.@cextern clang_HTMLStartTag_getNumAttrs(Comment::CXComment)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_HTMLStartTag_getAttrName(Comment::CXComment, AttrIdx::𝐣𝐥.Cuint)::CXString
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_HTMLStartTag` AST node.
	
	## Details
	
	  * `AttrIdx`: attribute index (zero-based).
	
	## Returns
	
	 name of the specified attribute.
	
	## Reference
	
	[Documentation.h:325](./include/clang-c/Documentation.h:325:10)
	""" clang_HTMLStartTag_getAttrName
	export clang_HTMLStartTag_getAttrName
	𝐣𝐥.@cextern clang_HTMLStartTag_getAttrName(Comment::CXComment, AttrIdx::𝐣𝐥.Cuint)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_HTMLStartTag_getAttrValue(Comment::CXComment, AttrIdx::𝐣𝐥.Cuint)::CXString
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_HTMLStartTag` AST node.
	
	## Details
	
	  * `AttrIdx`: attribute index (zero-based).
	
	## Returns
	
	 value of the specified attribute.
	
	## Reference
	
	[Documentation.h:335](./include/clang-c/Documentation.h:335:10)
	""" clang_HTMLStartTag_getAttrValue
	export clang_HTMLStartTag_getAttrValue
	𝐣𝐥.@cextern clang_HTMLStartTag_getAttrValue(Comment::CXComment, AttrIdx::𝐣𝐥.Cuint)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_BlockCommandComment_getCommandName(Comment::CXComment)::CXString
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_BlockCommand` AST node.
	
	## Returns
	
	 name of the block command.
	
	## Reference
	
	[Documentation.h:343](./include/clang-c/Documentation.h:343:10)
	""" clang_BlockCommandComment_getCommandName
	export clang_BlockCommandComment_getCommandName
	𝐣𝐥.@cextern clang_BlockCommandComment_getCommandName(Comment::CXComment)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_BlockCommandComment_getNumArgs(Comment::CXComment)::𝐣𝐥.Cuint
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_BlockCommand` AST node.
	
	## Returns
	
	 number of word-like arguments.
	
	## Reference
	
	[Documentation.h:351](./include/clang-c/Documentation.h:351:10)
	""" clang_BlockCommandComment_getNumArgs
	export clang_BlockCommandComment_getNumArgs
	𝐣𝐥.@cextern clang_BlockCommandComment_getNumArgs(Comment::CXComment)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_BlockCommandComment_getArgText(Comment::CXComment, ArgIdx::𝐣𝐥.Cuint)::CXString
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_BlockCommand` AST node.
	
	## Details
	
	  * `ArgIdx`: argument index (zero-based).
	
	## Returns
	
	 text of the specified word-like argument.
	
	## Reference
	
	[Documentation.h:361](./include/clang-c/Documentation.h:361:10)
	""" clang_BlockCommandComment_getArgText
	export clang_BlockCommandComment_getArgText
	𝐣𝐥.@cextern clang_BlockCommandComment_getArgText(Comment::CXComment, ArgIdx::𝐣𝐥.Cuint)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_BlockCommandComment_getParagraph(Comment::CXComment)::CXComment
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_BlockCommand` or `CXComment_VerbatimBlockCommand` AST node.
	
	## Returns
	
	 paragraph argument of the block command.
	
	## Reference
	
	[Documentation.h:371](./include/clang-c/Documentation.h:371:11)
	""" clang_BlockCommandComment_getParagraph
	export clang_BlockCommandComment_getParagraph
	𝐣𝐥.@cextern clang_BlockCommandComment_getParagraph(Comment::CXComment)::CXComment
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_ParamCommandComment_getParamName(Comment::CXComment)::CXString
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_ParamCommand` AST node.
	
	## Returns
	
	 parameter name.
	
	## Reference
	
	[Documentation.h:379](./include/clang-c/Documentation.h:379:10)
	""" clang_ParamCommandComment_getParamName
	export clang_ParamCommandComment_getParamName
	𝐣𝐥.@cextern clang_ParamCommandComment_getParamName(Comment::CXComment)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_ParamCommandComment_isParamIndexValid(Comment::CXComment)::𝐣𝐥.Cuint
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_ParamCommand` AST node.
	
	## Returns
	
	 non-zero if the parameter that this AST node represents was found in the function prototype and `clang_ParamCommandComment_getParamIndex` function will return a meaningful value.
	
	## Reference
	
	[Documentation.h:389](./include/clang-c/Documentation.h:389:10)
	""" clang_ParamCommandComment_isParamIndexValid
	export clang_ParamCommandComment_isParamIndexValid
	𝐣𝐥.@cextern clang_ParamCommandComment_isParamIndexValid(Comment::CXComment)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_ParamCommandComment_getParamIndex(Comment::CXComment)::𝐣𝐥.Cuint
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_ParamCommand` AST node.
	
	## Returns
	
	 zero-based parameter index in function prototype.
	
	## Reference
	
	[Documentation.h:397](./include/clang-c/Documentation.h:397:10)
	""" clang_ParamCommandComment_getParamIndex
	export clang_ParamCommandComment_getParamIndex
	𝐣𝐥.@cextern clang_ParamCommandComment_getParamIndex(Comment::CXComment)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_ParamCommandComment_isDirectionExplicit(Comment::CXComment)::𝐣𝐥.Cuint
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_ParamCommand` AST node.
	
	## Returns
	
	 non-zero if parameter passing direction was specified explicitly in the comment.
	
	## Reference
	
	[Documentation.h:406](./include/clang-c/Documentation.h:406:10)
	""" clang_ParamCommandComment_isDirectionExplicit
	export clang_ParamCommandComment_isDirectionExplicit
	𝐣𝐥.@cextern clang_ParamCommandComment_isDirectionExplicit(Comment::CXComment)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_ParamCommandComment_getDirection(Comment::CXComment)::𝐣𝐥.@cenum CXCommentParamPassDirection
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_ParamCommand` AST node.
	
	## Returns
	
	 parameter passing direction.
	
	## Reference
	
	[Documentation.h:414](./include/clang-c/Documentation.h:414:34)
	""" clang_ParamCommandComment_getDirection
	export clang_ParamCommandComment_getDirection
	𝐣𝐥.@cextern clang_ParamCommandComment_getDirection(Comment::CXComment)::𝐣𝐥.@cenum CXCommentParamPassDirection
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_TParamCommandComment_getParamName(Comment::CXComment)::CXString
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_TParamCommand` AST node.
	
	## Returns
	
	 template parameter name.
	
	## Reference
	
	[Documentation.h:423](./include/clang-c/Documentation.h:423:10)
	""" clang_TParamCommandComment_getParamName
	export clang_TParamCommandComment_getParamName
	𝐣𝐥.@cextern clang_TParamCommandComment_getParamName(Comment::CXComment)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_TParamCommandComment_isParamPositionValid(Comment::CXComment)::𝐣𝐥.Cuint
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_TParamCommand` AST node.
	
	## Returns
	
	 non-zero if the parameter that this AST node represents was found in the template parameter list and `clang_TParamCommandComment_getDepth` and `clang_TParamCommandComment_getIndex` functions will return a meaningful value.
	
	## Reference
	
	[Documentation.h:435](./include/clang-c/Documentation.h:435:10)
	""" clang_TParamCommandComment_isParamPositionValid
	export clang_TParamCommandComment_isParamPositionValid
	𝐣𝐥.@cextern clang_TParamCommandComment_isParamPositionValid(Comment::CXComment)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_TParamCommandComment_getDepth(Comment::CXComment)::𝐣𝐥.Cuint
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_TParamCommand` AST node.
	
	## Returns
	
	 zero-based nesting depth of this parameter in the template parameter list.
	
	 For example, 
	
	```
	     template<typename C, template<typename T> class TT>
	     void test(TT<int> aaa);
	```
	
	 for C and TT nesting depth is 0, for T nesting depth is 1.
	
	## Reference
	
	[Documentation.h:451](./include/clang-c/Documentation.h:451:10)
	""" clang_TParamCommandComment_getDepth
	export clang_TParamCommandComment_getDepth
	𝐣𝐥.@cextern clang_TParamCommandComment_getDepth(Comment::CXComment)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_TParamCommandComment_getIndex(Comment::CXComment, Depth::𝐣𝐥.Cuint)::𝐣𝐥.Cuint
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_TParamCommand` AST node.
	
	## Returns
	
	 zero-based parameter index in the template parameter list at a given nesting depth.
	
	 For example, 
	
	```
	     template<typename C, template<typename T> class TT>
	     void test(TT<int> aaa);
	```
	
	 for C and TT nesting depth is 0, so we can ask for index at depth 0: at depth 0 C's index is 0, TT's index is 1.
	
	 For T nesting depth is 1, so we can ask for index at depth 0 and 1: at depth 0 T's index is 1 (same as TT's), at depth 1 T's index is 0.
	
	## Reference
	
	[Documentation.h:472](./include/clang-c/Documentation.h:472:10)
	""" clang_TParamCommandComment_getIndex
	export clang_TParamCommandComment_getIndex
	𝐣𝐥.@cextern clang_TParamCommandComment_getIndex(Comment::CXComment, Depth::𝐣𝐥.Cuint)::𝐣𝐥.Cuint
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_VerbatimBlockLineComment_getText(Comment::CXComment)::CXString
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_VerbatimBlockLine` AST node.
	
	## Returns
	
	 text contained in the AST node.
	
	## Reference
	
	[Documentation.h:480](./include/clang-c/Documentation.h:480:10)
	""" clang_VerbatimBlockLineComment_getText
	export clang_VerbatimBlockLineComment_getText
	𝐣𝐥.@cextern clang_VerbatimBlockLineComment_getText(Comment::CXComment)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_VerbatimLineComment_getText(Comment::CXComment)::CXString
	```
	
	## Parameters
	
	  * `Comment`: a `CXComment_VerbatimLine` AST node.
	
	## Returns
	
	 text contained in the AST node.
	
	## Reference
	
	[Documentation.h:487](./include/clang-c/Documentation.h:487:25)
	""" clang_VerbatimLineComment_getText
	export clang_VerbatimLineComment_getText
	𝐣𝐥.@cextern clang_VerbatimLineComment_getText(Comment::CXComment)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_HTMLTagComment_getAsString(Comment::CXComment)::CXString
	```
	
	 Convert an HTML tag AST node to string.
	
	## Parameters
	
	  * `Comment`: a `CXComment_HTMLStartTag` or `CXComment_HTMLEndTag` AST node.
	
	## Returns
	
	 string containing an HTML tag.
	
	## Reference
	
	[Documentation.h:497](./include/clang-c/Documentation.h:497:25)
	""" clang_HTMLTagComment_getAsString
	export clang_HTMLTagComment_getAsString
	𝐣𝐥.@cextern clang_HTMLTagComment_getAsString(Comment::CXComment)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_FullComment_getAsHTML(Comment::CXComment)::CXString
	```
	
	 Convert a given full parsed comment to an HTML fragment.
	
	## Details
	
	 Specific details of HTML layout are subject to change.  Don't try to parse this HTML back into an AST, use other APIs instead.
	
	 Currently the following CSS classes are used: 
	
	  *  \"para-brief\" for \\brief paragraph and equivalent commands;
	  *  \"para-returns\" for \\returns paragraph and equivalent commands;
	  *  \"word-returns\" for the \"Returns\" word in \\returns paragraph.
	
	 Function argument documentation is rendered as a <dl> list with arguments sorted in function prototype order.  CSS classes used: 
	
	  *  \"param-name-index-NUMBER\" for parameter name (<dt>);
	  *  \"param-descr-index-NUMBER\" for parameter description (<dd>);
	  *  \"param-name-index-invalid\" and \"param-descr-index-invalid\" are used if parameter index is invalid.
	
	 Template parameter documentation is rendered as a <dl> list with parameters sorted in template parameter list order.  CSS classes used: 
	
	  *  \"tparam-name-index-NUMBER\" for parameter name (<dt>);
	  *  \"tparam-descr-index-NUMBER\" for parameter description (<dd>);
	  *  \"tparam-name-index-other\" and \"tparam-descr-index-other\" are used for names inside template template parameters;
	  *  \"tparam-name-index-invalid\" and \"tparam-descr-index-invalid\" are used if parameter position is invalid.
	
	## Parameters
	
	  * `Comment`: a `CXComment_FullComment` AST node.
	
	## Returns
	
	 string containing an HTML fragment.
	
	## Reference
	
	[Documentation.h:530](./include/clang-c/Documentation.h:530:25)
	""" clang_FullComment_getAsHTML
	export clang_FullComment_getAsHTML
	𝐣𝐥.@cextern clang_FullComment_getAsHTML(Comment::CXComment)::CXString
	
	𝐣𝐥.@doc """
	```
	𝐣𝐥.@cextern clang_FullComment_getAsXML(Comment::CXComment)::CXString
	```
	
	 Convert a given full parsed comment to an XML document.
	
	## Details
	
	 A Relax NG schema for the XML can be found in comment-xml-schema.rng file inside clang source tree.
	
	## Parameters
	
	  * `Comment`: a `CXComment_FullComment` AST node.
	
	## Returns
	
	 string containing an XML document.
	
	## Reference
	
	[Documentation.h:542](./include/clang-c/Documentation.h:542:25)
	""" clang_FullComment_getAsXML
	export clang_FullComment_getAsXML
	𝐣𝐥.@cextern clang_FullComment_getAsXML(Comment::CXComment)::CXString
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:34](./include/clang-c/Index.h:34:9)
	""" CINDEX_VERSION_MAJOR
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:34](./include/clang-c/Index.h:34:9)
	""" :(@CINDEX_VERSION_MAJOR)
	export @CINDEX_VERSION_MAJOR, CINDEX_VERSION_MAJOR
	macro CINDEX_VERSION_MAJOR() return quote 0 end end
	const CINDEX_VERSION_MAJOR = (@CINDEX_VERSION_MAJOR)
	
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:35](./include/clang-c/Index.h:35:9)
	""" :(@CINDEX_VERSION_MINOR)
	𝐣𝐥.@doc """
	## Reference
	
	[Index.h:35](./include/clang-c/Index.h:35:9)
	""" CINDEX_VERSION_MINOR
	export @CINDEX_VERSION_MINOR, CINDEX_VERSION_MINOR
	macro CINDEX_VERSION_MINOR() return quote 45 end end
	const CINDEX_VERSION_MINOR = (@CINDEX_VERSION_MINOR)
end
